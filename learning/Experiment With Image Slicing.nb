(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    760841,      14874]
NotebookOptionsPosition[    750631,      14709]
NotebookOutlinePosition[    750998,      14725]
CellTagsIndexPosition[    750955,      14722]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Get", " ", "all", " ", "the", " ", "resources", " ", "and", " ", "the", 
    " ", "Constants"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"obj", "=", " ", 
     RowBox[{"ResourceObject", "[", "\"\<CIFAR-10\>\"", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"trainingData", " ", "=", " ", 
     RowBox[{"ResourceData", "[", 
      RowBox[{"obj", ",", " ", "\"\<TrainingData\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"testData", " ", "=", " ", 
     RowBox[{"ResourceData", "[", 
      RowBox[{"obj", ",", " ", "\"\<TestData\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"sizeOfInputLayer", " ", "=", " ", "32"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7243615364895706`*^9, 3.7243615371849184`*^9}, {
  3.7243622286580305`*^9, 3.7243622468497925`*^9}, {3.724362498901749*^9, 
  3.724362500851191*^9}, {3.724428314417169*^9, 3.7244283947934327`*^9}, {
  3.724432195689968*^9, 3.7244321966417723`*^9}, {3.724432325322688*^9, 
  3.7244323440095415`*^9}, {3.724432503793912*^9, 3.724432507515815*^9}, {
  3.7253588810858784`*^9, 
  3.725358891301592*^9}},ExpressionUUID->"faed1ba6-4bb0-4f0b-a673-\
49484b8d58da"],

Cell[BoxData["32"], "Output",
 CellChangeTimes->{3.724453862195201*^9, 3.724454483903162*^9, 
  3.7244550980461407`*^9, 3.7244588955251036`*^9, 
  3.724459074538612*^9},ExpressionUUID->"42f6fe98-66ac-4aac-8032-\
c69d0f3b73ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Get", " ", "the", " ", "EdgeDetect", " ", "data"}], ",", " ", 
    RowBox[{
    "edge", " ", "detect", " ", "looks", " ", "for", " ", "lines", " ", "in", 
     " ", "images"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"edgeTrainingData", " ", "=", " ", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"EdgeDetect", "/@", 
        RowBox[{"Keys", "[", "trainingData", "]"}]}], "->", " ", 
       RowBox[{"Values", "[", "trainingData", "]"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"edgeTestData", " ", "=", " ", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"EdgeDetect", "/@", 
        RowBox[{"Keys", "[", "testData", "]"}]}], "->", " ", 
       RowBox[{"Values", "[", "testData", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"edgeTrainingData", ",", " ", "10"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7243615364895706`*^9, 3.7243615371849184`*^9}, {
   3.7243622286580305`*^9, 3.7243622468497925`*^9}, {3.724362498901749*^9, 
   3.724362500851191*^9}, {3.724428314417169*^9, 3.7244283947934327`*^9}, {
   3.724432195689968*^9, 3.7244321966417723`*^9}, {3.724432325322688*^9, 
   3.7244323440095415`*^9}, {3.724432503793912*^9, 3.724432507515815*^9}, {
   3.7244343686194143`*^9, 3.724434369660183*^9}, {3.724434417739416*^9, 
   3.7244344208923016`*^9}, {3.724452878516041*^9, 3.7244528826510324`*^9}, 
   3.724453819701874*^9, {3.7244544428587837`*^9, 3.7244544465305324`*^9}, {
   3.7244551104730377`*^9, 3.7244551118332324`*^9}, {3.7253588969975243`*^9, 
   3.7253589229538217`*^9}},ExpressionUUID->"ead654b0-7c20-4bf1-9c10-\
c1dde242ea3d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJx9U8sOgkAMnHry6CfoX3j16BXjB2BE4gUTMDH+vbxKp12XTYB0p4+Z2eVw
exWPDYBu27+K8nNq2/J72fXBtemedVPdz827qqv2eBvS9vMDiMj4gS2xNezL
sjkhmoVYBw9ZaEWh/5giRAPiiYBKbbhLda0JCGQSmpKD1/GZ9MRcA5am0JgT
MqwzO6uOKPEJ8c7r6DlweEaB5IU4y6eBoiRAAsxKPSjDtZOxdTj5xZpT3LLW
8MWoqMXhQbJTAJKS1os6AL5ypNPfe3+hU7mhiW6J+BA6MP4i1OwvwlRyKJ9I
bv0AG/UNmA==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"horse\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyFUjEOwjAM9DEx8gT4BSsjaxEPKKJULEVqkRC/JyWNYzsORKmr9nxn+5Ld
5dHcVkQ0rUNo2tdhHNv3aRM+zsN074fuehyeXd+N+8uctl0efHd9/cMJv2Ff
si4WVjUhlfJLzsyF6uGRhPh2EsASbgeJzcFRR94FTlwd3EUxmVDXCaCM523p
aQbEQQpYcoQC+6ZLFnCKgMrOfoJp0JUkTqZ7qSWUYXEe0VS3opC9KkvjJKUX
+UaocwEgbCzGklzXQKcBc2hL4diVxZOyGljZyv8rOF/lKh7WB1xRDWk=
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"horse\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUgwAjAx7ACAR45SFq0AVRhBhR7ABLoQihW8CIsJQRCjAtRdGIqoIRpg/Z
DhSHYviJEeZTRuzSjCh+RTEW6jywMNRGNMfAZRgZMaQRyuDmYg1wJHtxxwfU
k7hkoT7AqZtCeQYi5fEoQIQ+llhnQAQQNByxRSNeQFCeYgMIyBPIbHSXBwBh
sw0u
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"deer\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxtk0uOwjAQRLtYseQIM7dgy5ItiAOACBGbIAUkxO0n4093lY2TkLi/z2X8
e3kcbisze66Xn8P5vZvn8+e4WSan6Xkfp+G6n17DOMzby3/YT3nSgGG5Ld1I
cxnJk+3lSgFA689BxYxiS4ameJioBCpJTiUIBJVXj5x4eVHAcYw+AERd6ZAz
mFjSMlgrkxEL92aS4MphlQ6QdIWU+Fq9iu4aivqoy6sE/KX7CUVrmjcbEw0q
S/CGyqCesh594OsikUM/9Fgxk64ApUe1DEl6+6Joc11ZcID6mwNg4S8dvgT4
wVB4YTAWoG8h29CDBHG44aM7Td2Cye9/5D9sxA3Q
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"frog\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJy9U7sOwjAMzDEx8gnwF6yMrEV8QKuGiiVIKRLi7yltEp9DWiQGIvWR3vl8
dtxdc6suK2NMvx5uVf04eF8/T5thc3b9tXO2Pbq77azfN2/aNlx/XxjWF3CG
IIElnNACzGjIwCx80ug9wMo5KBGgQk3SR+IqTwmdrEDXM6mFDEGDrMQ90zIP
0kORGd0TCmNYX3vjwqGeEH/yPRQiSMwFolBeaD9jqHQpP+UYRrFUN50Cd4cb
rpsHrj99BkCDkU+QGq3ieC3DLDA326xTZiz9OD+vF6VnDX0=
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"truck\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzNkksOgkAMhvu7cukR9BZuXbrFeAAII3EzJoOJ8fbyKNgHw9LYhIH2a0s7
7aF6FLcNEbXb7ijK1yml8n3Zdco1tvcmhvocn6EJ6Vj1bnt+CLQuP+WAc9fc
pzPcOWTisczH//cvXwl7ECNYMCCaIzGbMSWWQMVD2jwXGGMLYEVlnNqfXUja
IQIcNjcHNQiTzWoee26+/NCQCeFigG9J8FPme+MRyDWxHUOcOr80ZpYWehAr
MqTDwjr/m3wALJ0NNw==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"horse\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJylkjsOwjAMhv0zMXIEuAUrI2sRB2hFqFiC1CIhbk9fTh3HDUit1Mr299eP
OIfqWdw3RNRuu09Rvk9NU34uu865+vZRe3c7+5erXXOsetl+evsHxAYmByEk
OBD4YI8+zaHBjP+E4JRyDhLnsrhsRvOo/f+4FuhRs9wQKJ4IxOnCEsycj1CP
LEobC4ryh/mAhIcMSVohgDIUD9jmJG5EUohitMSR5wTuDTYnxY0bES/B4Lys
ZR4XzONffF36df19AVibDSw=
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"frog\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJylkzEOwjAMRf2ZGDkC3IKVkbWIA7SiVCxFapEQtyelqe2fpBOpkip+sePv
JIfmWd03IjJuw1DV79Mw1J/LLkyu/fjo+vZ27l9t1w7HZlq2j/2vhvCtkNBW
uYPI7TJDiYscNaZ2MLYYjKNVbfMMiATZNuxMOboVjHJvpBwusKlDbKrh17Hi
nQoXNnIB0gAaEwko6XBeSRHyupuIuUacE+dAFkhBqXE9bzt4FPiyJ98PuPR0
5o+A03CurkpLKLc7czgOZFwoA9an17DM4X/0mDgpezfEnaBifSf+BbXvDYQ=

       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"horse\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJylU8sOgjAQ3PHk0U/Qv/Dq0SvGD4CIxEtNionx76XS1z7gYgNk29nOTmfL
oXs29w0Rjdvp07Tvk/ft57KbJlc3PgbX387u1Q+9P3YhbR/fNGBEZONmAnIG
rIywNC//IolVEKQGlHmmXsKRA4ZrQZzA0LsykwVsy7DmKNiqxMUhlXoQxzWc
H80TPAIZeLQh2bWIQ7bI1lFUy2ZVQiSOSF/3s4aN9mr6aK9BT6VwplBc4FeY
NzolYDYCgHFqMDNJJMxbSn3So77H9u9YNv+JfwFKiQ1O
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"dog\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzdUjEOwjAMjJkYeQL8gpWRtYgHtCJULEFKkRC/p6HG8dnhA0RK48Rn39X2
brh311UIYVrPn65/HnLuX6fNfDmn6TameDmmRxxj3g8FtuX9H4uIDzasmxEk
SB9eQhnzA4BcDYaSQVOQLM6rAGS01gt5DRqKUiiA5IXJKiQwMD/qUIVqxRfT
MBp99gRhujTOibwaKKo1BDTDQ4OpNiB8hwTK/WkL8d/xA7il7FQbqYvCyXVm
J9BezcjKqPga6Lmmim3PEVD5WbWdfQM40w1n
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"horse\"\>"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.724459072559851*^9, 
  3.724459408548163*^9},ExpressionUUID->"ea3b02a4-08b7-42f2-a857-\
091ca6fc9469"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Get", " ", "the", " ", "MaxDetect", " ", "data"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"maxTrainingData", " ", "=", " ", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"MaxDetect", "/@", 
        RowBox[{"Keys", "[", "trainingData", "]"}]}], "->", " ", 
       RowBox[{"Values", "[", "trainingData", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"maxTestData", " ", "=", " ", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"MaxDetect", "/@", 
        RowBox[{"Keys", "[", "testData", "]"}]}], "->", " ", 
       RowBox[{"Values", "[", "testData", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"maxTrainingData", ",", " ", "10"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7244327040575542`*^9, 3.7244327040590577`*^9}, {
   3.7244379461278963`*^9, 3.724437973022622*^9}, 3.724438025615303*^9, {
   3.7244381114523096`*^9, 3.7244381910463552`*^9}, {3.7244535001148443`*^9, 
   3.7244535217629895`*^9}, {3.7244542352991505`*^9, 3.72445423814585*^9}, {
   3.725358926356838*^9, 
   3.725358943477831*^9}},ExpressionUUID->"906b8018-cdc6-4286-80de-\
c58ff72c8512"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUUwwYSdbAiFULWJRkwwjZRZYUeQZSDBiRbUCyCBgyJFjLiNuRRJhCK//h
dhKWaEcXQgkSdJMYcXIIK8QTVngBTk0kxRSaVrhOPKYzYEsfuOxlxFSHCQBF
IgzL
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"horse\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUkwkYyddKKcBpNboEEp+RkXgHk+01QhoZ0WhqAUYCpmO1D68jsEjSOcLx
+AJPNGMqJehsRvTwozPAZi0jA5K70NhEaEeVIeAvADKxDMA=
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"ship\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUEwKMEIBbnpB+BkL6KTWftvIjBzAyDLnQINa5FHsLPYFSYCD1tGIxCVMF
Iy6dUC8BAFS1DMQ=
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"ship\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUMzAwwgkIlxEmihCDy2GIQMSwiZMMsNjICHUNfvMZGdBdgdXxxFmJ1xbi
hWGmM6KJMMKFUFxLqrXoxhIDiItOIg1lxOBQYBiyGkYoYkQSI0ovpotI0E+E
w4iQQkmEVLEam43othCb0pEVMsITJgCEdgzf
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"automobile\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUYwJGbCJogoxwgF8nHgDWDNOBTScjfuMwrUeTx8NDN50Rm3q81uO1GqdL
CDuXEUoyIgvg0EZScGNqZcTGpcBMZMNw8QgoRuITCipyHIqZCAgbQ0gBhQFG
lPFE2gHNDxAt2DVimgQArOsM6Q==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"automobile\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUMzAyUAlQzSDqmoyhmRFDiJEySxhxsLELkGwkWcoY8cmiO5gRlwRlAHuw
kmUuVk2MaHHJiC5LpDmkKSPJCEZMIdwGEuF+Ih1FrF6gOgA75gzE
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"bird\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUIwAjGKEBRjiBCzBiYRHURBAw4mDjE8V0KyN23RgKiXIrqmGMMDaGXuwG
M+JWhN19OG0m0hwk5xEfFYxINCOmMFYbSYxo4pQjHMKIJoJHB6ozGXHIoFqB
Q4YYW3GkQFQ2ruSH3yDc4kTEJ0YWwGEpWAgAecsM4A==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"deer\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIU4wKMeOToChjhBPHKSVfFiIPEUE7lcGFEo4nUgks5DkfjM54RhUWie7Ao
w66T5GAjRQMjairB5wISwxmVhTdEiZAkZDkRSR2vLCNODm6dAEMcDMk=
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"cat\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUowNGRmQOEokV4JEiGlBiBql6SVSPrpwa3iUZUM9SRlQmPXyDzw4S7Cek
lBErE5c+RpLtJ8JBjHjkIEKM2K1kxMsl2R1EqGVEin8ALtAMvg==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"dog\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUkwQYkShGRlRBLByCBqFyseol0kCcCtGFiTaPMoDFGlRPUuQOnJoZscoT
sov2YcJIXUtIMIsRg0G5veQbRQVHYBiBLMCIJydhBwBA8gy+
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"cat\"\>"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7244543005297937`*^9, 3.724454456216276*^9, 
  3.72445504698936*^9, 3.724455658641981*^9, 
  3.7244596402829323`*^9},ExpressionUUID->"ae31620b-641d-49c6-a1be-\
604bcc47c7ae"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.724458849174423*^9, 
  3.7244588491804376`*^9}},ExpressionUUID->"902d64a7-e8de-4b3c-856a-\
76507fd94765"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"Find", " ", "all", " ", "the", " ", "different", " ", "labels"}], 
  " ", "*)"}]], "Input",
 CellChangeTimes->{{3.725358947107811*^9, 
  3.7253589536768107`*^9}},ExpressionUUID->"baa5e611-911e-44fa-8ae0-\
9e59cb2746e9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classes", "=", 
  RowBox[{"Union", "@", 
   RowBox[{"Values", "[", "trainingData", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7244588167685566`*^9, 
  3.7244588167785845`*^9}},ExpressionUUID->"896f095b-ef26-4758-b1a2-\
391f29446aab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"airplane\"\>", ",", "\<\"automobile\"\>", ",", "\<\"bird\"\>", 
   ",", "\<\"cat\"\>", ",", "\<\"deer\"\>", ",", "\<\"dog\"\>", 
   ",", "\<\"frog\"\>", ",", "\<\"horse\"\>", ",", "\<\"ship\"\>", 
   ",", "\<\"truck\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7244596509715934`*^9},ExpressionUUID->"e200fca1-7bca-4cd7-af39-\
f4651af87d86"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7244321980252895`*^9, 3.724432199972698*^9}, {
  3.7244535081892605`*^9, 
  3.724453529499029*^9}},ExpressionUUID->"45eae473-8ec7-42b4-b919-\
e02a1ef629d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"A", " ", "CNN", " ", "Module"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"module", " ", "=", " ", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"100", ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "3"}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", "1"}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7244321980252895`*^9, 3.724432199972698*^9}, 
   3.7244535081892605`*^9, {3.725358959276742*^9, 
   3.7253589684411287`*^9}},ExpressionUUID->"e6faa67a-6ad1-40cc-af18-\
5efcde58dc53"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{100, NeuralNetworks`SizeT, 3, 3}, 
                 NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               NeuralNetworks`SizeT, "$GroupNumber" -> 1, "$InputSize" -> 
               NeuralNetworks`ListT[2, NeuralNetworks`SizeT], "$OutputSize" -> 
               NeuralNetworks`ListT[2, NeuralNetworks`SizeT]], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[3, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{
                 100, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                 NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{
                 100, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                 NeuralNetworks`RealT]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{
                 100, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{
                 100, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                 NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {
                100, NeuralNetworks`SizeT, NeuralNetworks`SizeT}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{
                 100, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{
                 100, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                 NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
               "PaddingSize" -> {1, 1}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 100, 
               "$InputSize" -> {NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
               "$OutputSize" -> NeuralNetworks`ListT[2, NeuralNetworks`SizeT],
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{
                 100, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{
                 100, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
                 NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[3, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association[
          "Output" -> 
           NeuralNetworks`TensorT[{
             100, NeuralNetworks`SizeT, NeuralNetworks`SizeT}, 
             NeuralNetworks`RealT]]], NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"rank\"", "\":\"", 
                    "\" \"", "3", "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", 
                    "\"\[DottedSquare]\"", "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{460., {80., 88.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.724432337070079*^9, 3.724432816064163*^9, 
  3.7244332771595526`*^9, 3.724452589235222*^9, 3.7244526700528536`*^9, 
  3.7244556586870966`*^9, 3.7244569763445296`*^9, 3.724458425320654*^9, 
  3.724459652965289*^9},ExpressionUUID->"5eb91b97-2716-4dfc-969f-\
7210fb37fef0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "CNN", " ", "that", " ", "works", " ", "on", " ", "Grayscale", 
    " ", "images"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"grayNet", "=", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
       "module", ",", " ", "module", ",", " ", "module", ",", " ", "module", 
        ",", " ", 
        RowBox[{"FlattenLayer", "[", "]"}], ",", " ", "500", ",", " ", "Ramp",
         ",", "10", ",", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"NetEncoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Image\>\"", ",", 
          RowBox[{"{", 
           RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], "}"}], ",", 
          "\"\<Grayscale\>\""}], "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<Output\>\"", "\[Rule]", 
       RowBox[{"NetDecoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Class\>\"", ",", "classes"}], "}"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.7243616613019743`*^9, 3.7243616741885233`*^9}, {
   3.7243617406010866`*^9, 3.724361774012519*^9}, {3.7243618198829575`*^9, 
   3.7243619142837296`*^9}, {3.72436204100273*^9, 3.724362042867459*^9}, {
   3.724362457707277*^9, 3.724362466645977*^9}, 3.7243626907624855`*^9, {
   3.724427171122463*^9, 3.724427187796376*^9}, {3.7244322335162926`*^9, 
   3.7244322383712463`*^9}, {3.7244322841778607`*^9, 3.724432285801179*^9}, {
   3.724458561886958*^9, 3.724458564382593*^9}, {3.7244586046235743`*^9, 
   3.724458695302644*^9}, {3.724458775869828*^9, 3.7244587840555897`*^9}, {
   3.724458939406763*^9, 3.72445895422215*^9}, {3.725358973204751*^9, 
   3.7253589927344117`*^9}},ExpressionUUID->"723801a8-a0d2-4269-aa05-\
2488d89765ea"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {30, 30}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1, 32, 32}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 30, 30}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {30, 30}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 30, 30}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {28, 28}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 28, 28}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]
                    ], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {26, 26}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 26, 26}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {26, 26}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 26, 26}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {24, 24}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 24, 24}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {24, 24}, "$OutputSize" -> {24, 24}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 24, 24}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {57600}, 
               "$InputSize" -> {100, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{57600}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{500, 57600}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {500}, "$OutputSize" -> 500, "$InputSize" -> 
               57600, "$InputDimensions" -> {57600}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{57600}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 500}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               500, "$InputDimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "Grayscale", 
              "ColorChannels" -> 1, "MeanImage" -> None, "VarianceImage" -> 
              None], 
             NeuralNetworks`TensorT[{1, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "airplane", "automobile", "bird", "cat", "deer", "dog", "frog",
                 "horse", "ship", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"30\"", 
                    "\"30\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"26\"", 
                    "\"26\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"24\"", 
                    "\"24\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"57600\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{405., {155., 163.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7244596576813197`*^9},ExpressionUUID->"af7a607a-8afc-4c47-99eb-\
6586104d318f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "CNN", " ", "that", " ", "works", " ", "on", " ", "the", " ", 
    "original", " ", "images"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"normalNet", "=", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "module", ",", " ", "module", ",", " ", "module", ",", " ", "module", 
        ",", " ", 
        RowBox[{"FlattenLayer", "[", "]"}], ",", " ", "500", ",", " ", "Ramp",
         ",", "10", ",", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"NetEncoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Image\>\"", ",", 
          RowBox[{"{", 
           RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], "}"}]}], 
         "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<Output\>\"", "\[Rule]", 
       RowBox[{"NetDecoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Class\>\"", ",", "classes"}], "}"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.724361922006895*^9, 3.7243619326903825`*^9}, {
  3.724362645481925*^9, 3.7243626898822336`*^9}, {3.724362770503211*^9, 
  3.7243627716856403`*^9}, {3.7244272012348843`*^9, 3.724427209123006*^9}, {
  3.72442853048699*^9, 3.724428556571994*^9}, {3.7244322591354637`*^9, 
  3.7244322801942616`*^9}, {3.724458519013982*^9, 3.724458539164553*^9}, {
  3.7244587426705694`*^9, 3.724458756774062*^9}, {3.725358995980977*^9, 
  3.72535902869339*^9}},ExpressionUUID->"7a6cb5c6-0f66-4add-9204-\
2e4f15caa4ff"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {30, 30}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 30, 30}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {30, 30}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 30, 30}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {28, 28}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 28, 28}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]
                    ], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {26, 26}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 26, 26}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {26, 26}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 26, 26}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {24, 24}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 24, 24}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {24, 24}, "$OutputSize" -> {24, 24}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 24, 24}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {57600}, 
               "$InputSize" -> {100, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{57600}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{500, 57600}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {500}, "$OutputSize" -> 500, "$InputSize" -> 
               57600, "$InputDimensions" -> {57600}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{57600}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 500}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               500, "$InputDimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "airplane", "automobile", "bird", "cat", "deer", "dog", "frog",
                 "horse", "ship", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"30\"", 
                    "\"30\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"26\"", 
                    "\"26\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"24\"", 
                    "\"24\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"57600\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{405., {155., 163.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.724367993561202*^9, 3.7244225947365294`*^9, 
  3.7244273421685066`*^9, 3.7244323372054424`*^9, 3.7244328162065687`*^9, 
  3.7244332773015685`*^9, 3.724452589353024*^9, 3.7244535954254603`*^9, 
  3.7244556587592916`*^9, 3.7244585251904025`*^9, 3.7244587580685062`*^9, 
  3.7244596599123306`*^9},ExpressionUUID->"63624b61-7eb4-4688-98ed-\
755d682e3e93"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "CNN", " ", "that", " ", "works", " ", "on", " ", "edge", " ", 
    "images"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"edgeNet", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "module", ",", " ", "module", ",", " ", "module", ",", " ", "module", 
       ",", " ", 
       RowBox[{"FlattenLayer", "[", "]"}], ",", " ", "500", ",", " ", "Ramp", 
       ",", "10", ",", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", "classes"}], "}"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"NetEncoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Image\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], "}"}]}], 
        "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.724362952737661*^9, 3.7243629618219194`*^9}, {
  3.7243630406678762`*^9, 3.7243630550706882`*^9}, {3.724363124004842*^9, 
  3.724363152236594*^9}, {3.7243633592031684`*^9, 3.724363362057646*^9}, {
  3.7243634142466526`*^9, 3.724363447459964*^9}, {3.7243635082903023`*^9, 
  3.724363547182534*^9}, {3.7243637684875593`*^9, 3.7243638407375774`*^9}, {
  3.7243638981219378`*^9, 3.7243639100867324`*^9}, {3.7243640345382786`*^9, 
  3.7243640353081803`*^9}, {3.724428471650316*^9, 3.724428472973287*^9}, {
  3.7244285198461523`*^9, 3.724428525259483*^9}, {3.7244285632120476`*^9, 
  3.724428563388362*^9}, {3.724432267428547*^9, 3.724432271882364*^9}, {
  3.7253590321169753`*^9, 
  3.725359043262472*^9}},ExpressionUUID->"6f1c823b-7933-42af-97c9-\
7fe4df62d853"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {30, 30}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 30, 30}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {30, 30}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 30, 30}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {28, 28}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 28, 28}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]
                    ], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {26, 26}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 26, 26}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {26, 26}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 26, 26}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {24, 24}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 24, 24}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {24, 24}, "$OutputSize" -> {24, 24}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 24, 24}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {57600}, 
               "$InputSize" -> {100, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{57600}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{500, 57600}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {500}, "$OutputSize" -> 500, "$InputSize" -> 
               57600, "$InputDimensions" -> {57600}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{57600}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 500}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               500, "$InputDimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "airplane", "automobile", "bird", "cat", "deer", "dog", "frog",
                 "horse", "ship", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"30\"", 
                    "\"30\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"26\"", 
                    "\"26\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"24\"", 
                    "\"24\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"57600\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{405., {155., 163.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7244525893856173`*^9, 3.724453595458048*^9, 
  3.7244556587853613`*^9, 
  3.7244596623319893`*^9},ExpressionUUID->"69b2d6de-2a79-4f8a-a0c8-\
b9536049ce2c"]
}, Open  ]],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {30, 30}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 30, 30}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {30, 30}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 30, 30}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {28, 28}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 28, 28}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]
                    ], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {26, 26}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 26, 26}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {26, 26}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 26, 26}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {24, 24}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 24, 24}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {24, 24}, "$OutputSize" -> {24, 24}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 24, 24}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {57600}, 
               "$InputSize" -> {100, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{57600}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{500, 57600}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {500}, "$OutputSize" -> 500, "$InputSize" -> 
               57600, "$InputDimensions" -> {57600}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{57600}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 500}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               500, "$InputDimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "airplane", "automobile", "bird", "cat", "deer", "dog", "frog",
                 "horse", "ship", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"30\"", 
                    "\"30\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"26\"", 
                    "\"26\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"24\"", 
                    "\"24\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"57600\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{405., {155., 163.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Input",
 CellChangeTimes->{{3.7244382394620075`*^9, 3.7244382469181695`*^9}, {
  3.7244386719596095`*^9, 3.724438674784346*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"1880cf91-7cfc-45ee-b4e5-bc49fe8803c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "CNN", " ", "that", " ", "uses", " ", "MaxDetect"}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"maxNet", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "module", ",", " ", "module", ",", " ", "module", ",", " ", "module", 
       ",", " ", 
       RowBox[{"FlattenLayer", "[", "]"}], ",", " ", "500", ",", " ", "Ramp", 
       ",", "10", ",", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", "classes"}], "}"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"NetEncoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Image\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], "}"}]}], 
        "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7244382394620075`*^9, 3.7244382469181695`*^9}, {
  3.7244386719596095`*^9, 3.724438674784346*^9}, {3.7253590464695787`*^9, 
  3.72535906334129*^9}},ExpressionUUID->"88f78a2b-cdc2-490f-a5dd-\
cb0a1eab0bcd"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {30, 30}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 30, 30}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {30, 30}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 30, 30}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {28, 28}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 28, 28}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]
                    ], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {26, 26}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 26, 26}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {26, 26}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 26, 26}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{100, 100, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {24, 24}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MovingVariance" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 24, 24}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {24, 24}, "$OutputSize" -> {24, 24}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 24, 24}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {57600}, 
               "$InputSize" -> {100, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{57600}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{500, 57600}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {500}, "$OutputSize" -> 500, "$InputSize" -> 
               57600, "$InputDimensions" -> {57600}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{57600}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 500}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               500, "$InputDimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "airplane", "automobile", "bird", "cat", "deer", "dog", "frog",
                 "horse", "ship", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"30\"", 
                    "\"30\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"26\"", 
                    "\"26\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"24\"", 
                    "\"24\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"57600\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{405., {155., 163.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.72443867656784*^9, 3.7244535955071783`*^9, 
  3.724455658829451*^9, 
  3.72445966933253*^9},ExpressionUUID->"74ba43e0-3f66-4d7b-8253-24d0c0b1ffe9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"Can", "'"}], "t", " ", "use", " ", "a", " ", "validation", " ", 
   "set", " ", "because", " ", "the", " ", "images", " ", "would", " ", "be", 
   " ", "in", " ", "color"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7244598818073535`*^9, 
  3.724459896181328*^9}},ExpressionUUID->"f7484fb8-7f81-42a5-bcb9-\
688c92aac922"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"grayTrained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"grayNet", ",", " ", "trainingData", ",", " ", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.724361945291913*^9, 3.724361979339183*^9}, {
  3.7243620361343536`*^9, 3.7243620368347535`*^9}, {3.724362383676652*^9, 
  3.724362401284996*^9}, {3.7244329523229*^9, 3.7244329534173126`*^9}, {
  3.7244597138375134`*^9, 
  3.7244597144050217`*^9}},ExpressionUUID->"1dec003c-6c70-4d8f-b029-\
7512941bedf4"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 1, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {30, 30}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1, 32, 32}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 30, 30}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {30, 30}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 30, 30}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {28, 28}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 28, 28}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {26, 26}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 26, 26}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {26, 26}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 26, 26}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {24, 24}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 24, 24}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {24, 24}, "$OutputSize" -> {24, 24}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 24, 24}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {57600}, 
               "$InputSize" -> {100, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{57600}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{500, 57600}],
                "Biases" -> NeuralNetworks`Private`DummyRawArray[{500}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {500}, "$OutputSize" -> 500, "$InputSize" -> 
               57600, "$InputDimensions" -> {57600}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{57600}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 500}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               500, "$InputDimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "Grayscale", 
              "ColorChannels" -> 1, "MeanImage" -> None, "VarianceImage" -> 
              None], 
             NeuralNetworks`TensorT[{1, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "airplane", "automobile", "bird", "cat", "deer", "dog", "frog",
                 "horse", "ship", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"30\"", 
                    "\"30\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"26\"", 
                    "\"26\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"24\"", 
                    "\"24\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"57600\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{405., {143., 151.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7243620092791066`*^9, 3.724362074448857*^9, {3.724362418246975*^9, 
   3.724362441851303*^9}, 3.724362557281418*^9, 3.7243680263681836`*^9, 
   3.72442262780475*^9, 3.724427411431952*^9, 3.724432346904242*^9, 
   3.724432907127816*^9, 3.724433499085223*^9, 3.724452589448885*^9, 
   3.7244535955623255`*^9, 3.724455658866577*^9, 3.7244597199753304`*^9, 
   3.7244599378214135`*^9},ExpressionUUID->"d1cce0db-6b12-419c-800f-\
a30cd2e45f76"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Train", " ", "the", " ", "normal", " ", "CNN"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"normalTrained", " ", "=", " ", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"normalNet", ",", " ", "trainingData", ",", " ", 
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", " ", 
     RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7243619914021735`*^9, 3.724362032643361*^9}, {
  3.7243624083657303`*^9, 3.7243624143553333`*^9}, {3.724432947386215*^9, 
  3.724432949905921*^9}, {3.7244343815553293`*^9, 3.7244343859871197`*^9}, {
  3.7244345178596363`*^9, 3.7244345190692706`*^9}, {3.725359071660894*^9, 
  3.7253590799679694`*^9}},ExpressionUUID->"45d4292b-1942-4f3d-b0e2-\
76abd0634cce"],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7253590693453574`*^9, 
  3.725359070079137*^9}},ExpressionUUID->"261250a3-ed4c-4cb5-b0c2-\
4b709ff30725"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 3, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {30, 30}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 30, 30}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {30, 30}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 30, 30}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {28, 28}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 28, 28}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {26, 26}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 26, 26}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {26, 26}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 26, 26}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {24, 24}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 24, 24}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {24, 24}, "$OutputSize" -> {24, 24}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 24, 24}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {57600}, 
               "$InputSize" -> {100, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{57600}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{500, 57600}],
                "Biases" -> NeuralNetworks`Private`DummyRawArray[{500}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {500}, "$OutputSize" -> 500, "$InputSize" -> 
               57600, "$InputDimensions" -> {57600}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{57600}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 500}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               500, "$InputDimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "airplane", "automobile", "bird", "cat", "deer", "dog", "frog",
                 "horse", "ship", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"30\"", 
                    "\"30\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"26\"", 
                    "\"26\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"24\"", 
                    "\"24\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"57600\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{405., {143., 151.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.724368044155978*^9, 3.724422646730539*^9, 
  3.7244274956574144`*^9, 3.7244329710423703`*^9, 3.7244337253667955`*^9, 
  3.724452589501023*^9, 3.724453595606944*^9, 3.7244556589056826`*^9, 
  3.724460177195088*^9},ExpressionUUID->"ac3d4681-3983-4548-bd17-\
358f7cd8cd2e"]
}, Open  ]],

Cell[BoxData[
 StyleBox["\[IndentingNewLine]",
  LineBreakWithin->False]], "Input",
 CellChangeTimes->{{3.724363081713808*^9, 3.7243630915703506`*^9}, {
  3.7243635497696176`*^9, 3.724363604860133*^9}, {3.724429004621089*^9, 
  3.7244290073302865`*^9}},ExpressionUUID->"43425328-81b3-4341-950a-\
ff26414da6ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Used", " ", "to", " ", "test", " ", "accuracy"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"gcm", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"ClassifierMeasurements", "[", 
       RowBox[{"grayTrained", ",", " ", "testData"}], "]"}], 
      "\[IndentingNewLine]", "ncm"}], " ", "=", " ", 
     RowBox[{"ClassifierMeasurements", "[", 
      RowBox[{"normalTrained", ",", " ", "testData"}], "]"}]}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.724362270754919*^9, 3.7243623207317615`*^9}, 
   3.7244597692363806`*^9, {3.72535908570819*^9, 
   3.725359092980906*^9}},ExpressionUUID->"e641201d-496d-45ce-bb28-\
b1654501e8b1"],

Cell[BoxData[
 TemplateBox[{
  "ClassifierMeasurements","wrgfunc",
   "\"The first argument should be a \
\\!\\(\\*RowBox[{\\\"ClassifierFunction\\\"}]\\) instead of \\!\\(\\*RowBox[{\
\\\"$Failed\\\"}]\\).\"",2,41,14,27680990397988416295,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.724452589996842*^9, 3.7244535962217817`*^9, 
  3.724455659405984*^9},ExpressionUUID->"8962e388-342e-4ad0-bdfd-\
f6d0dc5f7ac1"],

Cell[BoxData[
 TemplateBox[{
  "ClassifierMeasurements","wrgfunc",
   "\"The first argument should be a \
\\!\\(\\*RowBox[{\\\"ClassifierFunction\\\"}]\\) instead of \\!\\(\\*RowBox[{\
\\\"$Failed\\\"}]\\).\"",2,42,15,27680990397988416295,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.724452589996842*^9, 3.7244535962217817`*^9, 
  3.72445565974288*^9},ExpressionUUID->"7c21ff9e-8086-4dcf-842d-6984a4afa984"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"gcm", "[", "\"\<Accuracy\>\"", "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7243625961044936`*^9, 3.7243626129066916`*^9}, 
   3.7244599713386774`*^9},ExpressionUUID->"a48a8d8c-f4f6-4e72-a691-\
5973f7dd16b5"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"ncm", "[", "\"\<Accuracy\>\"", "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7243626168423524`*^9, 3.7243626238055925`*^9}, 
   3.724459974199788*^9},ExpressionUUID->"1f0f6b29-d7bd-4338-afdf-\
baec2ae71587"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.7243627883451357`*^9, 3.7243627883526554`*^9}, 
   3.724459792972741*^9},ExpressionUUID->"bde87536-0822-4826-a0d9-\
e28b6220bfcb"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7244597919252625`*^9, 
  3.7244597919262652`*^9}},ExpressionUUID->"05274db0-405d-42ef-b570-\
c8cba872df04"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "This", " ", "is", " ", "what", " ", "edge", " ", "detect", " ", "does", 
    " ", "to", " ", "an", " ", "image"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"edgeImage", " ", "=", " ", 
   RowBox[{"EdgeDetect", "[", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
0LwXXtq6Zv2RPQe6L3ejURyJUTjCTrZFT4Fzd3DIjwNHicY5L3aTcsIXiw/5
e1taT+7ceWLb9ivHjq1dsGDN/PmvvfTS0w888MyDD8JVePL+B2c8+cyj//zA
y9NeAp0/eR7qOo3XsBjhNdFMgfMVghOL48COV1/ByY/iR3YfAnAWzVrw25/9
6hc/+snDv/rNL3/041/+/d8/+otf3Pu97/3kr/7q97/85cIZMzYuX/nOnv2D
Hf1IBGNwjqOVKXA+FRySxAmSxigAh0Mpjx0wbCyrM6RERvDOMxcAlnfeXP/O
hrXntm7cvfy16Q/e98L99z3wDz/49ff/9rn7f3P/P/7jY/fd98A99z72mwfB
A+zfvqflREtXew+NsWDwbi8tU+B8BeBEYxi4tXgE48EnR/Gu1qvrlq5ZPn/x
s488/uP/8rf/+Nd/DbD8+gd/98jPfnrv3/xnuIKwP/vxR1e/8sqmFSvOHj4W
GQrQCC1z6t2CzhQ4TXBI8k5wgBqCkKBIEDEiOjBy4cCB01s3bp7z4vY5L+ye
/+KSJx544Zf/8OzPfvjwD/7qN3/7H3/3o+/9/qc/eugnP37onnv+8MBDqxYu
uXy29cCuA1Br9XYN05Q0Bc5XH3EgxwFwJFZJBBPxkejODdtWL3p929p10x55
5Gd/8zc//su/+M3ff++Rn/zwgR9+78l7f3rvX//lU/fd++pzzyx+8cW31rxx
6dS50IBPFbTP26rztYPwdYBDNsFBqUlwhMBIBJKU3pbzh95Ys3H29Ncfv3/f
vGmXNi7tffvN4aPbo2cOhs8cOPnm8nkP//qF3/zin3/wXx++556Xn31+44o1
radbL1+4Ag6tvzd45XL/FDhffeMAglIEykDdFfPH2AR9cv+xN15bsWbBogXP
P//j//Sf/r//7d/841/8+9/+3V8/8uPvP/qTv3/2Vz+DK7jgmScXPv/sinnz
gJ3Th4/fPjp6CpzPDE5jyE2cCPYO7li5cvm0p9947rHjS+cI5w++SwzeShK3
tMQtE7+VYm/ZPNd36fzOzdMf+PW0B+9/fc6c9ctWtp1tw+PkhXPtPV2+48cv
TIHzJYEDyDR1BzgkxcdjOMfKiSgeCyY4nLt0um3Na8tnPfHEpsWvvvjwb5/6
5c82vzqn4/Aeovsy2nkhfulMx6GdVw7sOvXWmzuXLVw584UtSxZG+/oAHJQQ
ce8ksCTOeMIaA32bA0vI5thgabIrsDEG+OvH4asEh6DIpk9rIgMnAfKcwQsX
zu98a/Hj9x9YPJs4f+QmH7mlJsapEXPoQjrSdU2I5BMD7+vMraxxTWGGTh9d
/8rspS9OP//Okd7L7bFgdO/ug/v3n2AYzbus3wlw4jES1MRnkqBP0OcF6osS
HGo0gsMRwo/1slSMBc98YMfulXNmPHHPD1566Bd9pw4UOaSukhUuUWQitzLq
rZx6yyDL+BDVdvTEitm75z55dusamuIHQ4SsWZqiiyQe948oAlw1NkZIIVIN
kmaYMuKkTOAMS6A8jhIYjWPMR3X70Ppvsu4oHpPX/S4Fg+V4ESGgOhEwSo5G
KSpBawlcHOh5Z9HM4/OfGt6yqOw7e8tCbyWxLB9zuFhFJ8sqXhKxIotVGKLG
kHWOrAvEkbVL31r88gjUbqcObX1z3cULbUNDYagGm3N8vvn6VIK+ReDEogQc
QLOOgiPv6/UdenvfytkvvPqH376zcRnVfzGF+ozoAMiM9OmBzjIdgJrwJh+c
wPvZC7vb1s7cv3jG8UOHcEaiKEbiWCTol2kyOOKjGSFKAjj6h+CIt4FD/usB
BydYiDUEw2O0GEcZChcMWuIG+vvf3npszhMjG+a6bTtvoZffE4dLnN9gojIT
d1U6LZEuh7sUmsOxAo6WSaRCx5C2kye2vH7x4JbDO9YeO7B7aGAQwyCESVPg
fF3gNOM7bIcGQycOH10994X1s/8Q7zithnvUUC83dFWPDOqRfrbvkhXpT0X7
srGeG0Joghqkz+9p2bho16olvq6rMrj4aIynGQyBfzGClhK4kMBhK00auaZV
+1hqvrPg4Hw0QdCcTJAcEsc1VrApynfq6L5509pWzZZbdryHdNwkugvxrhQ2
olMxkYgZHGrQcQOP6vGIGYmmIhE3GkrH/WUqMtJy4NhbK/dvXd1/tQ1DUFE0
CVqZAuerBweO02sUbVx92Ab88Yunzu57Y9muJTOFoXZh5Kro66YG2o2YT4+O
WKjfxUNGqE8cbM/G+6+L0RLSy1492b1v45mtq7D+qzKB6ZIRjRKimsZpBcME
wIFCaRrzEh+v1DWHOHrF7F8ROJE4TTIqJDs8RpoUDgnj+c0r9s9/ljq3K+dr
mcB787GuZLgnRUYdnlIpTCajEhqSokExGJBGfMrIsD4yaPj7SnREDnad2b3+
4vG3sYiPoWiGUabA+eoFh9r8drjoTXwg5elua2/bt/3M5uWKv1P0dcqBXqTz
IufvZ3x9Do1mObwgUjkGAYJyRKhAhgpIv3Jpf8+211q3r1HiYW/Or+TgrEUw
OoGCdSP5BCogGINR8PkooSdIvQnUtxkcb5rA5MNPPn4cF2OoiGASS3AWy8ih
vo69606tmdO/b5Xjb83GO3PYkIP5bSKW5pi0IDgCL6ARNh5kQn5mxMf0D/F9
A2Jfj9TfZUcH82yk7dBbQ1fOkPGgyHLxODVl1b4WcICXyZZA+Gnw0NfTf3bH
xt5DO1RfVzIyBLEm3nVJDI9ABQi1pc1So6nk9bSd4QgtEYTLXaVCuZ5D+vkt
V7YuvXJgFx6McoweDNNQVCiU4SALTiSkBJBJkdi/UnBQwkzEBR6hLCJOdZ6+
9NbC7l2LzcGTqXC7hfSluXhRl3KqYrNCihWyisKjCRaJMMEgPTxC9w3RvX1c
Tw/fd1UP9FQkpPv0vr62E0hgSOL4WIyEz58C52sBB7awDwfc/HXRYf/ZbZvY
7lZ5+Koe7DdiAXqo12GoJEWZNC2iaEoUC6ZpMIyKYymeKzGxa4Gz4wMHpda3
z29cjvb2RAb8eIxGYgyNMGyCBnagzDAoS2IiRqievvVW7fOBg+EmGhO4SJwf
7kRadsdPrlO79hWRyw7abdFBRxWytu0YtsGqSVrKSKpE4ByWYCMResRP9fuY
vkG+t5/v6xL6O4pcHB9sv3L6cNw3QOOE5w+JqYjzNYAzuY1FCfhpNCUhgfDI
2RPjIi4PdjK9V0TfIBcYBgshIYhC0WgwQsdxmRUVmrNlLWOYDhW7Rffdipwt
9J9Qr57oeHtLoqtDRnBABsChEA5EozwIwKFw7yrj/5rAacwxN8iYwPqDSNvJ
+Okt7tDRG0xHNtFWUmO2QmqqrGqWJtuGYKVYw+E1maK9lYNiCToQpgaDTP8w
19sv9PXEL51LE8EMnwBw0OBwPByhvcU9vjs5DhRCUBOfz0XQHbrjXX9yR+rd
9LG9pSwC2esVJzoEppru7qAG+8jhQaBGxmmNlZKKAel/xs6qgmbIJoWSQiw4
hvZfj7TeiF0ej10BdvzH9kQvnddxQqJlDBGjcRHFNQKTIQwxcUql5cYc+Y8p
eF+2vihwKJIDkd6kTk+NxZ080RRPem2G3iJpINhnaIFnVJE2uTjHDA8JPRfM
3mM5/6kacbkuDRdU1NZFTbdkPa2qGU1KW7xlCYbM8oog8giRGPChPT7ZH7XC
cSPoEwa7slR0zBaGr7TgoQASSUBpBN/7bQHnU4H6AsH5WGruNkLgCwKH5AZ7
S2TMiYXMkF+JhBm/nw3H8GBcwDiBFjU5aai2ZbiwI4uaRlF5LFAMtZcDbcWR
FqVtX/DQm6HT+8HgQWzCMCmKaRFERxIiBB0B9UbVM41K+7sHTvNJ2MG9Hl5P
RHMcRYRgg3HZP5T0d2bDlyvIlRrTU5YCOZ22dEU1UrKeldWsKmdM0UkKpqkY
hqyrjMjHaTFE6FEiFcedeIzqumJEh+oWP3jpDIfE0SgiiSbL6lPg3E13xJq7
RbovChzZN1Kh8FQkpAb8aiQmR+MGI+icbKu2ISfTqSIksik7yzISzykUgrkM
lkF9VXRwAuvJDpxCj28c2Le+7529uM+HI2yc0AJxKRrnGVKCsEVHYt9VcJqk
TO6jCFx6HIo3NuwXAn475i8SoToXHOMDVSGSExMZTbANXTdSqp7TtKymZDTZ
MSRbkXSelQRSVHBRiXNiEIWgowVDWmgkhYXfyyf9Ha08moj4QnBKEzFmCpzP
Qg3o9vFvX/hYOABH8QcqFGGFQrIPwImrccwRjbTmaLyuCrplZDTVAnA0NWno
KV3SmHhMjPpcxHeNC9ygBnK+FrX7FNPdQo8MUDHEWzIUEVAUEhyBQykiEm+u
XPHdAwfs2SQ7sIMkoBigiVBIDI8k4yN5MlwT0HGFrKlUQSbTIpPRVcdIJnXH
NNK6ntG0tKa4IKiO4FtYVNAoTcNkdjhB9fiEIR8/1KdHR+qWiA51s4kYEccE
VmModQqcT0Xm9kGkH9UXA06ClnzBUYbNIpgVQ8wEJkUSMkJzCdrkjaRqg0Nz
rKyp224qnTRSKcM2JE0mCQUNu2SwTAdq1PAoPTLGRczYIABFx6IMTkNeA78o
Hqe8waV3Sa6/TeBQDEnSTREE1RSOk5PCMAJBsEQCJaKhAhetshBlEhWZKClC
TpZdWU1JWla3MoaV1u2U4QA+uu4qehokKhbDKBKj2aJr05YYItn+oAhha7g/
mQgVJFrFImjAJ9JeEOeYKav28eB8tJx/2eCII4EyxaSiiBaIqmFEDCMazsmE
kDOzBadoaalcpggmPGOnYWtpyWy64JippCSYHOEw8SwdKtL+Ku0DW+ImBtXY
kILHaBSPRHB/nI1TKkYK32ZwmLuBA/uADIrigAwI9uFlMoVe02I3lUBdjhdl
xpVlS7GSimPJTs5I53UnB/hoSa/+MVOSmZHMnKCkBMGQ+KTO2waui0GaH4zy
Az4zEs5QCICTU9jo0KDECIkoSWDfmn6crxKcjxbyT2jN+6LA4X3BIkEZgQg/
5JcCkONgrqCn1VRSMJJyEq47YJKx3GI6W87mK4WiJClg25KmY5lJN6kXTXHM
oK+riVt65AY/XMR6jVg/EQ6GovgwrvtpCyWV7yQ4DMPBFqJMLJaArTfqVVLS
Kj8hjdwU++tKtKhyju4kjaJpVJNaKW/ki7pT0o2CrjuGYSZtyUqLVl7SXHBu
upyR6aSSkJUIJ/oRdmBEGBpUwyMZDs+rHBYM6KLK0YokWFPg3KG7UcMyysfq
CwGHRmghFCvzko2Rehw3UFqK4QrOSTifT2bhuuecbFI1s+mcZdq5TDadTjtO
OpsrgWAnZRoFW59Iy7dc7lYKu5WMjXJDcvBKYqQviuAh2vCRRgMc73ThhLe2
GwbZwW36YzlHP9A3DRyaBFEfLPpE/rFBgGMleJiIIZFQGI3FeZqyNa2aUvNU
f43tL0tI0VAzdtaxq7ZZtY1SzsyXDLekJwGcDHCTtOVkWoaTnCkXC/WCW7FE
26D0NKO7hGCE4nY0YkWCdVUsKgIdifAkmEaeJOWvveR/UeBMIvOx+ihHdyvY
d4wh/FQQ7haJUIT6WCXiBGyh8m+2jwm8CluRkerZYtVy0opm8TIoo5oVJ1/P
V3JJN225aSeXzhTS+VKmWMmWqrlyzbIdO2klTT1lallLrbja9bx5q2iMmsT7
eflmDj4khoaHwhF/AicIVsQpMR5nKEpheC2BsQjwQvPBGIIQNAjDGw25jeXc
6YTXf/p52fmicpmPFYkzPEmL3hJplJe7NeblecP7oc6hBAKjE+E4EYlaAld3
7aqlOSxWNbiKIZRMrZhMFmw3Z+fyqUI+lU8ppqMa4NNyyVQu5eYy+XyuXMhX
s6lc1sq6huuoyZSoOjSfxukMQqT8YX1gxI0lxjVTiCEsWEGaR+EAvuSCfbe7
OXxRd3n4MsD5KDWf0Hp2N3DuVsAAHAylodYCXiRRlyUDpEh6wc3kzGRKVgxW
NBghyctp1QRqJkqjY+XRarlertQLldFMpeZWaulytViqFHL5nGtnbCNrSvmk
WLaFWkqo2vxYWq7n9KIj6gJGoEEcCVGQOmMMgnBQVVKsghI8QrIIyQQhlb4N
nOZ9ENgEB+x808ARCVoiSAGnWJxujvpuggOnOhHDiAgi43hOEUdNeVTlISWB
QJMzjXzSKlh20U55SqVBo8VyrVCqFSrVfLmcK4FK2TLI1SxgypJUkxc0itEw
LBlDUpGYG4iYg75cFJ9Qk2ADAByC8U4dQX65i65/68D5WGo+AZy7dYx+uOj3
nYJwAxedoUVR0BTZVJWkJ9lwNR1yWFsQLF50eG/0VF41CmbKFhS4mraWtJOp
lJN2srl0oZwplXL5MtSWOdfJpqBG1Uu2VnPUuquMOWLF4oCdm2W7ltFVDiHj
IzgSQeI43hhvD7UlyYgoxUVRIo5TH0Ycr/B/k8GBiAPUcATTvDdQ40u9a4TG
SQg3XALPyFLNVEsKW5XpuindDRwvQ8wVKjmPnVqxOlqq1ctjY5VxL9B8CI5O
swZBWHE0FY2nQzFzyJ+NEdc0qwkOTjNT4NwNhDuo+RPAgZjysQJ2wF2ATwOT
1vRpnmejhKQgOgKfFsScrJRVvWYkR213zMnUnUzNzVXdXCmTK+SK+Xwx11A2
4ykPBs51S+BPXKueNsbS6oSr1ixu1Oav5bSJrJ5RSR4NYBEflC74dgylEJRk
IXmiuUgCgwLQBKdZ+KkPrdo3EByWYD6gprG6AnwjBG4coWPBOBVDTJYtmxqE
m7LCjirUuKXcDRzXtEAZy82lMnk3V8wUINyUc5ViKluwM+DfIPFxVS0tiTmW
L9NsOpqwfaEcQl0zbClBNMHxVpScAucumkTmM77+Dt0NHIg1QEpTQFDTvCGR
hCuKWYHLCgIoL4gFUSrJalnRbqSz1zL5iUx+LF+o50tg0TyXVqrWqhPVyvho
qV7NFysZt2Qni6Zc0HgAZ8JRaiZbUsmKTpcN2qZjVGgQCQRpjMIQr9mW4wSS
8sDBKC/ZQT5sHPgAHMTbfqPAAdEkB9RQzXs4wrEhNI5SRAJP+EMqzRQNvWoo
FZWra9yEwY3p/N3AAUucd9JADbDjQEDXraTqqezmS07Oe4Gd8t6la2VFrYlS
FsHsYKSAMTeSThMckvJqmylwPgs1fwI4d7NqAAuwA/KyWpxFEmQ0gsYCEQg0
OY51SMJEEkY0qodjRiRuQnWHkTZBOTQL/s2V1Yxu5JJW1k4Xc9VSvl4tjI4W
RgGo0XR61LHqln4jbd5M66MGW+CRopAY1cicEJfjI1jAh8dieCJOokAITVEM
ihFNcCZb1YhvMDgfXPEGNSASocgETse9NYXBpMEPr2hCRaLGNOa6ztQU5m7g
FNNZUMHN5Z1sxk6nLddNptNmOms6oEbfqAERx1WknCiWeD6HEZDpFEnupuXK
kBni3pJTCZyaAuezUPMndXR+fAEDg0F4/eA8gAMClOBJKAMuyzoYokdCom9Y
HB5S/AFv5nsCqfBSiRMLvJjlRZcXUjxv8bzJSY6Zdu1CMV0dLdSvles3SpWb
xcJ7+ex7uRSAc80SoAjVVXJUxSt8PE1FyOAAGvBR8QiUPHBmcOFpmsVw+sPm
6EbDO/oBO988cHiCkHC8sUhUgxovN4sn2FgMPFVZk8CkQayB7KYmk2MyMaqy
dwMnazteYxr4NCcLVq2QzhfSxVK6BAkOyJa1pAJJpWyLvMvzWZbJkZQTS5Qo
/kYqPQXOJ4DzsdR8Ajh3G8N2t+boeAyHKAOF4fbmaJkVdRQFaqSRYX5wQPWN
OPFYheGuKVqRZAs0V2B4YMczb6rudd6ZqYJTLGTBp42NlcavlcYnCpWJbHbM
cW4Vszdc42ZKvZXRb6WkuoyVmXBZTLDBPmS4m4kFJK/1tnGbEJZrDPT6GHD+
hH6cLxUc/L8FB6hhGtTw0dCEk6zpAoSYcZODuqLEo2UBGzXEu4FTyRXK2Xwx
nQd23KSTMmxLs73+ZTXpKsmUoluqastKShZdUcjxXI6m7XiiSAsAjoJS3z1w
7jYkZpKajw6n+VJ1twIG1AA+XmILgca7/bEXegSKK6hqTZPlgI/p6+X7+7IY
Cu66ynBjolphhAxOWXHUiKNg2zKckJWNrJXLWKWcVQSCKm6pli7WMzlg55qb
ejdr38o7t/LJW458TSXLdMhFhyZSvIGHkKHOxEgfE4/yuLc2IkPxcCS3HXOj
PRBjP1jb8OvQx46pwzCOZXWPHYyjAdJIHPP7lXi4IDE2EXOJaI6OFTmk0og1
kODUkwokKQAOUFNKOdV0pp7Lg6EdL1YgJWw2Rzdb1Rry7G7RyhSS6Vwy5Zpm
StdTquTIXtbpUiQ4Zwcl84JkUjzXGKuA09wkOLd1QDT6simpqTvK8+cF4YvS
FwXOZAn5usBpxp1GcaUnK2oGo+hAIMvTDom5OGrFomWaLZL0dVXX/eFkNJEl
6Iqg1PXkWNIes1JVK53WXFfPpo1cJpktWJDVZitOtgppryzXTPXdtHWrkLqV
1d812RofyxK+Gw6bFeJMsDvSexkPDuksI7M8FsOb93n5hoPjtVJSijfvEmPx
GEqFw1IimiLjeQ5iQbzExMoCAiYN3NpYUp5I6RCGxnIAS3Y0mwPVMllgp+xm
QQBOg507wXm3OnGzMn6tXBstwgvylYxTceyabULQsREkS7IQ7i1G5EkawCEp
ruG0P4aR7ww4dyyNi32kwfkrBqeZ5oCaBEEA8rpEYygdCrksbeFYhmWKovCu
7dZEpS5rRijuJIgSJ42q1pjp1Ay7KOuuoDqy5SgpV3XSmpM10jkzU7AzRcu1
BSGriMDONUd/11VuWPyEhtfl+JiOjpmYQweJkQ50pEcmMJXhCe8+L7R3q5fm
Ur0fdCmyBP61Tam++xRp3iuNcOqCIXBoaRYDS5anQmMCOiYh4wo5YXATNvxq
YyJjX8ula65bTbuADIAD4Wa8UIRwA6qXPI2VvW7lOmwr9bHK+Hh5vJ4ujbpF
ICuXSqVtyzFVV5UzslAz9RzHluBamFZa1KC24XmRZgQw2ByrNjU5/oqh5e8e
OLeHm68RnGZhaIIDyMSiWDSCJsJxSxQKuqJhmI7jGZa7lnJqklZXDAg0ZV7N
s3KGEVOUkCTBcYFrYcGQu5o3PP4DahpBp+TkwJzkDSOnSnmZKal0TWeuW+y7
DlfiRsa16HgSz/IxITKM+4boWFyiJfIOcD5A5hsHDk3w3kpx0QQVCZlYtCzh
dREFF3pdStyQkesadc3kx21tzLXr2TTEmoKVLNpW2QF8MsDOWL4wVigDOAU3
A4Icp+g1C+SLmUIxUyo1qAFVM/lSptFDlnMg6NTS9ru5TE3XJpKpm5kcpJam
rGqKLoiqKGiiYDQl8DqI5zTQtwWcSX1qrJkMN3/aqOYvEJxmeWiCE4/hwE4s
gmgsV7STEC80cCQI6nWDysZ7mWJZ1PO85lKiRXBJUkxxak6xvMYBs5H2Wi7A
Unbz5WyxkvWGkYAPKbuAkp5V+axCF1V61GCv2XRV8pfYgQk9cSsvF2QSG+5L
DPs09mPAaYwC/WaBQ6CMyEgk5OThsIrF8ixa4eN1NjzOha6LUWBnQiHAp0Gc
LaesBhfZmufQ0p5Dc9xio2um0dSchJKfVLSkYnhSzYYsW7WBGgg6kAfVS6Xx
WvXaWOW9sdqt8eqtSnE8Zd1MZ28Vy1Un6xhJy7RVLdkYK5WURLOpSYi+e+BM
xppvCDiTccdLebwxHLirqzrPJgXRFqS6k6l6tVyprFqelFRJc0qGW7ayNadU
zxQgnQE3MprOjma8jtHRYrVeHgOVc6VKrlDLZaoZu5rSS6ZQUKiClHjXiufJ
rgI9cCvDv5vRDBIhgkFv4bVvBTgYrXASh6BiIu4yYNKQxtw93w0hBLomRMYk
rKYwJUPNASB21vWCr1tKee1pXghOWjkz2QSnOXIgnXRALmwtN21lMslMVrVz
WipvOfm0W8h7w9fq5fy1cu5mITuaNK6l3PfzxUoqA58A4HhrfdwGziQ13yJw
Jl/wySbtjnADb/y6wLkdn2arWkOcLEpgrXVRdDWznMq8XxuvWumy7o6lCmNu
cdyt1NOVUbdccYrFZL6QTNdddyzt1jOZpgkBuz5aHa/XJor5UqlQrJWKo6Vc
Pe9WXK1g8AUFeT+FjIuDeaq3xAYnknzd0m2OoyIoFWcn70XyTQZHpFmdplMc
neOJEh0pk8N1avg6638X2JFi4zJe1fiioWcsN2XnU3Y2Y0GUMSfbokspp+Rk
QM0O0FKmUPJMWqGULXpDbjLlaipfcwqVdK4ENi+fLRbSlXy6lnfKScgo2ZKi
1VPe9DdLUnUVkNElUb/DqjXd2ncGnNuboL8J4Ew2pjUbolnvbgMyz8mWmQSH
4LX5ZIALcNd5qAMrycxoKg+Cy1qxC2UrX0rm8mYmZzgATt11RtPg5/NjhaKX
83rs1KvlSq1UrhU+DDquWXO08ZQ4oUVuOciYFDTDHWky8H4uOe7ofCzKJhAK
IUiE8loJvMYBAcebq7Xzdy/ezL94yzbb7m6/PVZzDCpBNG7/REyCQwM1NIrL
aDwvUqMaXWKjRWy4Sg6NM74xcuh9JXZTQSdUalSXSqaZt9IZOweCczKWz41m
M+DWgBogqBl0QI2gk7o96ABuE4XaeL46miuXs/lCJp1z7WzKLNh6ShI0AodK
pqCZlqDILC8J3vWCHOd2XpriWPVbB86nTkz7F4v+WH3ejsJmjXr7oDVvBA7F
cyRbsF2vk85yb5RHQWAMwFTX3BzslE3Pp1Wt7ESm/H55/NbY9RokuZbtKKrB
CyYvpBQ1b9kVKCSOCwUGsuOiZRaS2qhj1RyjrHJ1MXFdjoBqvD9PDuTpwaoa
HXeYQMcp39ULWUPDY2jInwiHaCSuk5QNBGGNpTBAKEIiCaIpwivJJGxJnGrc
0Ipq3A2B/pxblsE5FhUYTGisl6gQhIIRKkqqGKXSvIGRHjuhYCwUCMIRRAbA
ZAbfkyOgGjFQiHfBFhKccT76nkm/a3LXDLluqFXD8GaoaamslkwrSlqVPSlK
RlXTmidX073cx1MBDG2zabqhcsFuNEumso1+UqfkpsoOyAY/XLTB6RnwLkiO
UpajKibDio2IozXw8bqwG41sMuhuYxS/LnA+FahvCzjxGA6BBk47nHCoUSHB
gYeKpDMYBUZiNFcs2emKk4UtxJ2xrOergZ2JTBFUszMZSdcxRohhrmJ4toHj
FZpRacbgeFsSXVXx5m2ZZjlp1lJ23fU0noZcybphsDUuXMQHC1hvHuuCfGdc
9d/KU5z/vIYO9rSc0Biap0Q0IfpHOBxNNlaRZZorlU3iA/KewT1wvPn+ED6I
SXA+hxicZbEmOBKAM0kNKIaK0YTX46mpSTyB9Hd1IEGfFBu+pUVv0t31xJVR
pKMUu5KPdUKO836SGZeJUZmpyXxFkcuKCp6qrJpFzcxrWs7Q8qYOFUgllYLy
X8ukIQBdK1dAE6Vqs2l6tFhuztAZK43Vi/WxAgSdIoR7iFPwLhC8pZx2ACVw
v5aWdGxX1yxeUO4Ap0kNVINT4HxJ4CTiRBOc5npE8AlwtnU1qYkqVH1j5Srg
A6EHBDsThQpcRNAobBuhp2CmcorpSJqX9jYy30mVLAvkyKLOUEmGzqlKQZMd
ngGLXtVFr5tDwUZ5yA4GC3h3Ae8sEldzROeYEqopSO/ZIx2nT8gUj8dYLKFg
qOoZtsYk6zvUGNvW+NWNPAi2jRj6wV14Prtoz6d5K/QSGDhDGf1Q3nrpCIOj
lEAx4YH+nostEhqp69T7cmg8cbkUOF8Ot5XjHaV49ygxcsMbUBQrsliRo4qi
UFSUoqZD0CkZ1vV8/no+d62Yv14q3CiVPFXKIM/CNfp0gB042+OV2kR1FFTL
16o5z6oBOKOZgtdzmk57ArOXTUMoH6tWbN0CcAzdhhxnkppJcJr+YQqcLwkc
oKY5K6fp1przQCHilHOlsWoNar+CmyllclAZwsWFi1jPlyAAZbSkLaoWLwMy
kKJCMPISXsfr4PMGk+TysAPVI4BTg+rRMiFNhqBT1JW0yAE7OYnOMrEJk7xp
EkVqMB1tLyId+WibPnjiXSn4robkqdCBDav6WlslkhMohUAF/I8NBaw3ZZnk
SIoHfbBMAcZ9OC2ukZWQ3OTNRj+T8A8nLqHecrIgBBca91Pg0DgpcxKPkYmR
oaFLrfhA16jBX9eIYujSaLi1Gmwt+s5XYx03WP8Y5U9H+4tUJE8jBZYsynxR
08rJZM12Rx2nBlEmBSleCk6I14SSzYKDBY1DPpgveGEl2xy0lm327FiK1yid
MbyGNTjhAM5EPn+tUKg6TsV1PHDKZVMxkoYFofB2cG4PN1PgfHngACxNcECw
D2dekU2I/gUwaYVipeDNTcs6bqWR7wNBWduBS9lMf8qQ7Hyo5hAsKAbXyxWo
TuEqgxsp2+DNnIlsBuxZ2dQg4gA7eVXICKSO+tJsuMiHMmhPyt/q+M6WQq3g
fLIj525JofdUhOg8f3LHJiYcQANBxpu588cxdU12SDjbkEviXEMCSogghBC9
u1aR0t2mUdx1JmzzHty3Cb6LRCgkEFbha2IxYrCb7IOYGLllC4VYb7r/VHno
dGnwTH7obCXSfoMaqRNDbri7REe9iCPRJVWEugLKeT2TA0yqtg3gjDqpsbQL
D5sUXCsVx/JeNCm7WTiraT1py5opyDonToIDlRKklvAh1xtvyRtGwUp6dVSh
AEQrkioKEGWUyVgzGW6as0WmwPmSwIG3NHmBU91sK9BUK5spqrLm2Klq2VtJ
QFc1J2mV84VCxqsPoWIEiG5U6zdrY7D1/Hm+3OwQnyiWmuDAJYZ6FWpXcGhV
2/IGWSliVhYqSb2SVDMS7QgJAx92yKFRIVBKdCpXDipte4sDJ7M9x+uRy9VY
5wQfjlw8dvbtLYnBqzIkNNFYIoYhcRxJEM2pEM32rmZ08ORRI4M+vMO18Nmp
8e4wiDBxFEQhjewJOCW8+TUJPhalfYNI5yVh8KoV6qvggZtCNDPSBsi4Vw+k
2g/kgCDfxULwSjHWPUoHq1yizBNlha3ocsUyqmkHzBVElndLxRuFPNQhwA7k
fTldTyuKI0m2JKdkxZF1RzUAnKxp55JelAGrNpqt1rPlerZYzxQ8+tJpELwL
2Ck77mguL9K8xIoCJ98OzmSsmQLnSwWnGXTgnMMW9uGUGnqqkK+IopwEm9H4
z7btLHBRrQFE18fGJ0bro+UK4JNLuemkndK9dVoaPRQWhJhmDuvtWEmocsdd
dyLjgOqONWYb4ykTtlVLqTqCK8UyTGCUD40SfcnOo8ThdbGdS0rdRzMdh/ID
Z+pIT40ZubBztf/SUcLfjfh98WA0HoohkQQWwzGkce9dnP8AHExqUKPECSXR
SOobt4b/zGPa4XqhVIMaby1BDP5JJJh4jI+FpYgvdrnFf+qg2n8pF+7KB9or
4Q63+3j6ysHUxT1u+4FC/6ni0Pn04PlCuLPOhKpcvCxgRZkpaGIhCalfsuSm
wFyBWS2oakaWbI7VCEJMJOhIhAyFdJr1GiHB8Ro2xB1wwtcro1AjTRTHxgv1
8TywU4SM0pux7pm9VFbx2lvACUNmJDECgCPyCljrjw03TR8+Bc6XAQ6c5+aM
6Wa+AwlO0nRdJ2fbTiqVGh0dvX79Omxv3rx56733i+ArGv0yzRnTk82n4NKv
lcpgPDz70VQxf7NYAL1bzAEyVcsYTRlVQ3FZ0qawjECMZZVqinHIEWX4ouuD
ZOGienZ735oZxqnNzsVduZ4j1xId74rDeazr3I4lPaf3oCN98REf4g+gwRAR
iRNx7Pa+nkbE8cJNAxz984IDQSeBEInG2psoEicSUSYW4aMBKTISv3IucGZ/
9NSejL+9Hu8uDJ9L95xgj2/ijq5323ZX+44X+07k+k+XA5crke5cpLfKeBMK
vFs9KmxWl7OGlrPMvJ1MMrTNMCme81YPUNUiRI1k0ssB3cxoOuu1t0BYAUYa
WSSoYOVAJTtbttNVKw2JUhOcvKZBvTSeK1wrVxSwarwsi5quJm9vgp4CB8TQ
cnOMK9W4l/ptw0H/CMvkwGbQJ1iy2+cOTHbfNKdO442JOXDmM+liqQjmomhZ
qWq1eqvxH+xA0Ekapp20UmbSteycmy6CM8/mQZD4lN00+DTw80UoJKYOtSuE
G/Ak4xkHHBrYs2uudTPrXE/bo5ZSUjgAp5xkDXLIwvqT4Xbu8iGtbb90anPP
qhf8G2aRby8N7ZhfDZyuI21l/HIydPbs9sWXj+7pb21BBvu4aIQKhyHxiY0E
Ir4QHicgf/cmayRYktaBHX+Yisa9ySmAFYmxAqvwjEygDNIYeg37ppaiCZ4h
BQrnVMlsLhcQjyZYhhro6Y77h1H/gLfe9XBX6MLRrr1vXt2+gmp5uxq6DHFQ
Ob+z1H+Sf2eDfmZLqnWnfHIzBJ1876mir9UZvDBG+UtUsMjFSzJVMSDH0fNJ
I2PqaU0t6FpJ10EV06wmrUbK44GQ0828kSyYqWazPxAE+IzlSq5i581MzSlA
glMyUllZy0oyKCPL47nce9XRaiab0i1TMQAcmmxOK/hckr4WfSpBXxQ4dxt9
fTsOt8/o/GRwmvu3j65p+mEI9ODQ0m6hWKjVR6/fuP7+tWs3xsfHIdaUy+V8
Pp/LZJvy1rHJZEu5vLcoR67grXXjZgp2ajSdboKT1VWoVB2BT/FQwTJ5VSoZ
3pQcCDcljc/LDFjzvEgVZLSioaNqwg61s637jSuH7LY9sR2LupY9Hdo6F9u3
xOncU4+ezYdPOMHjg++8cXrL8tPbNvSfOhq8dJ7xDYa7r4a6uwbb22NDfm+y
PxhO0ht9EQxiQA2EG+AFnsTjJOXl+DQaxYgExVMCbGVOoVAG/B7scySPxbxp
FBSCENFQoOcq5usNtJ/tOrZ76MSe4WPb+t5eO7RnJXZsk331iH5hd/rK/mLP
YeXUpmTLNpB+dptzeX+u90Sm70x6+GIVHSwTgSIdLQlESePgh+cMJa0pkJh4
rfEQaDQPn7JhVsxkxbJAJcMqJm0vrHxIDSSME4UKUFNOFerpEjyfV5MpTrQZ
FgTvvZ7P3yhVinbKknRdVOHnMBQ/Bc7Hqjk4pzkyoXkAH4XiM4Jze7hpNkHD
M+DQAJnr194fH7s5Wrs2Pnbj2vj1em20XCxBXtN0aJDa3BifmOxrACs+UfK6
57zxVCknJXqwWCyjk4SExOiQHx8ZhAAhRYNKPJwkEECmnlSquugymBrzW+hI
VU7cMPAi2md0n1Qv7ZdbdtBH1gS2zo3vXsgdXyWeXVePnM6NHNG79wSOrjmx
Zu6+ZS8fWrHg0u6N/cf2dR/bf+XI/ivHDke6u5koOCsUMmWgwz8chpMD8UXh
VRanqQTlTcpDaCyKEDGCJ1ksgsErRUqEZzicg9ewEJVwSsESoa5LA+ePDbYc
7Tq8/dyW1zt3rWp5Y27X1oUju5ZE3l7GHN/An3qz0v+O1bZdPLHOaNkiHFuv
nNpiX96fBOq7T2RGWvORziLmK5DhAptoVA58VhEhr/HsmSx73TqKUvbYMZrs
gFt7t1i5kS81e5bzhp1WDEtQkryc1d2ilaum8sAUgJMW5AwnZERpIp254TW8
5FxVU2gB0hwRqj7681Lz3QdnclxoY1FB7/eCc2MZ5Y5hh3fElE/Q7eGmOThN
kU1waLXqBJg0Kwm2wjJ0MGYWxJexaq3ZGgB6d/zarZvv1UuVa+UaUHOjWr9R
HoW6sZG9Zq/lchPZTN11SqYBgQbYIf3D8f6uodZzA+fP9J8/OXLpHNbfqSPh
oszesBUz0mdHurOJ3jLa54xcIM9uTxxey5/Z6Ns2L75/MX18NXpoiX11h3Fl
G3ZsZfDA0vNrZh9dMn3z9N+dWDl376IZJ9cvO7p2cdvb26IdbYx/CBkYAHyw
QCQyFBBIITISYRKEdxeeCMpjJAcmNhCODQUT/lC43wfP8wgVHhyB55v7AoKo
8WDk0ung+SNtu9eeXvfqqdWz2jcu2PPS/RdXPt+5bsbw1jmhXa9qLZszV98m
j65C9y9l3lmN7FuC7V9ut+/lzmxP9ZxMD1/Iha8W0JEcHsxS0RyDZXnvDjhp
kUsLQklVQUBN5cOIA4atZtkFzcyrRkY1XVlPiaotKCYngWzRzGhOKZmBBKdi
OGXDGrNS193MrXIFIg7EKZ3lBJQG8OH38qwEAXcKnNvVnGrdHBfajDhNcP7Y
lPoRgj47NSBZMgr56lj9BrDTbJGGTMfQPPOcdVwILsDLzbEJCDHemOd8ydXA
jHk9nqWGu/DGrdlpMBsyimoEbrGUK3JZWchIfJqjHIbISxzEGodGWf9AsP28
r+0s1tehhYbsYK/ef1HpPmsPtwI4/KW9ieMbiVNvtq55bnj3K/49C4J7FyKH
l3Bn1vp3zAm/vej0a384+spje2c+dPCVJ/bMfnTv/GeOLJ9zcfu6wRMHsO5L
sauXYt2dvo6OwfYOMG+DV7qGOrr7LrcPXL460tU93NHdeaG1/XTLlXMtl06e
7b7YNtjeeen0mUB3P/w13DcEYYvquxw9d4hqP9a1c+WxxdOOzH/s0uoZx+Y9
eHnF0xeWPta99vnO1c9qrVvwI8vhYEDBnQv8218Z3DzHat+bOLLeHTztDLaU
4j0lbDiPBbJ4OEMk0jSW4ShvhQ2RbyJTNYyaaY6aVj1pj4K/tVOuIKdFJS1q
IGBnUlnVKZrZxpDabC2ZrlkOUPN+vnirWqu7rsNL3kCKOEEhBMRNgZOnwLlD
t0/eabq1D4eS/nEpztsJ+mRqJsFpnj3waRBfkqYLQcdbo4NXIc2plMfKxdpo
qQb5S95JgxMbL1aAmlwyBTUhl8BFjFJJ1mTF5nrsNitZDH+z6PVTXMulx9Kp
qmUUNDkrMC5LJsk4CMCB6hfcS4bDk1jECA1wV86oHaeNrjNm/znX15oNXWAu
7bm645XA4ddjx1f2vDUrcmgJ/s7rcsuG4PY5V1Y8tfe5f3r7+Z+3vf7s/pn3
t66ccWDe420bF53f8NqJtYt8pw+GL55pP7zv3J7dp/bsObtvf/vJk2cPHDi8
Y8eBzW/t37p138Yt2994Y9cbG/Zu3nx0+64Te/ee3LPvyM6dHafO9rS29rS0
9p45MXx8b/vWZb79GwZ3r+hYP+fK6ukDm2YFt8/rWz/tyoon25c/cX7R77hT
b3StfyF6cGl4/+KR7fMCuxb0b35Zu7QbPb4hPXTG7j9bRfsrhK+AB3NYOIcn
MiSaZamCwBcl0Ru39mHEqepmzfgg4tRst2o5XlhJusWkA2rMCkyNZaoTudFr
2QqAU9LsgmrAu8Zt5/1SuajpGk7xCahVCQisAA740ilwPprdfOy9cZs//6P4
fCo1tzemgSC7gYeQHAE1+VxlYvxd8GxpJ1fNe6RYkuoqRrPBJ6MlDUYQEELC
KA1nDJIzKR62OsYoKMFGwnwsLCMxk8LBnJQMdcJJ3sikIKmxyQQXGGR8/ZDa
ADVK1CcMXsXOHGbOHBDbjgqXjghXjjj+c3zngQubZxJtW4jWjcP7XkWOrSCP
rUocWBLc9vKR6fe8/dSPjr90X8fyp0/Nfahj9fRLq17q2PTq8ddf2vrSExff
Wtt7eM+upQu2L35158plq2bPOrRp0/ZVqzYsWbx2watrXl2wcu68xTNfWvLS
zBXz5u5YvWb3+nWbli7bvmb16bf3dp4903r4SMue7e1vrTq3YtbVNxcMb1/i
274QO7AsunMB+87r/eufC7w1s2PVE5dXPokcWnZx1VPEybX+txfGDi1NHFke
O7icP/+W2r7X7jsB4FSQvjoZqECOg0cAnByFFVi6IopVVclyfI5vLIsqSQVJ
KcpqQdVARc0s6cmy6dTsTD1TmMiXrxerN0q18WxD6RL8KSNoGU7Ki3JZ1W+k
sy4v8NEEG0uAyfRuczwFzsep2cQ92RDdXGANzNvkGbiDnc8Vbpo9y81AMz52
E2KNqiS9xdaiqMSKGivYrJCV5IrmGQyw5UXDsHgRfDj4CriaLqdYjAjRR8ZJ
r82Hokwc11EUtjZFZDm2IHFVVRhPqqCiRGvxAOvrEXy9ZnBAuXoudnRb4ODG
of3re/asRM7vBHCGjqy8sPEl/9Hl8ROrEsdWDm6d/c6cfx7c+NLx2b86NvO+
zpXPnF3wOwg6R+c9MrJ7ecvql/cteHbV0/cfXj7/9KaVS576/dqZL2xd+Mr0
B369bv6cta/MXf7yy6DVr7wC24XPPzv3D0+88vQf1syb88b8eQuefXr13Fl7
165pO7TvyOYNB1YvPbfutYHdqyJH3vTvWdGxblb07SWDG2eiexdfXfkH4uBr
gI//rdnx/Ys63niGb3mzb+ss/sx6/swGoWULfWZT1nda7TxsDbeUkJ46EyrT
oQIZzhGxHIWWOGpUEsc0LUVSKQosK+syXJoVXV6CfB98Wt1bjjvXNL1QQRUt
F1RIpvMW7GdKhpuTDIcTUyxXkOWart1MmhkcEwJ+IRptDHulOVJQBf07D86/
BKjbp1pHI2hzLcFmd3+zSVkUtEk0mnciaK4hAFviw4UFmt093kCsxisBlly2
bBqOd/PoP67BLtIkI1N0gRfT8Xji3JlbljZhymC9qm6qbDtl3c3LlstpOs3D
p7A4zvhCRgRN43SWZFMIoYWiciAg+UeYgR4lOJLComkyZqMhPTakRwaT0X6l
v5W/epy9cpRsOzh0aP3lbYsC76y3hk4SLVt7dyzo2jznwspnLq99rmPtc23L
n+xY+3xo75LLa1/a//LvLr4x+8zq2Ve3r2jfsWr/63NWPPfInId+8fAP/mrD
3BfWvPTcoj88MuM3985++Ler58x84aEH5jz5+JuLXl0+66Ul05+b/djDy2dO
f/Xpx5+896f7Vi/bs2LRyunPQpzatmjuA//1L157/FdXd6/t2LGid8+a4b2r
z6+Y0b5mVseaGYNvzqYOLb/42qOBt2a3LHogvnd+dM+cyO653PE15NFV/JmN
5Kk3ffuX4xd2FtCrY5K/ygeLTCDHBAtsrMSjOSphxUNwHkqyWlKSZdUC31XW
U2DMvBm1EMpTmYqT91ZpcPPNeaBlbxJo0TStjJuGMFRSjJyqVCyj7mrXk8It
V1Paz6fDg/CxKgv22psHQWFKo79P/PZqkugvG5y71SRNRjjWO41AxyRczdjU
nDjQHJPWbFIDZCDNAeiarDWHegI4MXACOGrHE2Z/38DOLVlf/7hCT6Q0kyYU
glIRRouzSYyH6GNbZs51lBjO9geR9j6so08aDltRNBlNaMFQtO1i7HIr1nmZ
H+rWwgMgbugK2X0ev3Iscm5P8NT2xIW91KUD8bM7hw+s7dq5WLt6qG/nov0v
3396yZNH5j7Q+eaMM4se6dk88/Arjxx69Yme7Uv3vfrU6bXzNs968vCq+c/8
/PtP/dMPXnrg3mm//umSZ3+//IUnVkx/cuW0x1557LdbFy9YPP25Rc89u+rl
lxY9//SCpx5bNWv6tsXz5z320KwH79s8b8a6mc9uXzh756JZG19+7tl7vv/A
3/4/Cx69d/7D97y9cFr71qXHl7xwae2ckR1LO9e+iO57vWvVs8TBJVdXPhHZ
OTu8cyZ+4FWgSTq9QWrZEju8KnR0DVjNCWnEQTpy1ECOCxSESJYJp/BgCgml
8WieoYqiBlVNUfXWaiib6aqVrdiN1uZUDlRyvLWjJwXImFbSdWxwcVlOcDgu
p3FVkx9XibK/M3FgmzNw2YkPGyItqwrH6DxrTYHzGcGJhBFvHac40YQCSIFw
MzkfDaJMc6INxJHGwZDNYRiTjq75luYcnNvn1384FVTUjWTRsQs0kw+HRvbs
ZC6cLpKxUVMqJ/WspqUZ1cYkE+U0ioM4ZyiyHMUshHFRDuIONxhg+och6GRI
0krEuKG+aPsF3/kT4bZTePdFfrhTDXRh7e/IA+eM4Va++0TszI7hwxuG9q8Z
3L/SGThJnN3Suenlvm3z29Y8Hz6w5NKaZzs3zrywasbxpc+2vjHn0GvTNkx7
YMa9fzfvoXt+/df/94//3b/9/Y//dsZv75n7+39e/sJj615+dtfil9e9/PzW
JfPfXDh3w/y56+bNWvz8U8umPbVx/uzN82e99tTvX37wl0AN8LJ32bx1M57c
9sr0Gff9+Hc/+MsnfvLXD/zNv3vt0Z/vmPPEysd+vm/WI72bFrQsfjq+Z0lg
6xzm6PK+tc/Ed82J7ZoN4JjntwxvnTP01jyxdXuy/6jef9wOtxXoAYfod6nh
NBW0yUASC7lEvCIx40kdAkdBs4q6DbHGS2ecHGQ0Y9kiZDTecsEFr/mlObng
g/kFhVytULhmZ0ZlvaSqdVsdT3nroFKn9g1uWmn3taURny5QoiyxtMYx5hQ4
nxGcpuNqLmB7u5KmC0Q0l0ebDD3NkZz0h2uqN1cYgGfgr3HvjgHEpHP7MGni
FFXP2raL49doSrl8Ub7SWqYTZY0xKNygKBsXbJRPopyK0c0bXUDKk6aVFCak
MM7BeRulzSgi+0Nkby/d30v1daFdl+Pt5xMdLVTfZWmkQxq8KPSeptqPRs7s
Hjiwvn3bkoub5rdumEed30m37EBOvnlqyZPvLHikfd30i6ufO77w0eDBNUDN
1hkPbnjut09+/9/f/5//z9997z/c+5f/x/f+9//pvv/yH2Y99Mvti+ccWb/0
4NrX9r7+yp6lr6x+8dnVM6cBLGtnT1/45MN7V7y2feEcCDEbZ0+b9duf7Xv9
lUs7NxxasWDV8w+f27hizoM/f+Inf/Psr374xI//atZv/uHV+//x+R/9v0vv
/8GB2Q+fnP+Yb9v84FtzQ9vndK/6A7JnHvL23NjuOej+JYEdrwZ3LSZPbtK6
DruBllTkkuq/6OCDOtKvxgdMPJDliaou1pNazdTLpl2yPHs2msqOpwvXsqWJ
fPlaoXKjVAN2YAcejjUGQtfS+Uo6Uy1krxeLtzKFW3bmppN+N2uPW1KNjVMn
9gZ3rC8EujNYgKcQnKZQlCfxKav2WcG5WydOs0PT0FMQfQAHwAdoggNrvhie
abI26dbuaDFohiQCZxIIpnCcEY3WMVzvuEy1nDQC/VCFlk2tYibrmjOhZSY0
d9RMFVLJnGPlZTPL6S4lZxi5IOglSS8Kco7lMwxdENiywORZHHIcLTKsRgaM
WL8ZvCr1n5X7zpojF+WeU8HjW7p2LevZ9fqJFdOubl0w/PbyIwsfOzDnobOv
P31w7oPrH/9xy6oXTy+fsWX6A0//8M9//Rf/5hd//r8+/qP/9NM//7e/+/5/
nPngz7e9Nit+5Qx+tSV68cRxwOf/Z+8twNu8sn1vTTvtTGGmzJwpc5tSkiZN
0lAbRgcctOOAndiJYzt2zMzMKKNsybbQYmZmZjAzxA61o7sVTX172mZOZ77e
e885X59nPXpevwLL8v7p/1/73XuthIulMeezzwXnXzgdd3TfsfVftmYnJAcf
yDl3vDDiZHrIIUJNoR7fRWsoroo5TarKK7oYvH/1J2f3bAzdue7sttXntqwI
2/jp5e0rknet6Io50h0biI4L7Es6TEgK5OSFcAtCRGXnhGWRouo4eVOasbvE
Q2keYHW5Ob0eYZ9dRLSKyHYpc1Anm7abby8Fd/ja5QwMTYOc5faSzts7dMZA
LIyOTzpur7rxlSbwXQkdtdhB+Fam2a1X3W6va9DrGvIODv990D1tUg3wyA5k
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
SD++jViROiYmANvmdcq8LvmCnjUiwhkI0CuH1iUcXlcRFdidfb4hYndHzCFE
Uggq6wKpMg1VnJJy8sCOz95a/eoz37z3ChDQ9tRwYNUmWJ2TjNZRSsMQtX6U
1Toj7plX9i2oyTMq8piUPCCiTBjEExbVpNUIFMep1VrVGqvGaDNatSqjf0LA
35vSPypAxvoru1r8ivjPW23+vO3mr4/FJ/rB+Tk7vxU4ixulZT/qhOu/gqlR
/2NK32J2glv/tOTi2/hJ+Klh0LngGLwOeLD/Wf7paBFbpBSIwTebUyU3C1hq
ClaKg2Oq8kuizoDspjM/OS886PCaT3d8+vahdV8e3PAVpqZ0VC0k1BVXxJ7r
LUxBl6TiKzI7sy63pEZ2Zl/pzEsAIlUafTYz9MT/Yu8soOM8r3WtQpo00DZt
2rRp2iZtA3YSJ2aMYztmyySzLcskS5YFtliWLGZmZmnELI00pGFmZuYRM1iG
uZ88p7peiZ3T3Nt7enPWydr518z4H9DM/3z7ffdHzM5WUiMk0fNmtv8dVHVF
mp93SURostc14Iw60qOZDSUmdDurOoNTk1rq5VJ752y9/9nBtDvdsZ5lPi45
1w8X3TrRGHa1NvBSjf+Z4D1/Szu1odXvMDP9JjHmbMv1Lcm73qo4s6rp6oa+
219BPb8UxJ9XZlxD3P6q8dwaUdIVU1ngcGO0rTlutDtjFJqraIjH54Ww6goy
Pd289m6PcTvtuW979BWXwYrsLP9r+1e9vfo1p3ednG7sWl0dca0jxTfL61iO
98n7F/aVBLmzW4uXYZnV2038RTFhSUocJvcSq1Mrwq7n+Z332LM64NimwOOb
7x78POjA6tLbx3qTfNvjfYFOy/K7AsAJvHT8wKd/O7r2A69D24qDrhFK44HH
MfWXWuFlQ4OVo/jaKVorSDoLQgRQa7Ni4qSIsgKOTSEH4CgFYoUIgKMRcJc3
EHd03zgkB+fpTmE/OHDA1Qji2/j8q8BZeTVw5TP/sf06aGoGUXhAAXhHx3Md
Th98EkDEc2NlQ0NHFwD42sEXDp6FRuJRCAweiQfgOPpxNEwy8DjUroaGtGhU
dT6nt7E8OjDM9UTSbbcMf4/Qq+eTA28n+bnfdz9fERPE6KwRQRuwNVnQ/Dhs
VSahPhdbneNYP60jN74xIzo/xK8qNoLW1kRvbw65eDbmphuwPEFnnYFUo0GK
yNUZ4Cpqj/JoCLmYc3knKsULleajbssZQVTpuwoENYnkvOCBeI+mgFMVN/f7
b/2977pflV7eiog4iww/XXh6TeC6VyM2vVHq8nGD69ruG1u7rm4kBhxghh9v
OvsJzn+/JPWKtSp4uOG+rSna2BBFTL1RcmNvideF219turxx1Y0vv7h/6XBp
uAetvZjUmi9FN7blhvu57PA8uP7aztVee9fGuR7ClCYt5xeL2D6hWnY0GsYQ
qYcOyQXCMs/rDLD/jZGe1SFXC73P5HqezPU4VeZ7FvwhVXdOFnqdqAxyAxmH
3FzWmB4Tdv3cmR0bj63/+Ny2TyPO7wPPopTFKtoyTQOFmp4cXX8+yDujxIYp
Vs+cEDkvJc4rGWY23synmYVc7fIgD7aAzhKweCKgN14AzouWBfv+Ifxe8X1B
W3miA5xvs/PdRuOfB8fxyo4XfDYBOcZaOJYgcFQPHD7oRa8DvmfAy7Kpedpl
BtADL4geJNDILDqVxWfw1SKpRaEA4ACpJkL3iwZ7gaNpSI3syE0EyFzbt9Xj
8E7/s0fuXDgWcv1czC3X1AD3uqQwfGOhcrDVSOqWwxvQFakAHE7X8hJkzO5q
wUAzrDKrNSsu1fd6ivcNREWBhohM8r7aW5SOqMhK8jiHq0zFlsYhc4Nrg850
R7th0m5iUj077ruR8kIn0XUL+AZrdx6nOKzB1znnzPqii5tSj65y+6tT5bUv
m7wPDMa4Zp/6/P7OP6QfeK/YZVXl6U/Qd/cDcGAe21n3jna5fgGC4L9XX3Br
qjlyCBIuK/bFxZ6v9dgbdWSL367159e8d2bNn0JP7+orjKS05Vi5fXYba1ZF
sI+I7DPqGQHermbbJ412i3y5A9ciWpJTTMRuVlMBuiSxJz2kNsy9K/FOX5J/
U/jN5V13w9zrAq+UeV8o9T4NjfOEpdyGpQcg8qPozcUieCuhtaYhKynQ9fTF
PVuAzbl9aEtZ0BUAjrY7bxRVLoDEiZoTZR2ZamiRCQsZZfRMCTAzMqqNR7KJ
mDaJwLBcC+CJWUCWiaVAbLxAqv3gwMHjKM9l518Fzoue+32LA4AR8MFYTzec
WnFJyzs18GUSkVwtURvkKrNcbpYIHcWB/sp8aGlWZ15SZWxwyMVjQGac2PDx
cheGt5vn6f2hV05lh90ujbzTU5TIaCvF1mTQmgrmxDgZoqEnL4rRUS4dbKG0
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
Pbvf4/juG847bx7bdf3wznNfrQfUOG9YfXj9Jzec9yb63apOiesuzce3QsRo
hJlDsbEJIMUY6Ugg1QA4vIEmKbpbTRxA1hfiWspVZNi8lv/QKDUwMPMagZKM
JHW3yGn4ca1idsi4ODH8aG7iycIUOD4cty1Z9bCKwn3vveOxaV3Ugb1pRw/H
bN+UsnVd/ZkjHe6XGm5e8lzzt3U/dgIp6S9OTr93clpeC/SXThvedPL5+nNK
SewsqXOJ2bPE73ks7bNrkIuc5iV24zimyAbLnsOX8iuCBmIuIuKvwBOudEdc
KL65pyXkHLEghNOYwW7L0Q3WPZAO2vX0h1LsBLNvlNY9RO4SdJb0Zd8rCXJL
9zhVHHAFXZKoHmwbEpDG5BwAzgOLbNYonNSyJ9WsaTVNzxyQY1pkg41KFITZ
lNuW6FcdfKUh7Bq5OJJRGSOAZEjaC5S9FQAcRz/Oi8CxWUZUSr1jrvQzyuGF
87C+764Z/2UBrkNHA+7orwcex1G/AsoNhOPus32X3zcTvSie7UL9dsfrc8F0
gAw+J/CVjnGhCrlGrVTpVHK9XKoT801ClpKKITRVNKZENqdERF0+luh+yuPA
xgg359yQGzGep+K9zgPZ5ntqr4/LPu+Tey/v3wIyztefvH/g8w+2/vWdMzs3
xft49JQVcBBQKQHNQw3QeloEsHYxog24G5Bxhnn4IS5OT0XKsb0CVAe1u06M
7TWycWYuYVhEfWRRTil5ViFrUiubs+inrfrpEfPsxNDsxMjEsGl+xDpv0vHh
0Fv793p/tTN079fpJ094f/ThvU8+gpw5UXzsYIO72+dOTu87Of3ZyWnHn3+z
f/Wfz+74LPn2RUx1+hCp57EIZ5dg7VrqQzl6SY21m8h2PW6U1tiZdAOW4aXq
Tsfk+Lh++srHTk6H33XKvbGnwu9o9IkN5XdOQ2JvEuqTh6jtcxLkCL1bhaxV
o+qs5HZADbetkNtSwGzIQRbEtib4tycF9hfES3G9GhZuVMGa0Qun9fwxFWNI
Qh4W44aEGAmqkdlVKuyr4HcUw/MiGu971IVcxuff49QmqLuKNdAKAI4KBjFT
oN9RVdNrTTqtGTR6Dh/9jVH3PyBwgM4EHw8A4iivrTh3h+tZYedfDo6jwQF5
xDExwaHEHHnnuYFEYMEJjmm2T8feyEDGVym0w7ahiZHhcYtJLxGApp6L6iW2
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
fG78twEHhyEScGSQcdhMnkwiB+lmamJ6cf7B1MgYyDjTtqEJvQ5INQ2DqCAh
VIR+SmsVtbUMU5Wd4nUuzftCus/F81tW+Th/eWXn514HNwcc23nrwIb7F/YV
hVwpCbtSF+eV5XeO21XC66rI9rsc5LK/LMyvIz0OkhTVlp8c53NFAG8bqMhu
z47F1Ob35MSy2yuxlbntaVHUhorm5Kju3IyCUH9IUkLkjet3Llz6zY9+dGjr
ttXvvrtz3br1qz5+57e/Xrfms1++9urPX/rZz378k9deevn1n73y2o9fev0n
r/zq5Vd/8eprr738ys+cfhzs45t4L6K/qYkyAFNQ6SwESk6lKpnM5aFEXLZJ
KTGqJCa11CjhjaikMwalkUcHcmtUQp9RcueUnAda3pKO/8QktdsUT2zKRxb5
vEE6oRTYx632McuSUQ3AGRHSZ+WcRQ0fWBgetHGEhx2szRmszYJXpt1zO3Lz
8OZre9dFXToQffHA/Qv7wTcGrNyUmL6oFuhomBERa0Ens09Y7VadBNUrx/Tx
+1u12N5pFlbaXYsvzcRVZJGbKrjQFiObsGhRgYyzOGZdmhhZHB+dHR4B4JgV
Gq1EyX7KC9AFJDSZOEgCR3CbiqM5IFrhiEMFoo4HEhOLznt2b+X/dB2///bg
4DHk58Z3ZBxADTA4YqHMMXJgcnxqbmZ+zDoEwJm0WIFUA+DogeFF9wJ5Dy3J
qI4LSHA/A9KN77EdoCEF6cZ1+6eXNn90/atPvfdv8D64IfHakRy/MxEXdt07
twNdmQArjknzPpfrf93v2NeIkuzy8GBAhO+ZI22FKcA0tWTH9ZekNadH0ptL
eV01nWlRzUnhxNoSaH5aa3pSfsjd/OBAv9Onzu3++q0f/WTrqk83fPDx+2//
/r23f/9TJ6c3fr5MzU9/DP5/+fWXX/v5T1/5qdOPX3J66dWXfu7k5PTKKz97
5eWXvtq+5avNG+8H+NcVFQnJJMrAAA2JoKAQMi5DxKbKREwhj6qW80b1ylG1
zCRkAXCm1KIxKQNorQcG0ZiQMiVd3iNgQSscFtGXk8ukFYCzqFfah012i35U
yFLh4Qos1ECBD7EGh9monsKY9pwIaEl8UfjNOE+XwPNfX965yv/IBtf1f/Lc
/WmRv1t7Slhb+n0+tNE+aXpilD02SKfEjHEBdUpIe6wTjDAxiJLUhqg7rIai
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
zgfV37hel55eeP78mR3bty5ctOiTieNe/cdLv/vDkz/66Z//8+cbZi/qKKzs
zCvfOmPhB0+++Pdf/PHpX/7mx4/+4LsQgh586EePfPc/vvPQjx955Dc//OEv
Hn30Rw88cHLXrtJr11qLC3evXP7BC8+/9de/PPfrn7/+p98vnPDRa0/9bu4H
7xxdu+LYulWCvKxbNKGqKJEU5YXNOk1thb6pZoBxmDqbb0ajFrXmi/4B1Izb
jGHMbGmvlxRn+BXtNcmHenQdxpJrVce3ATtkdZbk6pGcrXNrj66xFJ0f0NZ/
8uTjK9979tyqGWUnt9We2yPPPUs2ZLtbsp011xwlF8x5JwzZRwPteXhVKigg
KAmIyxx1Gc7WwgGHZJgz3/XZb/mxQT/Rw1FRLxFg7D6nPeqhARwwnb6gHwT4
ACnACxTb8BsCO9EEWSDYgeMjZEH7D1to8OH98N+DiWb/q4LLO0w5wrgjgFtD
GFz59hhFxBgi6LD5MctXtwG72Y+Zgg5LADeHcVuItEZJR5iyRQg7vx9xwnfA
orSji4bvg8HbQPBf/o3gfHUVUJn0XleAUWMArwGjoTAcKjSINhEvGwYr97hA
EY87xnrBaHoCvoGwv8/vjrvwCGH0GSWEsEZTdqMz47Q066zw+rGO1MPNl/YX
Hlx/ZvnUXdPe2zLpzXPrFxxaNrMi+fBnbzy3YcoH4/72m7lvv/jsDx/IOLhl
zNO/mvjiH9998mfHVs2BlwCl1eNfB8fZNPH1nTPHnl0759TqOfkndhafPVh4
NklVU0QrO5wqMbBjEbaqW2qFlaWSmgpJZYWitqY1v/DGyVMH161fPWvW1Hfe
e+uZZ5/+8S9e/q8/Th71Tuq+Yw1XsrOTTm+dNH/jpDnzP/z0pT88/ZMHH/kR
FG8PfvfHsP3OQ394/Id/eOzx1578040jx8suXREUFa349NM3n3rqk1deefGX
P5/y5mvLJn0y5oVnV03+5NKeHXlnTjRmXu8h7KqaCkYh43Qql1Lu1SgoqfB2
0G/XGQd7BuxGc5xjMZU8aDd2E2ZjfYmhKnfYZW5OORKS1JqKrzae2yu7fsrV
kKtIO3R19SdlSSsK9y373CZIXjfz7MrpWftWATtlJza3JO/R5Z22F583Zh3S
pu3RZyQp0pIi4hIwKVdzVkReFVbUcLLqIQo9W2eAMQx4bQDOYJAeCnsGIl5Q
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
YZ+FhA7Xp5uEl/gFtUA9fjcQEXPjQEfcQwAp3SzVzdI9nBOx4yXRPeCJV6Mu
LJHfHd0ujFePG+fV6yFAERLKMEuYMPMK4aYvZYZSjQMizBoQa9H6bHq+fhsp
3kDoQRg2PVRoPDge49dT8L/QvwrOyHLu/ONFoFSz20gCc5J2gsFJHpwoy/ED
nTEfC4nmfnCgRQJwwOIh4wA7PfBB0Dj8sR6DklaLaHk7IajX1xYqi9MVhanC
rOSWK8c6rp0EiHTl6XhLafnZ/aWn92YlbWq8ekJbnlF4fGfRiV1QoUHBBi+B
ByUtnLxl6gcbJ7+99pPRq8a/umr8PwCirVM/SFowKXXnuurkY+ryfEtzFSnu
oJQiRq/wWLROo9qskFBGs1YodWgMyg5RVX7xhHc+ePKX//WnX/3m6V/+5plf
/e61Pz/7zl9efPvJZyc8O2rWP96f/vKb80e/O/b3f5nx3Ki5o97O2nP4wOxF
WyZOX/Dau5P+9sLsV1+b+w/g680V749Z8+G4hW+8Nfn552a/9fqmWVOTVi4t
uXyhKT9TXFNqELaReiVfz0DbC7VNr9cbsNsjBAHg2LU6l93h0Kq/6AqzOtkA
abQ3FnWmn9QWpnhaiq6un5u8YmbqpsX15w9VnNrbcu0U2Vpyfv2c3KR159bM
LD++OW3rvIsrJ11eM0WUsnfYo2RqUhtOrjXkHiMqkoPtWYH2LL8wLygv7TU1
3iRFEG16cFkfo78dIm4GKYg2g0FXf4IaHpz+gGsw4hthJ+Z1AinATojB+W2Q
xkBwEIxpIMzdjAUSpNwT8DIioCYBDo8VngDHAeBEGcgj99TFQDC5h1LMCWkF
wgvEFisPUULWe+BYDAgckw6BY0XUQAJC7GBWYAe2I++BCwyo+TeCw6/xrko8
/c1mJXCMJnCGIhgIOB6KCjCuiBeN0cTROg8cBFs+TgIyyNzddLfX1ctBo8QO
RYOQN7t9HqhyA6SNtRnRGTAovVo0b81QV0x21PqkzS5BNdFYiNXnY02F5pps
ad4lZdHVxitHVcWpmtK05tTjZad3gxlVnttXfeHA9d2rji1DC7bvmDV23cTX
Frz/3IxRT0175Y+zR/91zfjXT66Yl3dkl725mhI00TIhqRDSOjnrMHgxM20z
ciRlVulJs0MnVbXUNS2Zt2jyRxMWzPhs/5Ydm5at2rxk5cZ5S5Z+Om315Jnr
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
xbi3jqyaX3rppKKu1CpoNYjbHXaT00O5fS7KTRIU7nSSLsbJkISHonGLDTNY
KQvmNGO41kIZ7CzOgAdB/QavglwExdJ00OX2OekAzZgUctJk9GB2taCjuaIs
M+XihuWLqkvynDZziPN4nETY74tFogGfH7wMvgm4sw9zeIxaRiMNmBWdedeg
EfC2Z2nzD1UeW6ktOFl8eG3rlcM9ug5bdTbTWpq5c1XZwY0Ajq8+nS47335i
VW3SkpZz28i663RjhiLjaPaO+baS82TlxaJdc8r3zlVc2QbIOEuOEvkHuapT
Q8L0u4bKPpto0G295cfRWCeL3Q0zd8LuxNgNDXQMhTlwFtSBcx84Q0EPvITu
D/UxIJRiOAQOYsdLgRKmgHBAvcoMBh8fr3v4JMZlRsDpvi+zAB2J0c+vUWIk
1M5rZJSnOwHaSEfBl25l4/sT7v8SUhLKSpiJM2tZk4Yzar59cJDjADige6Yj
ViTAcZhNdhtcRYnHdoQCYbAbv8cH4HT5A5BxAIEYy0W9LOAAQrNSnagQBYGf
AhFDIf/n8Ugf50IzB3xo+hPqRgj6eyAThYNdPq6Lc4M1owbKae4h9L24tteB
1oEJGoSsuo2RNZKCGntruaW5CMDR1eYY6vPMDQUgQ22uuiJDUnhZkJssyr8q
LkgVZCU3XDleeGzbxU0Lt017f94bz4z/669nvva3tRPf371g2vENy7LPHtE2
1YacDodVh5FWJ0O43BTlxDCHBVoHmsBZ2uV04KTNwdhxMB3CYCONdpeDCvtC
Aa+fIWgX5UT3g0eiUX8w4vMBOz6a8pI4SxFgpiyBgxkZZBIawj7h8NJkkHXH
QsFoMBDk2DDHwSmCGjVKkwGbQV5V5FV2aCpya5L3m8vOyzP31p9Z33Flb0vK
gcpTO7p1HTF1O0hfnF59ape15KqnIXNAUYEVnpFd3aPOPWUoudSjbSBq02wV
l+tObepXVRIVyaX7F0iubCNLT7sqz3kqzoSbLg0Ib/TKi7ptwtucYzjmuh0g
AJxbAepuxAPsoOEbv2sIPfwULRI1EIbQyt4Pzgg7/wQOT83/PzguvPeecSAT
ATfh58Z8Ezj/BNEIR/z/4qfZjMy0QRN1vjwO+6hHGjfz8lmNSBbDt12qATtt
nTKeHQAHsSNWgOQytU5rAnAwO4nZcQIj3ZTL72WDXi+U7SMCcFDR5fVAwOFn
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

       "], {{0, 183}, {275, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Automatic,
     ImageSizeRaw->{275, 183},
     PlotRange->{{0, 275}, {0, 183}}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.724364044126698*^9, 3.7243640691501303`*^9}, {
  3.7253590967412295`*^9, 
  3.7253591076568923`*^9}},ExpressionUUID->"3578e120-bcb1-403d-9bf3-\
c35c01295620"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
80MbCAaNoHhx7daxAwmdRUuoufYV8j/Dqx/c
    "], {{0, 183}, {275, 0}}, {0, 1},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{275, 183},
  PlotRange->{{0, 275}, {0, 183}}]], "Output",
 CellChangeTimes->{3.724364069923537*^9, 3.7243680530130243`*^9, 
  3.724422655860819*^9, 3.7244275294629745`*^9, 3.7244525915224485`*^9, 
  3.724453597713225*^9, 
  3.7244556608387933`*^9},ExpressionUUID->"f1be2f4e-cceb-43d6-94c9-\
449942e622cb"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7243646857026176`*^9, 3.724364688810651*^9}, {
  3.724364958448799*^9, 3.7243650113531585`*^9}, {3.7243650823585105`*^9, 
  3.7243651201057215`*^9}},ExpressionUUID->"69da2340-2caf-4343-a514-\
b446729526ef"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7243649834729595`*^9, 
  3.7243649834779725`*^9}},ExpressionUUID->"885e373c-381a-40a1-9ff0-\
98cc4143a561"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7243645302191105`*^9, 3.724364740697751*^9}, {
   3.724364773451947*^9, 3.7243647787955666`*^9}, {3.7243648247018003`*^9, 
   3.724364861051697*^9}, {3.724364938145207*^9, 3.7243649680248957`*^9}, {
   3.724365127238693*^9, 3.72436514731514*^9}, 
   3.7244283087340555`*^9},ExpressionUUID->"1896fdac-dd65-4187-bc35-\
8755bad5df23"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"edgeTrainingData", ",", " ", "20"}], "]"}]], "Input",
 CellChangeTimes->{{3.724364975808702*^9, 3.7243649758122354`*^9}, {
   3.7243654724034114`*^9, 3.7243654831645365`*^9}, 
   3.7244529044634295`*^9},ExpressionUUID->"b257e50d-d1a8-491a-bf10-\
54a141dd9642"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJydkk0OwiAQhXmuXHoEvYVbl25rPEAba+MGk9bEeHuLZYbHnyaSUKDfzJsf
2HX35royxkzr+dO0z8M4tq/TZj6c7XQbbH852kc/9OO+c2ZbP7MB0OIPTOEm
qrh++gujRBeSYN07gC/4Q02GIRhaZIa9byxoDLdDlUODyFCMUKtB4hCJu0T/
IBG9rlcmJdYP8dRMi2JldZEGsCIUgxvGMbx+qbdBtVRTVH8Rpxkl6tHLzdyR
rDGnctLBr70SIs0PdPu5FuTGStEoqZ8ctUTEv4rD838D0iYNgA==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"ship\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyFUkEOgkAM3PHk0SfoL7x69IrxARCQeMEETIy/F6TtttsFNlnSZabTdnZP
1at47EIIw378FOXn0vfl93YYD/dueLZdU1+7d9M2/bmaaEfatBDW1waONQLG
taQwAWBaXhiMcqCIqS5hwoBRjbHUlBT+pw9QvSH2If0gSQo6pplJyOMBcWMu
AIcTQWna4ZUN7LGfkZOswcojZYIMa2Cbbe9JdYEMnLRJvphyJvRPxXJTO6Xf
iC+8tFnZGuopsIa4WUUf8fqX2ofL5svOlxf1LI4oTkZiw0f301b6rx+QFw1u

       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"frog\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJylUzEOwjAM9DEx8gT4BSsjaxEPaEWpWIrUIiF+Tyk4PjsFJIiaKPGdfbGd
rqpzcZyJSD8flqK8brquvO0Ww2Hf9qemrQ/b9lI3dbeuHrTla44D46dbG2ZE
NP2NYxiGZmZbPK6cT3jQ/4LD5f8LDsOR4aAwgKSsk01AMuo00gAX045Pigvv
OgijU5UD7nKgW/GFxc3UMraJ3kXTgDUIQSa5cGbWSvbSM0DyVFUuF+Ay4IqS
HExcAyWfpJL1j7kezVyCs766aI64fxKOgLiZht8Qwj8zDd8BtTMNfw==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"cat\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztUDEOwjAQOzMx8gT4BWtH1iIe0Iq0YglSioT4PYX2Eqdp04EVS4mS89k5
51Dfy2YjIt2238rqWThXvc67/nKx3a215nqyD9Mad6w/bftxiUBSgIrQEiHq
TRSJGXL012CFzuiVWOgAedBAnAT+Dfid9YhaJs/E/FgK5kN2TQiv4fEwOdGg
fIyFGkSDg5UIItDSCgIfBCDHJIn/tJnsy/iV5/zzfJ7+Yx1vfMYNLg==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"horse\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyNUzsOwjAMzWNi5AhwC1ZG1iIO0IpQsQQpRULcnhY5iePYQKS2znuxnz/p
brh315VzblrPr65/HmLsX6fNvDmH6TYGfzmGhx993A/LsS09fy/QslhpCF41
dUw5gJSBLkF4coUMh3QMGWL0BwYYjNYdEhTasGug5GpeRpBFtQHwnZd9Kzt9
JFAsPUNr5Eb8dEs0/9QmcFxp3A8eNi9Figu/oQqf68ic5POoqUKUeOLiVR80
SKXElJkMHzn/6Zba2g5WxXNVY3QswBstZw1I
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"dog\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUj1DAyMiIX54BvwJGMMJvAAEH4FQAsRmndvzmopmCVQIMMAxihEsgLILy
UMVRFOALSkYC7mVkwBsRMBlGHACnuaOAeAAAiVEM6w==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"ship\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyVUkkOwjAMzHDiyBPgF1w5ci3iAa0IFZcgtUiI39M2CV6apCVSNns8Gds5
NM/qvjHG9Nthqer3qevqz2U3XK6uf7TO3s7uZVvbHZsRtg+TBsKUAzSSfgEt
+wNmEYFVoHgq8mS4kDmv9EtODRjLUCKANCqB8QoB58EQ5um1EMR6hEQM28Wr
Kb8kmDr7ywukQkmPMlgiuv46PYNUsaQNio13FVy6z1+1J9Zk6adIPd6CGY6J
ozuTQyuhtIeHqD0v0vzrV59/xu9r8gVXBg1f
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"dog\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJydUzsOwjAM9WNi5AhwC1ZG1iIO0KqhYilSi4S4Pa2o4186gKV+4vfsvNjx
oXlUtw0RjdvpVdWv0zDU78tuWlz78d71qT33z9Sl4djMtP3ysMH8gazBECaz
qA2Bj8fMiPE5DyQEKl47wS78hUNn9ri4fsVRxpH9vFjOP39c7fjM4NI4wFTW
FbaAF8hxQ9k1hIvs2GZiibrBgQTls9QVgcX9pcJBRL483PWwwbcxgGmEji5o
NjCtmofDKKh0fCmyZRzEQ+Gl+SmAKYAMjJkySW9VOmnCUfgHzhINjQ==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"cat\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzNUkEOwiAQ3PHk0SfoL7x69FrjA9qIjRdMqInx91aBZRdo61ESWpbZZWYW
dt29ua6IaFiPn6Z9HpxrX6fNGJztcOutuRztw/TG7btP2jbMfx0AZuEwZ+Bf
OBbQKRzfMU2DhfNRg1PoVyUcdmoo74askhrhAy+fcvUi8tZyfmICH2YMUIVl
77gQPgW6VBiI50jjUFeu1Itmyr4XPpPyWF89jSP2z4ogPAj9qTNcw5TyLqCy
xQuPOrXcrHtQa6EXzC/WlIL4WqN5/XsDAToNZA==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"frog\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyNUssOgkAMbD159BP0L7x69IrxAyAi8YIJmBj/XtbtY7oEdV030M5OZ1p2
zb26rohoXE9HVT8Pw1C/Tpvp5dyPt65vL8f+0XbtsG8SbCt/4rSnH+tz2nl9
QimgB2s64fPS+7aFCElinsgjMS9CsBAFdElLEBb9s3yWzlo2e5JCCJQwA5U4
nNGGEOcaTmVurT+qJEM5aMc8xGZ598NM4b5pdBV4gDD0aSmboQHCgEN9j/gs
Sn3Zo942YhlsOfTQeuyh9YBBKoFV8+AIZpAYPNKPxRwx5bv2GXyRP31nDt/P
Qu0/qRZAXGBmSlVIcSlF3sPKDe0=
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"cat\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJylUjEOwjAMzDEx8gT4BSsjaxEPaEWoWIKUIiF+TxOa1I6tZCBSU0c+313s
HIZnd98YY6btvHX9++R9/7ns5sPVTY/R2dvZvexo/XEIsP3ytRaagBYCVURI
1inwN0VMtilqJgICcUl3VEXK6OcVpslSkt/1mTTSBrUs+Vgsl+LZZumEdpr2
gwOKiDUftAsJWcwvFaw1KHUpZ47Bb00kGYrgeG8EjcjHaqOmAZaoDRnKWwKL
5eT4vBWHdPiqRfJC5A1zNfml/Bc4ig1X
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"bird\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJy9UzsOwjAMtZkYOQLcgpWRtYgDtCJULEFKkRC3pyHNx7GdblhqG/c9v2db
ymF4dvcNAEzb+dX175Nz/eeym5OrnR6jNbezfZnRuOPgafvlWQuUI2GtsnBo
0cCjxIbhTDiwcyI4B11vLXsmXe6I1aciREnM9AonhF8rSPCickmpAEJBwLA/
aYo4Ri2QJeImuAPtiLVIChBoLuI1gePlH7JTunAeaZg2rgr8DVcIyA4KrhBw
1SBfHXWJusUXp4ANSw==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"ship\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIUDzRgZCSoAAooNYgBZgyycZiaUGRwGgo1Brdd2IzGL49iHEIexf+oQQFm
ohiDogfMY0T2LpqD0XhwG7DKM0I9DXEozAK44yCaGVCDFck+Riw2oliNGskI
Bpa4whp4yOoZ0fQjBRlMELtDUPThcCqqVZg6sXoS1XNIALcWPABZLyMmgJqI
K98wMjIgwhAAXcINgA==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"deer\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxtUssOgkAM7Hjy6CfoX3j16BXjB0BE4gUTMDH+vcBuH7OQwAba7XQ601Pz
rp47ERn301HV38sw1L/bYfq59+Or69vHtf+0XTucm/naMb8iyO90YnrSp1hw
jgr8e5VPAMst0UPjyPFUqz/5gXdQDkidlhS4g6Iocsg7fiYa8rCJMjBNFqYN
XDMzFPBRLRYtYopJkNTMXECFXuHh0F/1YaUtBhPKqJMjXGxzInJV06AGmy8G
gK2NiKTZn2A+XFpwAVwAZkKgbB1swYJINJ8DlB6ZAOILGBsX/D2wWp2Ir8ps
VJpeGw1MDs+Dw1FrSDESm8rbi1W6oFBIZhh/b/UNww==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"bird\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJy1UzsOwjAMzWNi5AhwC1ZG1iIO0IpSsRQpRULcnrY4jvMSEAxYSuXUzvuk
7qa5VueFc25Yjo+qvu+8rx+H1bg59sOl69vTvr+1Xeu3zdS2lqUBWXMOzTGF
1AFtRsxf23lFAJeHITCHI5LldAk+hMAiJRyIUlGok1RQneni60hPjsgsyDFy
X6kGbhaQXC9MvdCAIj7dhOojD0GIULNJBTUDQAA/7vFFf2Ky1I//1qUJ+UfV
Wwz3kesnAp4pO8elPySgojSOhuVzvDkMjQTiCcH5DXQ=
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"horse\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJy1UjsOwjAM9WNi5AhwC1ZG1iIO0KqhYilSi4S4PaFN4jh22LCUNvbz5+Ul
h+7R3DZENG/9p2lfp2lq35edd67jfB9G15/HpxvcdOy+afuwvAF+kTQslnlk
GcdRhMsCs5dIAqDqVneJglQVOCcvg9gEBGmLHE+tIDI5iowxmI5ItbVhbnWo
rBZ6IvkotVl5lDXMET9psQ71a1WqJl6SYQ1HnipnR4Ywx4e2/LMPEHHdAlGc
eHsapHy+UK+kEaaRetPi9BGr4dYR/oYrKmZlwj/Tkg1y
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"automobile\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQIU4wKMeOQQ8oy4lTGCAZTCUMaIVTESG4vBYEEkZdjtxHAhHjfiNolEFYQV
YFWNcBsjlMsI9yVqIIAloDReK3DLYzgZ2QZGDICqEre/8HudEWdCQTaVEdMY
SChANcIwisFIYigcuBAjzBJGBgx5RDhCWIzoQYBkODIH3QVY2AwoRjHgD9sB
BwCMKQ1q
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"automobile\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyFUjsOwjAMzWNi5AhwC1ZG1iIO0KqlYilSi4S4PWnixo6dCEuNEj9/nl99
6l7NY+ecW/b+aNrPZZ7b7+3gH/dpeY7T0F+n9zAO87lbw470eYNjk3frA+ID
6wVgHCZYOENwutKpGgUglEQB5VRZQQQlVltmKMccCQFH0ij1GRAt7x6r5qLo
qdMQmntsCZMsvCAdyqPrbqq9wgV79qRfqHgnnQCja7m2k6VMJy2fpZrpgDy8
otPWuILLlSOceBiWW65WlhcxR/gNlZpRg5MCp1K6uJ7mr5VoSsHEehe2T4Rb
9AfnwA2g
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"deer\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyNU7sOwjAM9DEx8gnwF6yMrEV8QCtKxVKkFgnx9zSQxL4kpbhqmsfZ57PT
XXOvrisRGdfTUNXPwzDUr9NmWpz78db17eXYP9quHfaNg2396wzTI3HuR9r8
WJi6gTYhemTW6srRYwRGRnhAkOeftuAA/EYsHjvEfFYgcURL2Wktg8qkmJl4
bQskI4Ce52X9hif+YmD9pumbogWBCbvtJ5gA1Gl/ryAoXhYTP5bRAWNtsjoi
8MHy2nQ1Q8Rra6V5Z+iGh4Z2lCpOnIliAkHlzCAkxiA/8zvl3mAVmXeWRSEt
b2/KlA2M
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"deer\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJx9kk0OgkAMhee5cukR9BZuXbrFeAAISNxgAibG2wtx2r52RBIGpj+vXztz
aB7VbZNSmrbzUtWv0zjW78tu3lyH6d4PXXsenl3fjcdmCdvn9/+DwvB91vzZ
owGFX2xZhP2iq7kgPfJZcfivakcaMwYeYtCVutN6gPWNxBNAqZkzvIhrMxiL
IQeInwGrm+TOB7K6GcXBgUtqvj9mUDjMbJpIRd3E+yXAI8OnkyWmi2TwE6lD
gnXMVwDGSENQvoAOqsvnLCDwmBabcSCjJHpXU/71xkis/4BHL73BkGlRtOIs
SDAbsv8Ds9ANlA==
       "], {{0, 32}, {32, 0}}, {0, 1},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"dog\"\>"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7243654837659135`*^9, 3.724368322167345*^9, 
  3.7244229354999623`*^9, 3.7244278096008177`*^9, 3.7244526413058057`*^9, 
  3.7244536163090982`*^9, 3.7244556608578687`*^9, 
  3.7244601801413045`*^9},ExpressionUUID->"9fb4a3f2-ba83-4822-9220-\
f109da2bb90a"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.724364898233795*^9, 3.7243649205609922`*^9}, 
   3.724364980712761*^9, {3.7243654254006743`*^9, 
   3.7243654419936185`*^9}},ExpressionUUID->"cea46611-bfbe-449c-8af9-\
5b19547bef0a"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.724365499564741*^9, 3.7243655079485407`*^9}, {
   3.724427219674281*^9, 3.724427225234725*^9}, 
   3.7244284537578163`*^9},ExpressionUUID->"1ca9ce7c-eecf-47f1-95aa-\
4b18d1888508"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Train", " ", "the", " ", "edge", " ", "detect", " ", "CNN"}], " ",
    "*)"}], "\[IndentingNewLine]", 
  RowBox[{"edgeTrained", " ", "=", " ", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"edgeNet", ",", " ", "edgeTrainingData", ",", " ", 
     RowBox[{"ValidationSet", "\[Rule]", "edgeTestData"}], ",", 
     RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.72436553190557*^9, 3.7243655402347236`*^9}, {
   3.724368153208335*^9, 3.72436817935295*^9}, {3.724432962770279*^9, 
   3.7244329633618517`*^9}, {3.7244339179469013`*^9, 
   3.7244339196664495`*^9}, {3.7244345274851456`*^9, 3.724434528643916*^9}, 
   3.7244529067881355`*^9, 3.7244529438486195`*^9, {3.725359117036642*^9, 
   3.725359125917038*^9}},ExpressionUUID->"b1935dca-f025-407d-84ce-\
d205535d9371"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 3, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {30, 30}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 30, 30}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {30, 30}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 30, 30}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {28, 28}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 28, 28}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {26, 26}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 26, 26}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {26, 26}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 26, 26}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {24, 24}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 24, 24}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {24, 24}, "$OutputSize" -> {24, 24}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 24, 24}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {57600}, 
               "$InputSize" -> {100, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{57600}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{500, 57600}],
                "Biases" -> NeuralNetworks`Private`DummyRawArray[{500}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {500}, "$OutputSize" -> 500, "$InputSize" -> 
               57600, "$InputDimensions" -> {57600}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{57600}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 500}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               500, "$InputDimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "airplane", "automobile", "bird", "cat", "deer", "dog", "frog",
                 "horse", "ship", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"30\"", 
                    "\"30\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"26\"", 
                    "\"26\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"24\"", 
                    "\"24\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"57600\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{405., {143., 151.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7243655603574924`*^9, 3.7243683532427464`*^9, 
  3.724422966238752*^9, 3.72442789296422*^9, 3.7244341569790893`*^9, 
  3.7244347559014874`*^9, 3.724452641404564*^9, 3.724455660906975*^9, 
  3.724460422668935*^9},ExpressionUUID->"875a616e-d358-4b61-9032-\
9f1fc5712234"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7243656811688848`*^9, 3.724365681800565*^9}, {
   3.724365851793377*^9, 3.724365906859669*^9}, 3.724365991725396*^9, {
   3.724366085329712*^9, 3.7243661908681755`*^9}, {3.724366232915574*^9, 
   3.7243662453536615`*^9}, {3.724366277715727*^9, 3.7243663090500035`*^9}, {
   3.724434362587366*^9, 
   3.7244343635544386`*^9}},ExpressionUUID->"4bc52522-4ffa-4843-8e4e-\
e5eacafd6623"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ecm", " ", "=", " ", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"edgeTrained", ",", " ", "edgeTestData"}], "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.724366006065496*^9, 3.7243660060695047`*^9}, {
   3.7243664219592485`*^9, 3.7243664312033153`*^9}, {3.724438271710808*^9, 
   3.7244383025504627`*^9}, {3.72443837715905*^9, 3.724438377718149*^9}, 
   3.72445294686965*^9},ExpressionUUID->"1af8bf08-069d-4cd3-a03c-\
c0cff9189f47"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierMeasurementsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                 0.4746151541446917}, {0.7191592194171378, 0.5062062867304069,
                  0.8158644505878024}, {0.47333333333333333`, 
                 0.7727052229508918, 
                 0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                ImagePadding -> 0.2, 
                PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                PlotRangePadding -> Automatic, FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Net\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["10000", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                 0.4746151541446917}, {0.7191592194171378, 0.5062062867304069,
                  0.8158644505878024}, {0.47333333333333333`, 
                 0.7727052229508918, 
                 0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                ImagePadding -> 0.2, 
                PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                PlotRangePadding -> Automatic, FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Net\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["10000", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["10", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "0.23630000000000001`5.018583754637174", "\[PlusMinus]", 
                    "0.0042482979890281717`2."}], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel", 
        DisplayFunction -> (
         ButtonBox[#, Active -> False, Alignment -> Left, 
          Appearance -> {
           "Default" -> 
            FrontEnd`FileName[{"Typeset", "SummaryBox"}, "Panel.9.png"]}, 
          FrameMargins -> 7, BaseStyle -> {}, 
          DefaultBaseStyle -> {"Panel", Background -> None}, BaselinePosition -> 
          Baseline]& )], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierMeasurementsObject[\[Ellipsis]]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.724366567338651*^9, 3.724368412117773*^9, 
  3.724423026064252*^9, 3.724427968637169*^9, 3.724434292144458*^9, 
  3.724434885895003*^9, 3.7244526417765813`*^9, 3.7244556612659283`*^9, 
  3.724460554989452*^9},ExpressionUUID->"11447bd9-a79e-43a5-8849-\
2d1d8d643342"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ecm", "[", "\"\<Accuracy\>\"", "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.7243664433610725`*^9, 3.724366444875132*^9}, {
   3.7243665086575923`*^9, 3.724366525216631*^9}, 
   3.724366577093979*^9},ExpressionUUID->"7a3d0d06-7919-48ac-9e93-\
ce0abd3ebf24"],

Cell[BoxData["0.2363`"], "Output",
 CellChangeTimes->{3.724423026109873*^9, 3.7244279686888065`*^9, 
  3.724434292191082*^9, 3.7244348895985465`*^9, 3.724452642133503*^9, 
  3.724455661628894*^9, 
  3.7244605629192696`*^9},ExpressionUUID->"d9ffdc68-c314-42b8-8983-\
a8e7aee1a38d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Train", " ", "the", " ", "max", " ", "net"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"maxTrained", " ", "=", " ", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"maxNet", ",", " ", "maxTrainingData", ",", " ", 
     RowBox[{"ValidationSet", "\[Rule]", "maxTestData"}], ",", 
     RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.724368628040785*^9, 3.7243686436415854`*^9}, 
   3.7243691076264596`*^9, {3.7244272314269524`*^9, 3.724427240044337*^9}, 
   3.7244348963961625`*^9, {3.724438392439558*^9, 3.7244384094209075`*^9}, {
   3.72535913098098*^9, 
   3.7253591380242867`*^9}},ExpressionUUID->"55164b96-25cc-48ba-9fe4-\
01fe6f6b8b40"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 3, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {30, 30}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 30, 30}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {30, 30}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 30, 30}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {30, 30}, "$OutputSize" -> {28, 28}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 28, 28}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 28, 28}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {28, 28}, "$OutputSize" -> {26, 26}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 26, 26}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {26, 26}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 26, 26}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{100, 100, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 100, "$GroupNumber" -> 1, 
                   "$InputSize" -> {26, 26}, "$OutputSize" -> {24, 24}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{100}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 100, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {100, 24, 24}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                   "PaddingSize" -> {1, 1}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 100, 
                   "$InputSize" -> {24, 24}, "$OutputSize" -> {24, 24}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 24, 24}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {57600}, 
               "$InputSize" -> {100, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{57600}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{500, 57600}],
                "Biases" -> NeuralNetworks`Private`DummyRawArray[{500}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {500}, "$OutputSize" -> 500, "$InputSize" -> 
               57600, "$InputDimensions" -> {57600}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{57600}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 500}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               500, "$InputDimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "airplane", "automobile", "bird", "cat", "deer", "dog", "frog",
                 "horse", "ship", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"30\"", 
                    "\"30\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"26\"", 
                    "\"26\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"24\"", 
                    "\"24\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"57600\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{405., {143., 151.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7244386522170415`*^9, 3.724438914637887*^9, 
  3.7244526421756887`*^9, 3.7244556616690273`*^9, 
  3.7244605869553075`*^9},ExpressionUUID->"2730e219-00e0-42ee-a978-\
901c66d76025"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"mcm", " ", "=", " ", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"maxTrained", ",", " ", "maxTestData"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"mcm", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.724368628040785*^9, 3.7243686436415854`*^9}, 
   3.7243691076264596`*^9, {3.7244272314269524`*^9, 3.724427240044337*^9}, 
   3.7244348963961625`*^9, {3.724438392439558*^9, 3.7244384508788424`*^9}, {
   3.7244389427444625`*^9, 
   3.7244389653647227`*^9}},ExpressionUUID->"dbdf9446-50b0-457c-a28e-\
1e1519940ecf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"picToUse", " ", "=", " ", 
  RowBox[{"ImageResize", "[", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
xSqw+fTEl58cWZgaTUg2C2YtwjnN6ohTPo9ml85u6Na2DJwtPU+xOODXrNsl
i7CXVuGSbm3aqxScOIxjLXW0sNu91aXSuSkjb8Uh5YumhqWzIw7Jqn59xsCZ
lcwMalen1MswmePa1RnNyrR6ecbEW9auzCvmp9D0a4uQRyBHRnPAJHJ3V035
UEs9YRIvBdXyjzM51NJIqjDpC/pdLWYSJosYGfUlFJOAM/z6ldLAvCACLU5V
x8qpYmY15ue1lJREXrsDJlXchfXpbu5C/9LkAJhMjaLn0+viwrLu3gwPvXEH
TOblFuRml+Rml8fHZZWXtdTVdNy/G3PvTvTDB7EZ6UxEb8JkamZOZBINTFa2
9RY3dFR2Dtb1jdb3DhRWVlttxhdn+6d+y6Xf+nrfkx17H0x+erZ37DLgQj/b
0O9o1y/dspfbpgMrlb6BJdrXz/cXehtyYkNxLUj/JJlCSTIOmd+LSwyte7Xn
QFUCJGByoq0CuRsKCWDwLpAAMALTKRVvY/KnL480q+Ng0sidg2v1qwXwq2AS
8rhpkJ24DHCD1Li5TeEQzu8bBBcBJgEnuOqtKXj4wbfB5KFDd+bRgTcYOSgw
ICS99AECp/HXEfzRIH1omzpq6kh5RkJRSjRuAdxZVtG8S75kEU1t6Fac8lm7
dBor20YusETAJkziO4I3A2ceMn5o0U+01CffvjlQU6lfW7YKuE4JXzg5hGYR
LINbMLk6+AhMWoUreAvIBK6qpWmXjM8bHVgb7Fkf6hdOjBImQR1hMi38HpRz
sLkuKJJBJolUvo3JkbZmopBkhJFkHABJtbzsYmZmXXE+mASNETeugszO6grS
LRlkEjpZn58fcTW0Kpet4S9xZnrA5CLlJ+NpMYwgk3du3n2TyYjw1Lrartbm
/ls3H968HhYdlZTNZCfEpyJ3v8lkRWsPmKzqGmqfmO8Yn6pqavH5XZ+9uHhx
6PvoaOOrJweshId67vznFwcHdqpD+6lft6vjnNpFr3bMZA4GGqIQmBxvLc+K
vAkzSU0jdOmfb9mBJZLO630f6jiZFwSugB+OwVVGFQaTSaHvwDVhP8QNK4HQ
LQMkhMnAjDgD/CRhEjcF0joyTuz170Je4A22dGJ4gz0LNcvCZ6BGEmEUcUfg
1nCIFre1/HOnBmUU7acvTnqqC+NvX4G9pLox7Wo9h6qt+FI4GLTj5OANO8kf
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
zWJksa6/f21xfOzvf/LVocu8YVT91Q8+6m5qiH8Y/vTsYn9z+9nJKYLGptmA
aKySG3Rat9m6pTf7eRLT/LqCI7VoHHvDC5K6rqnylpH8mp6U7GpGUVtV01hp
7WBJVX9+aVdBWW9Z3UhpzWhuaT+zuC+3crSuh1vUvMCommRUTxe0rJV2C0u6
BPlt6/ltK22z2u5lc/+KeXDNWtPPYdWOocRXPlqo6pivapkpa5gA5HNrxs3D
z374839/8erHP/ubf/y3/+E///U//Mcffv03L1587nJuctcFdqN12+lyqtU7
FsvayFB7aaGZt+6U8lDrN8xiMGkUzvr1fItkwa/j7JiFPu26gT/p1676NCs2
yRR00q9aPLCJkHEQnFGI/XoByjfU1S5bwMEQVcScwIwLMeRRPj+yrZF4FFxq
/olD9XjLCj+JXDPT1xJ58/tjHXVOtYAz1atZm0LuRsaxCiZ31WvIOPKlIa1g
5lc/fPab//cff/Ob//3/+Pe//Pnnl0b+rF++vildg046V6ZBHZgEcoAzPfIe
GnI3mHyzahPBDCT04rcx2Vdf31RUBA4bCgrAJJYUkIWFhDoyJ42IJ6SVHhOJ
2g3JJTsJt1QrLkLurmGzuZOT4tlpzuigfHEe5TkpIpKWkB4Tlfq9d26TjBMX
Qwv0T7LBJCu/LCu7CEwi3SDjRCdlxqdlxaRmJdFz0rILkpms2HRmJC0zgQ44
C0srm0pK6iIeRo8NDD09ONh1Oc62tj68fDzUO9jV3vflFz912P16jVklVWrE
sumJ+cU1rd79xLb1IUe9tQzL53tm3/9E7jyll3elFbamFz/KLG6nsRsz85tz
izuZ7La8ovas3EZ6TkN2fis2acymFGZzRn5HCutRRmF3VukgvWw4vWiIVjLC
qJrKbZir6Oc2TkhqBrll3cuVfWushomMkt7CpummQX5py0J2+TCzeIBVPoKW
mdedQG9OYrXW9a9qfY9/9Lf/6T/95jf/129+83//5jf/53/+zcXFh3ubB0qB
1CRTLQ0N91RWGdbXTPzVpzv2PacS0QY0gkyDYMYqWUAh3jYJwCT15JdiwSyc
dCnmvIp5lPI6Ng212yCYd6nWwaRLtYZ0A5EEyajd+xbpsYMaSEXuPrZQI55o
qLxHLq1XK9h36pC7o0LeWRhqJ7lbuz4N+0r9YoZ0bl/LQcaRLgxAJ/+f//i3
/+F//en/9r/8+Gzf+tnTHeFsn1NM6aRjbcY8NwrYwCTqNQhEwMmIug8niT2k
ahMyg2byj+hkb10dUMQKaAScbzJJPcAYqOnEaibdvwMmoZPYX8bIDOJKfi8o
KiSkrqCAPz0tnZ/ljg0h4xSlpydHRuVlsWmpOdduhD+ITL0VEoWMExiZLICx
zMsrT0tn374bdScsPjGVmZlbyswvT2EUZOaVMAqrMgrKknOK4hisBEZ+CrMw
OpERHZtxKyRsemzmy09+8Pz0scfqUcl1MplhlatU6r1dA3O9g7MTU2tTE8u1
9b1zApf77Bdnn/+j4/Qnms1PlL7Xfcum2LzWm4lFDzKqozKrY7Nq01hNKdn1
8bSKpPSK1MyKxOQitJSM8jR6dXJGZVpWXRa7NSKpNCmrHtU8q6SPlt+ZkteZ
UdTHrBxiNY6yGofTy7tTituzqgazKvozS/sKGiaLGmfZtdOsyqm8qumC2vnC
uoWimnlW1Uxe00Jk7qOY3La6IeGabt+4+eHu5dcfffkPn3/1b3720394+eyz
TftGU2lNTEjoVHunX6s0S9csslVUcKt0CdKnWhuDozt0KPZtMqNgyiWnQoeR
N+mQzQEbRJ7m4izUbi13xi5fCcQcLpiEQvqosrsMnaSGzm1qMHloUnmV1IQ3
m2QJauzR8A9c+vHO+rvv/cXcQJvfKJMsjUInvUjZ0mWfculAx/XKFiyiBf78
4L/7u6/+3d//+Kc/fKaRLh74DSsj7SbOrJO3aF6cVI/1QyEJk2hxodfoMQ9A
Y299BRlzJDaSMBmo4HlvY7K/oaGtrKw+Px8NQKKIYyeWJFMXZ9LIw4wQw/g7
tzKiwgea6nEqoEge8CG/QYTajdwNIRPPz0MhBZOj2vXVsqystJhYMAn83vvg
Xuj9eFK74SfTU5lJCYzCgjpGdtmde/HXQiLuPkgMfZAYci8uJiU7KoUZmZYd
l5WfmldGy69IyimOyczLr2zNKaiLiEobG5l/fP5Sp7bMzaxL5RaexDIwwYeL
K6zpr2ubqmwYrG0YqG0Z65nVt82YGsY0NUOyyn5xQcdaStng3YzaB/TaxPz2
aHrdw5SKFGYjgHwYw06ilcclF8bEs2IT8hJSi5JopYlpJcmZ5enMujRmLVpG
bhOjqJ1V1ofGKO5JZ7elspvTCptpBa2ZpR2smiF23UhB3XhJ00zvtKZjVFnf
LSyqX2CUjNGLRrJLp9g1c8zaaVrFWEY11aKy2+7TaoqappfFbp3t2L/zYv//
o+w9o+MqzL1fh5OcBDAGd1u9jaTpvffee+9FGkmj3ttIGvU66r03y7bkbsCm
hx4ggUAoSUggAQIhIYVAAslLiO4z1rnvul/Oh8t61l579gwjWfPb/zJ775nr
T99+8Jl477jf4olVN62Oj19cnLqyPgU6tjXVd2NzBtRvd37o4vzAzY2ppaGW
7YmurfEOqNtQvTfj0UsLQ16tAJhcHGrbmuqB3g1MgnevjLSAd8Pywkxf4u2j
uRHo3Zdm4pujieu7V4bbAMi1sa7La9ONJV5M2vH2qsILi2OTPY3TXQ0b4zFg
cnemC7x7Z6IdwmesLvzTF2/v7//1xaevd7WWTg62JBr6YPv5ke6N7lZgEpQQ
CPz/waTFEjSaShzOg6WIRJZQqE6lqsztKbRYvVqdRwMKqYEtd0Z5cCmEjs85
6DIAHgWRxSdgix3Wg2vKDt6cPMiTTrWKlJNzwCTo5GBDzQGTbCJJLlAAhwfe
DUxyWFKjzg5YyiSm0khLY/NAaXk0XNJUWNzo9FeYHEXOYKXRXSwz+XgaO1tp
YamtbI2No3EavRVaS5HaGKyoaou2DhaF60orOmL9CyZfva0oJnfUBmvjvspB
oaFYZgz7Srv1vnaCuDCNaEKwnERZmKQqYhsqFN5mjiEis9eAkxJ4DmCSznMQ
aDqO0E5j66ksLQyDawAsySwNiakms7QStU+k9AjlXpHKL9WGYIRKH1CaWDcU
QjMyeqoN7hqTpwGqut7dYHA3Kcw1Qk2p1FCtdbUZfZ0aZ1RirpXZ6+BHM7Ul
AkuV0ttsDHU4S/oClUMNXYtDkxcnZnenpnfqazutem9lUd3cyOTuyhygcn52
JB6tubw8eev84kNbc5Dfrq9NLQ60JL79cPp/ziXbGG4D3sxiGng35Mk7QCYO
uGyMtwONYPRQiy4vDoNUXpwZGm2p3Jse2ZnsXxuObY537S2NzvW3gF931hZz
cNl9TeWQJ6d6m8bbaxYGEp92dX6yI/Ge+XjbpcUR0MkPf/kKMPnglVWPTRat
LYh31GzFu/bG+7f7O+ZbaoA3IBDUElagdAOTB5T+r979vzAZttpgCwDpUqlh
AEtYB80EOQUUwaMPTnI78G6o6gcF50A8Dz7r787ZGjrw7oDJNNbRccDkQn+v
RSIBJqF387mK1HQMKGFGOha822J0QXG3W8L1dX2xzqn2jonuvrmh+OrI5Ob4
3PmZ1cvT61fGli52T6y2DM11Ta7NXXxo77GXy1vi1kC9v6glWNRisZdUNwx2
9C2obAkbtZYOaAt7jSWD5hLoI206X5PBB9LUqHI267xtlnCXs7TfXNwtdday
1GFIfRJLhUBXwlUWCFSJ3Mjk23liJw1Q5BlYQjNXYuNJ7bDkiK0wfOhBaq9c
FxSrvKCc8BiO2AaUytRByJ9qfYnWWAr5U22MGB21ClOZ3lmvc9VrHfVqWyJM
QrCEkVurNY5qrbNKbIrQJD6CwMlSFcps1RpXg9nXanA1SLWFEqVfqwsZ9EGf
uzzaEJvo69lbmX5wa2mys3FttGdnZvjWuaVrq1CWJxYHomC+e4nzfxKnSm6O
tF9bGVMyMRoeGUR1b2nkIE+CToJ3g9EDnNdXxxLfTzc7DExenh2FFcDy8lL8
5tbsbF/z2kRfS1mAlp8KOrk+2T870ApMTnfXAu1A44XRxBFGEOp4Z+2fPnrr
o/devX5lxW2VDsaqm0u9S3e8eyXWNN1QUewwlnttAB44uJCEhnFrpMDk/9px
/hcmQSRhC+gkAAk3/79MggyaxIIDJg++5gmYLPe6Dr7QBOCE4nOwLLBa8JmZ
BzoJHaevtnKutxt0koHDC1ki6DUnT+ekZeGOHU1HIylCnpzNEEOFspiKteqA
WOKQKT0qbUBrCoPzam3FZn+VN9JSXN9b2z3ZObUxuX1j9epTa1eeHZ67WtE8
prWWOvy1A+PnOuNbCfzC3fqSAXV4kKqvlXg6wKndlXGVq97qb/UXdYcife5w
h6uow1PW7Sjq1HkalfYaiblUbqtQ2SrF2iKxqlCiKoToyBLZORI7T+YUKNwi
lVeiAVUMwBxgKVS4AFQG30jngahaRHKXWOxl0U08nksk8rE5DrmiUGcq40k8
QkUIyNQ5auTmMo4iwJb7pZYyS6DR4q6Qa71MgYkptIh1hTJTKV3szcGr80g6
YLigYtDsqueLPUi0KBvBkYgMfdFWsO8XHrpyY2Ph6urs0lBsd3704Tvf5QRM
AlT/cxrGKDhs9yM78zIaUsUhQok+OLZ4fq4fYiRESvBugPOASfhfoHdfnU/A
mfgM4bUJkN+VeAw4rPBbIE82l/qBz6V4bKqzHpgE2g+YvDTXszHRNdxZ/4vX
n3v5uYcfvrldW+6bGIzWhV1z3S0rXa1zLXUTNeWlXmuZzxYwayuDbjGDxCVh
bGp5idfptej9NmPQYfZbzR6TwWXQuY16n8UUtFpBx4od7oMln0wWU+g2labI
7gpa7V6j2a7WWpVqGNgIS4tCoRHypSyGWSGDMcql6Iw0Bg4DT6iXimUclpzL
Vgv5KgEPVqRsZk5KklWt6mlq6q6vay0vG43FlFw+IQ/DpLCJeNaZMzkIBPH0
6WwCng6lW8RXUCgCBkvOZKtEErPeVKAxhUCOFPqg1VdldJWZfJW+smikqddf
1SaxBNFsFVXirIpOF1QNqO1VsZHt/pmrvqqh6r4NCGl8V7O7eUHo65AHu83l
I+7qcVtxT6h8oKC0FyZQ2uMqbDf7myyBVsDSWdyldtWYfM1gtUJ1oUQdVhpK
OWKv1FAk0RdADecqPCxpgk8YtsQKKFI5OjxNAVYOfAKcXJEVjF6uDDEYJqBR
IHJzuE6ZqkChK4IYwJV6oDcJ1EGlpdTorYORWUv5UBPNBQq1Syyz8yV20Fsa
z8yRe4FbmaHM5GlSWSpoXDtf7oMnEch8NntEAY9TKtrKyxeHB565eeXG+vLe
4tTe/MS1ldnloRgkQwBsKx7bHOnYnep9+sq6nI5ScAhL8a7N6f6t2b7zi4lj
09vTPVtT3dtT3VfvfOrF9ZVpQOjG0szu7NiV5cnEZ1NvL16Yi0M2qPZbsSnH
hlrKgWqYud7G2e667bF2aNznJ6LXlwfnh1tnhjveePmJD3/92rXd5frKQFdT
2XBbzVJ/+0pP20J742xzrd+iM6vEFrXMolEyyPi0pNMUAt7v9SmVSo1Wb7bY
QkURg8XOF8vkap1coZELxSalSiuR27Q6v81JIxAyzyTzmWyNWKaSyJRiqUIk
gaVaKtfC/6DU6lU6rVqjg+fS6gBD+M9o0BkMusLCUDhcEC4KFhT6/UEPTGFR
MFJWFAz6y8siDfW1E/GRjpb2saHRwZ6hvs6BidG5of7JWNtAZ3v/5Nj8uc2L
F7d3V1bWFlZWFze3h6dm13auXHnwh48+89rE/O7syrW++Hp77/z6xUe7hhd1
jkIkmfude0+mY6j3ns4j8U3Wwmhh/eje4z+v7Fp31Uz4mmaN5QPulmlX45iq
qENT0ulrnvY3TRsLuy0FnbbCLnsY5LHHVhgzB9v03matu1FqrgS1hHW5uUKg
KRJpivnKQobISxW66WI3Q+JhSt0MqYMhttJFFrrYTGSpiSwlia2h8Q1skQWM
m8E3kZl6EkuPp2tYIifES6bQQeIaqQILLJkSB1vhFoDGmsIKa4ncUiwxFoq0
QZHaI9X4BHInAMkW2/hyF2CZS5SiSHI63wJPIlB4QavZYgesyFVuFolPzMHm
n8liY8j14dLLK6uP7+5eWZq7ub64PNCxOz340Nrk+mDrxlDL7dX4Q+tjDFSq
WkhdnR6Yjbc/cX1rZ3Foc6b36ubkpbVEs76+NnN7Z/ny/NS58eHL8zM3V5ce
3Fi6ub5waeHONZWzI81FHnzq0ZGWsp2p3jsXz9auDjasDtbtjLdeXei6tNh3
cSU+1t/yu1//FKTy1tXNaE24vSYMbX2iox44X+qJznc0OQ1qk1rqMGiDHqfd
bJKIhVqtvqg4UlRaYXZ4PAWRutbOsdnVvrHZruHJobGZrlhvVVm5z+EqKy6J
RdtqKipLi4q7O2J9nb0H09PV3Rvr6enohuns6Orp6u3p6evrGxgcHBweHo6P
jY7Df5Nj45MTUzOT84tzaxvLWxe2d/bO7eydv7B77srV3avX9nZ3L+zs7MzN
Lp3b3r1w/urmxsW5mfXdCzf3Lj54Yed6fGR6ND41PDQ+Pj23vHMuOjTUPzPb
FZ8qre+ojQ53DS6X1w4WRGL1rRMdPXNIPP/QXUfSstAIFIEpUOAYEiRFtnbl
+StP/nzn4XfCLUvQpuvGLpUNrIe75gPRMW/ziK9p1FMft5cPgaHbivsgSRoD
Ma2nRe1qAjeHpcbTCFgqbDV8bQlLEQImZaZyqbGMrw4zJQGGxPc/TEpcdImV
KjCR+XoKV0PlaekCI0NoYgrMACSDZwGKyDwTkqZEM9Q4ti6XLMujyPEcPQyK
riJwDTSxjSV3AZxclRf4FOlDkAogD8AAjTCQEGg8I5IoQZGkZLaOmVBOI5Gp
ITDUpDtVSyo0SJhKfA7l9L2nzxw+JaJyouVVW1PTz9+8fmlh6mLiYwdG5jrr
pjsqri0MPnt5TURCqHik80tji6MxQHFlPDbX3whNZ3OiE3Ty+ur47c25awsT
1xamHlyauzQ9fnV59oeXzz995QI81Xq8r9JjIqef6KstvLkydm68Y2s0cebk
9mjzxano9aUeYHIh3jYdb/vbH379/tsvXt6agw4+1tnQWV0w1Zm4pHFtILbU
27I8PTE3NrI0Nb69tryzubG6srSytLq+vtkR65maXbpy/XYgXCbXmMgsgdER
GJ9anJ9bvrBz8cGrN8+tb0/GJ2bGpzdWVjdX1x66ev1gbly5fG330t658+c3
trZX16/vJW5eubC7d+7chc3N7fW1rZWVjZXFzVUQuLnF2an5mfFZQDQ+0N8d
i7U19XW2drTUNdRW+N2OgMcb9BdGSipDgTKnM+x0l6g0TrXezRXr9baAwR60
BSIqd0hk9RgLKkQmv8lfbfLWVDaOhsv64lN7OnMkH837/t1nMjPRRoNNqdBq
tCa53oUgCt/9+Js3fvOvsdUn6gculLSv9K48Uj244WmK26t7Q9HxgpYxU0kM
Wi00HY27GThUORqU9lqVo04LjdjXYgq0qmzVMFpnHbg5DCQBkSbMlQdYsgBT
6j9gEsyXLXOATgKTDKGBLUkUHxBJ6EFUjj7xZqbEKVB7yQIjkaeHJZalJnB1
gDFNbMkhilB0BdyEuw6WDKmNp/YAhDJdUGEoACwhr4rVPqAUOIR12A4jVHog
LbBEVjrfBEzSqHIx36CS2cUcDQHFyEpCZJ/NRKblxBoa5+PDeyuLO3PjS/Ge
tTtfFrY10augICUExI3lsfMT3Zfn+/dmuzdHGh9c7b+x0P3wSv9TO+NPbo0/
vDTw6NroY6vjlyZ7Ly9MQhi4vjq/MzUCeaDIoqJnnxlvq9ye6AKRXLijkyv9
UKubdqc7dqZjm3O9Q51Vv3z9mbdffvTC8misNjTWUVPp0SU+87yrfrGnea6j
9uErl27sXri0vbm7sbm7vQ1atbO5tbq8dvPGrb1L12bnlr9/z9EHjielZuQd
vv/M935w/4njZ8Ui+eTE7M3rDy8vrs1Nzi7NLg73Dwz19A12d/fFYj3Rlo7G
+paaqsbysrpIScTvK/K4Qw6722iwqpWQIdV3oiMLj6Wi8gmIbGxWGjYrA5ed
nvhI06zU7KSjKSfvzc9MRmSkCrkcGoUuFMhEIg2FJs7FsFIRpKRsEomnkVtD
1oJKXaA8Eou7amK+hr76oZW+2cvB6oGG2NLkwkM2V92JU9jD96aikXSj2moz
WCQ8gcPm5AjUWJr86ZfeG198yFnY3dh3rqBuxlsTd1b0qwINKn+trazNUdqh
8tTK7TWGQKvMUqWwVUN90HuBvRZjoAkypNHbAEDC0lfaHa4ZshdEhdowU+wB
Jtny4AGTbLmXr/IBchyFgyGxcGVWGEiSUE/+L5PgsBJ9kCmzc5QukT4AyMEK
DDAJfOI5WqARlhimCs1Q4tgaElcPsAGWAB5X6gD2YB2whIEtBxsZAjMgSuUa
QC3RJKlAZKfRNVicGIcRYjEcZB41LwePykl8dEPQ7Z8cHFmZmZodGZoY6N5e
mHrx9k2PXKSh4h9ZX7ixOH5ppv/G0vD2cCMAuTvRujfR8tBSz+3V/uuznQ8u
9DyxMfLI2vgLD+4+vrtze2fzwtz4D6+eL3XqGbkpLcXu8zP9y4MtK0OJjwDa
HkucPwlh8tLCwGI8Ot7f8Kffvv7PP/36ysZETdA00FDcWuJaHWiFWLsz2rUx
2NZQXtFUWVVTEin2BQvdvqJAqNAXcNsdEAVDgXBrc3tKcqZOa66rbwmHK+x2
PwpFuuuue44ePUshM9EoQh4CRcISkYhcVE5uflZWXnoqIvls1plTGadOZJw8
mnXiaMax+zOOHkl/4L60+w+nHrk35b570g7fk3z4bi4aycei70xiRUTAKGgU
FZumF7GEdJycx1QKeV67nUKiwk8kkvksgc7gLGnqnfGUR0vb4/aKaHX/TDg2
5mwcLB9crRxcbxjd8deNdU1eGpq5LtNGDn0n6e570pG5dAFLZpDpHFqjWS53
6E1isdburZhbvW73NStNVWWNMzp3VGAolVorZfYypTOSGEcZjN6d0ECoMLC0
+pstgWaLr0nvrtHYqlTWMkcoavbVGz21MFBDuAofjMwQAfvmKgsATp7SL1D7
oZXw5A6W2MST22BJ42opbDWNrWNwDQyuEeCETEjk6GhCM08JuprIn7COZ2nA
8WE7jqnGMlQwaJoilyjOwvLz8CIcTUnh6IE6YA/MGjg8kErYCBzi6SpwbbgJ
Vo6lqmg8K1fslmkKFdoCjtBKIMuwBH5iB88lIXIwHLawvrZpZX55enxiZKB/
c2HRwOXzkeilvt6t0eGNeOLzTjfHYpcXB6+tDkFrvrUZ/+He7I2VgQtT7dcW
ex/anLq8PPP45d1bF86tjg3durBV6XdIyJiagGN7anChvxWq/Vq8Y3U4ujHa
cX66FwLA7GAzpIIP3nzxi9/9/NHdldH2anhMU9i5OtC2Pdp9fqx3e6QrLy2T
kIcio7CY7FxkRjY2Jw9WclMz0AgkjUCx6K0kAtXjDICBBgMlwWDE7StmcmUY
PCM/n5Cbi5NKVBqVHpGRI2BxhEy6kE4V0cliBkXOoqi4dA2XlrhMTC5wysUu
hcSjlMJ4VTIYixBKpsirkHrkEpuQZ+QwDWyGgcs0Sfk6KU8jEZp16ki4SKc1
iWV6m6eEJtAEytvG1q4Utw4Vt4/YK9sqB2cDbcO22oGB84+X9q+1zVydv/Ti
k6/+vrl37dBdKcfP4BC5LCpZyGeKjQptocMVspiNcvBvS0lZa0vHlNVd5/K3
u4NdPHmR2lrNVQZl5iK5uYCvdvJULrmpUGerUJkiVm+92V2tt5drraVqc4nK
GtHZyrSOcrOvVm4qgl4sMxbrXdUwclMJ3BTpikAzhZoQiCQwRhOZIEmS2Cq6
QE/mqAl0OQyFqQEsKUwtga4Ch8XQlf8XQlBCYJLMM8AAivlkKaRfABIGQRCl
ozhpucx8ghh4A8E88OgDYQQOD4CEgZtAKaRN0GEkWYNjmIkMUz5emZzNOpFE
OJmCS8ogYPC85HT00ePpWAK9vr7t4VuPP/3MC5d2rzq1dr1I09MYG+8ZGO7o
GO3u7I82jPdFOxvLOxtLp/qb16f75kfaJ/taFuKdK+P96zNT24sLq5OTl7c2
Hr162alTMbDI0c7W7bmJhZGelbG+c3Oj5+ZGLi6NX1+f3VuZXB7vuXl+6YO3
X/7PF5/89YN3fvnjp5+8vAXqujwU2xrrOz8+sDXSoxLKDHKVWaExylQwFqXW
DLVaLNGKZDqx0mVwWHVWvysY8hdVlTc0Nnb6i6o9hVUaky8TQbjvgbM0Gs9k
tHFYXJVMrpNJDDKJWSGxqyQutcSjlXn1Mi2PruFRAU41h6pmkVVMEoySQVTS
SBom1cRlAZAOsQDGJRIlvgBCqQj5vHq1RilX2axu2AXM9lBRZVTnKmnonoqO
Lhc09gabevvX9iYv3+5avnj+mZ+tP/Zq9dD6U2999vt/7Rc3jd11JOfQd89i
iBI6U8HnqpQyrVIsl3LZWrFQr1RKJRqB2OTx1RmtlXJ1iURehCUZxMoClsAB
XZgtMrFEer7MJtf55LqgQO4SKT2J4y9gl+CSdzKb2hTWWkvALqXagFxfqLFE
LJ4aGECUKXHxFEGBqgDgZMtcIFyQE1BkEQyaLMBQhDiKCE+VEqgKGDxFgaXI
qTw9mi7Hs9UUgQGWRK6WJbPBHNyEu1A0GYahwLFUWKYSbmKpCsAP5PGg4wCW
B0xiKHI0WQa45uKE0HeAT3gYjqbG0PR4tpXItlB4dpBupbEIgijkh/RcGp4q
xhK59x9PS8vAxLpHfv7uR5/+8as/ffbNnz779m+f73/1j/1PPvn8zTd/9eZb
v/zNbz/8yas/ffWnr/341Z88+vhjF6GD7l3eOX9xampma3VzfWmto7ltEXLe
7DyPwTh2+HCRzzPa19MTbR5oj4739Yz1dU4O9syNDCRO/pyfvLK9tL04sTw5
2FoRLvVah9rqh9sb1ieGzs2OXZyf2J4a0cvUapFcxuaL6Wwpk6vg8BRMjpBK
1wqlCo6ATaAp4MWweetrWqPNXR5PibugWqCycaUmgcyUk0+GkJmSmsVkcKVC
kVwo1IgEeokAtM4s4VrEHKOYBV6sk7ANYrZRwoHtMBapACbxKb5yiVnINwl4
VrHQLoVoJTVJoPdLikurdEaHQKJVg/o0dpfVdbb1zbQPLV574idrVx9fvHS7
Z37r9d/9+ScfffbML3776kefP//u75975+PP/r3/5Kvv/dcDmYfuOoalSTEk
gVBqUKgtBqPNaDTrdRqjViUSCC0WHxrHBSZtjhoa3apSl1JpFhrLymSbEqiQ
RUy+WqZxqI1+GYQ08ETw2Tvvb/MldrjJlzkOjs6AEN05YbIM4GQKbUyJA5xa
rAvRBE6WxMuRe2lCK5hsLl6AwHHziNxMJC0Pz8GShQkSyGI0AUaCIcuQJHE2
ng/UQQ8C6oA9qtAIw5Ra6WIzbAQyYSOwerDxgEOQR8ASaASZhTlYATcHkYQO
DmQCnzB5eAmSooJfCX4f2F84ErdA4QWA83ACOk+Xmc+AfYRAkzxwIuPIsVQy
XSSGItcy0htfj/bMjS/sji9c6I4vLJ27evOJF24//aPnfvLmM6+8cfX207ee
evmDP/z9r1/vv/XuJ2+//d7+f/Z/8uM3nn3mR++8/e4rL782P7t0bmvnmSee
fvjGzYeuPXjr5oPQc69cuHD5/MXzGxsrM5OLU/GRns71han60hJCXpaARokE
3H2tzcOxaLwrNtTRapRp1AKZkivUCCRGkdQglBiFEmBDzmBblVpcNtKsseiV
ZisU2qq2yur2oqqOUFWsoCoWiDRrrSEiQ5SehTyblE4ikJViqcugd+o0oJMO
pcgGFsylybg0rVKglfGkPJpWJrBo5RoxT8ZlmBQyJZ/r0GkVPC4di5NzeRqB
iE1lSjU2rbO4omUgXNMVquwYnDm3fP6RlQuPXnjwuedff/+9z7764K///OiL
f32+v//l/v7vv/rXP/b3P/r8q798s//pP749dNe9dx0+mUtgIXB0tkSb+Cp5
p98RKLC5fVqzWaZRiRXqxIlDcqtKX0CmG3B4LRqjlsoK8/IlBKKMTJMzWHI6
W0ZhiAkUAZYgxOAFJKqMQpfRmCo6KJjAwBWbBXKnSOnG0RVijZercIHhomkq
htiuc1YAmTiGUagI4WhaOt8CPpucQ83FcvF0SWYeNTOPjMRz0UQ+Ip+JwvJo
dxw8M5+FZyiZIjOFqwM+84kieGYSW5N4m13ugI2gtIm3NCVWltgCWw6CIgyI
MBAI8RKBFQCEd1RRmY3mJWVRM/LZcNedPKnIxYmRRBkIZmIdK4AfhyKKYS+D
/QKBZmZkk7IQFCSWiSFw8tD0tByS0lRQUt9b2thv8JTKTD6RzoXnSJPyCFy5
kSZQsaVGPEN+Mg2fnsdiieywe1qd4UhFc6ioqqyquaN7pLVjYGB4evPcpYWF
jZbW2NjY3N6l64/cfvLZZ1584flX3nrzF7/8+S8++O37n37y+08+/ujXv/jl
T3/8yo9/9NKrL7/08nMvPP7ww7vbO2sLCy691abSWRQap0rrVuscCqVVKrPJ
5BDj7Go9h0gvDpQYdU4WQ2qzFpTVdNV0jNf1TLcMLTb3zRaUR3kyc0YOHor5
6VMp2HwMn8kW0KgUZB4ZkcXDoxRcJhmHQuZnZ2Yk47BIFBJx9sypzIw0NCo/
6cxZLBqTk4VIT81IT81CZOd/59B3wan7pramdx5dufpsz8zFoaWrV5762fNv
fvq7v+3/+vf/+uDP33z1/54x+OW3+7D+r/39v/7z62/291/88WtMofjQD+49
mZpBF0jZEqVAaVCanNZAUaCsKlhebSsMqxxOsc5EYIqykEye1EGi6Vk8NzCZ
nsHHYBRUmppMkeEI3FwUNTuPBC8QiSph87QAJJkmhXXQExJDAQ2FzjPQBcZs
DJfCNyYyHobPkDqUtgiBY8ojKzF0yHUGYADKS3o+MyGSeA4Cy8rFMIDJXAwr
H8fJQtAASwxelIvm5aC5oKV5BCECx4clhiq7Y/cSABV+CjBJ5mi5Mjtf4QRu
YQ7eewTkwKxzMHzAPhPJAbMGOEEYYeUAUXjYAZNEhjoXy89GcbEUGVg2/PI4
igSBZsOvAUzmIhn5aBYYRz6GkZ5FPJGUm4ogCFSWxs7huY3dgcmlyqaO6pbO
gbG5+mhPWW1bRU27N1DFF1m5ArNKHRDLnIA0lSMj0IUoIpNA4SOxtKxcYhYC
J5Roc5EkGlMkEKgYDAGdzieRWBy2mEphKhXagL+wsqK2paltdGTi2pWbr7z0
6ru/eO837334x48/+9tf/87AEKhIND0fzUZjOBgMMy+PlpNDzs7GZ2bSUDgq
mtze1DU5vtLbPzs6sRmfuTAwt9s2tlXdNRuo6ta5yzgKG5ktI9MFaZn5KckZ
2Zk5ZCyeSSASchH5qcm5aSlYLDofg85Do1Q6vUylzkPjUDjimZT09Jx8DJFO
ZolITOGJZERday9HrC2u63rsp7975cP/8+L7X11/8f0X3/3y/c/3f/XZ/t/3
9/+RwG//z//Y/8e/97/+9/6XX//zi6/+8XcIPfvfjo+PHjly5NB3DiWlpZMY
DBpPYA8WWH0FAKQ1VGIvqrCXVFmKK/ShEpU7ZAlVgEWW1SWOCxNplrRMQWoa
Vyjy5eZz89EcUIw8NA0yCQJNB/cnMWTg5jgSD/TtjsQJMWQxvLhADrzu0EFy
ybJkFD9Y3af11KCYBhRTB0kSQ1FnInnAxvEkDJYiuePXQgJNBFgC6vDq5+TR
AIa8fFZqBjEPywUhzUGzYU9BYDjweBJTSWap0CQRlaOBgb2AJ7XCgNsCUaCH
oJDg1LAECA8IPHiHHNwcPB1QBMGELTAJSoliFEGAI8sokArYagJNBjdzMRwk
ng8roJZEupzMVBLp0kSiwLNPJ6Xfd/QYnkCyOewGk1EikVhM5nBBYXFBYUlh
uKGqrq22tbmypbdlYKpvLt47GYsNVde3292FSp3F4y+prGn2h8rkcqNKZWEw
REqlWS410Ch8GBKBTafxcFgqFgOVH3X82Jm7vvP9Q4e+d/cPjpw8kZSVmYdC
4qkkJovJB6YBP2JmFiUnh47IpmRlkDPTqdmZ6NRUo1RZ6C3s6x4dGJqL9c73
j2229q8MLl3vWbgSm7zQOLAcaRlylzQbXRG12Qfycv+xs4fvO4bMQ0khC8qV
RpBco6m8oqa+pb26ITo+tzK7cm5oanFoatkeiMgMLopQlSi5GuexdPz1p3/6
1GvvLV15au3Wa4sP/XTy0ot9q7dXbvzk/GNvjq7eGl9+sLZ9cvPiY2//6g9f
fAX5JTF///tXYATF4aLvHDp0zw/uRiDy1BodhkA22lwKo81fUuUvr/VV1LvK
6uyROmuk1lRUpS8opyutrtKW0cVrXHkgKUOAp1hIVBsCKctB8nNQrFwUDYG5
M1hGDoYJk5VPyUZSQVJA7pAEQT5RALKWheVDI07KY2VAYGMaoiNb+SwDhmdD
UDVqWzmBoT2ejDuegk3OojCFujwsm8qWs4VaNDEhRygcC4lhYwl8LE6QkU1J
SBaeD88MQAKWeTjeAYR4mgwgBDhhhcbVHqwDoiCAkBsP8AMfB/CAQJDNAyxB
GMG+UxEMGJDQlBx6NooDzw/aCJDDz8rIo4MyIwmijDxmFpIN98LNhFZj+UAv
xEs2R4hGozkstkGvNWiUPqct5LJLWAythK+FsiAUaDhcBZWppHEUVDYPT5OL
FCKxHKSPzxPzuCKtxuh2+irLayxGh0Kq8dh9DrNLpzTA0mlyuawendokFSmZ
NC6ZQKcQGQAhFkXMzsjLR2DQ+XgMkoDMxSqZLBkN/v0UFYOiZlCgDqvoZB2H
xUCh/BZHa0O0ra2/tnmwpiU+vnxj5fJz85eem9x5sm/xRmt8qzI2HW7o85e3
uYsbFAYvlsI7m5qbnJIJzJNJdJfD3dXZNzI2H59e7eidGJ5anV6+uLR989rj
P9688uTWtaeXLz0+snJ9+coz8c1bl59555HXPr78wq/mrv8oOnu1eWKvsn+j
qmetdWSnon2uuG7EUdBicVfaPOXl1W2jo4sQVIwG239/9+67Dv33ffcchX8d
mcQSCpV0SF2OIDBvdBZ6S+tKm3siLf3hpr5AXZe3usNZ3prNlNlLW6CeC3Ql
Qk05hevjiEJsgZcvdZNZmhwUIzkbl5SDS0GSUpHUdCQ1JYeYlU8Dp4PWDCIJ
TGbheOkYLolvOp3LfiCTGoLWOH4hnawmSn0n8/hiXSGDZzl6Bg3JDQqRSGU/
k4ZBEThsvgqNTzAPUozF8yg0KZWmAGUG7QUOQSdhQDBRRCGBLgf24GcBnESG
AlYOlBO2J5Z3jPuAQ4DwIEaCZcMS3BwcPAvFhQFbh4EViAGQCgC/HCwPFJ7I
SjAMPQjk9M47nGYKx4hlaDB0NYFtpPOMeCKXBqwbbDaLU6/WNFZXbyzMLU3G
e5tqBlvq++urOysiXeWRnrJIZ0lRW0lxeSgA3FaXllZFIi6jiZiPPHn4PhoW
Z1GpxUyWQaJQ8URQn2EFCgtUaSGDy6FymCQmLGV8mUqs4tF5+Hw8DoknYcl0
EoNFZRsEAi2PrWXTtRyqhklW0ghApp7LVnHY+elZwLAvUH7x2jMPPf3O+Ude
j288uvXI67OXnotNX4q0zwZqB0N1A8VNA6VNA2X1PRpLEElgHT+dcS+I8ek0
Iomu1dod7lKjvdhgLbH7qt0FjWZfbaRhZHnvh3U9S42DG6HG8b6lh6+++Nuh
7adGdp7uXbvtrhuRBxrdNUOuygG1p9Fc0GYr7HAXd9kCLXJtmMU3Q+nIRlBO
n8o5ezoL0gEyj4rKp913OCk/j5qHZOhNQanaaXQWaS2FzlCNr7TVVdxkL24K
1nRVxsbrB+ZMkRZzaWtpx5y7vJ8sCOSTrGX1s6U1YypTBBCCMoLAMzNx9FQ0
5TSCcDwdnY1mIIk8AkNKYIFlS3JJolyyJJeq4GlDORT1kQzawuXnwy1TdG0Y
JXB8/yxRY6+QqoPHzmIobK3KGCSzFcmZWBxFQKQKEEgKAkkFf8QR+DSGnMnS
4IhQ8/WgY2kIKugkIAeSCPadjWJBKYYVEEkcVQpwwl2wAlhC2TlwbeAK+ATB
hIEtMMDngWUfZE7QTHgMBAzIvYkzlOROntIr0gYlxkKxoUDnqrbA37k45inp
tIXbjIHEyaJmf5Mr0Kg1hdU6P4enzshA5eVizDpTRXHxYEfb/FD/TF/naFvD
ZFvTaEvtUG05LJfjfU2loe6GqqXRgfPzUxU+JzbtrE0u6igvKbaaa7yeSpcz
YrXU+rwlFrNfq7UoVB6j1We229R6vUShE8s1QqmCK2QRKUwCmYEn0XFEk1hg
EHJMAo5FyDZxGVoWWcem6gVss0JWU1J24/ojL7z89ktvfnz+1qtgozd/9OH0
pedmLj8/dfHp4bVbnbN7zcNrpdFRX2WHyVcp1rhRFMGZDPTxpJykNCQEXUQe
BYsTYfEytsBG55rl+iJwTBTNUBGdK2mZNYY7qdoIQVlsLB+21U0X9Wxbq0fF
zmqOLqR018AoHFVya5VQW2zyNEnUxXSuHcoyg6UnUuRIFAcIROaz7n8AcewY
isEw5ObzBSK7VOVzB+qxFLnJWW7311o8VQpzWGWNeEvb6zqno/G1hvha/MIj
ExefRgvcR9L4loLewekHrb6oRFMgULiZYj2RJ0cxhFlkdgqWnpRPxTFAUhQg
XNA3oRTnUyRkgZGj9snsZSSJS2ytWLzyosRVyzKVZ7EsRxE8b0mHxlSSlEkx
OcvESieIJFg2natE4ZjAJI7AoTGkACSLo+Zw9bB/0blqUGAIBrA70HiAkwwC
Q1IWPiOfmlBmihD2CLgLdgosVQSyCUwChKByAB6kyoPTMMDHgcCDtyiBw1yc
EHImLHOJYqbMKTMX6T1VakeZ0BCWmEv0vgZ7UbvO1wT7u6u011Pe7yzttxZ1
W8JdlnCP1tMuMzfonE0JHfDViVUuicJigb9jRfXIAJSKkdn4wPpUfHmsf36w
a2cmvjLcGW+tXByIJi7lnugLakX5R+9uC3vHm6ubg+6ByshYQ/VIbcV4Y01v
SWG0wN9dXTnU0tLf2NhYVBRxOmHKvB6YunBhuc8btFncBp2ey9Tz6ACkXcK1
idgGLs3AZxglPIgQYX9wa2tv99rjz7/x4VOvfXzjhffnLr24/vCrS9dfGt1+
PDq5W927AmoZrBtyRNqheJq8VUpTEP689zyQcvd9Z5NS8nPzqVnZ9DykgEjT
nDiLZwkcKmPZsRS6WFfKUhZxdaUyZxNdU8a3NQhdzTR9hSLQGolOWgub4EXH
cQ1ifZivDiIT1+KEeDIvlW3Ox4ozEInGyuYZMVj+3fek3P9ATlIygUiSU+ma
Aya9ocbCsg6tpdjhq/cUtjgKmlzhaGFVX0ntSLBmcOeJ1574+R+jc5eO5Apq
+rfXr79mCnY6i7tlplK+xk8RGvOoojQcO4vEx/G0LIWVylfThVoqT4uiybJx
AhRdBQppCDQVNo6Zizs3HnoVXEMVahW5anm2Sqm7zloYFWkLconS1u5Zqc7/
/ftTKBw5YInEQpJkMtkKkcTIFxr4AhNfYKEzVHkoJobEoyc+1whkE6oi4WwK
OikDhybyoWGhSGC7TPB0yAxoipjC1YBNgwYeHFtkCMwH75kfaOPBcRwkRZY4
dY2qpItsEn0YpE9hr2QpA1SJm6ctVLtqtJ46mbXcUdRpL+60FXWaQm1aX6vC
06T0Nqt9HVJ7VOvvMYV6beFeR2GH0lIqUftM1kKLPdDaEhvpH54YGFwcH53s
7x5ub1oc6V4eap/urDn4CP1LswMlJmnGDw41B2zjTRUtQft4fdlSrHEuWjvd
XNUbCcWKggP1lf0NlbHK4voCD0y0tACmJuRuKPDXhwNNJQXR8mKHmKdnUY0c
uk8lDukVTjnXLOXYNGKzRpaTnVlb13zt1tOPPP/WC2/94cKjb6zd/PHs7rNz
e8/1zN+s7F4tap0NNkwE6kdL22YCVf3u4vZgpC1Y3JSagU9LQ4Gx3n//Wfg7
J6olmofCizBEKRIvRROhFeo5Yi+aqmNIfHxtMV3q13jqnJFOri5k9NWEKmJy
UyHYDUAuVvugV7JFlkQCJ8vSEVQojPDC5aNZp5OQp8/mpqbmZWeh0GgqnS4U
i/UGk98XrC4qb/MUNARLosBkwkz1JXJzhUgbOZbFXr/10q03PlQXtVQMro6d
f0pdEA00jsm9DQSJl6YIpGDER9LJGnc1aAuoK4GtJbLlMASmisjRZeFkDFmA
KPDaS/qbhi8Orj72wrv/0BfH3PXD3uaRJKrMWNrRPXetuHnKHumq613ga7zf
P54JVAsUZsCSSBVyeFqN1s9lG8hEuUTkopKVErFZIjEI+RoqWZiTRchIw5Dw
AoXcDiqKxHDh35toH2RJDpRl6MgcXcKdaZqDUkPmwM6iJ/P1JJ6OwEmcoUHm
GfAcPZYJYyRyrWS+k6suQTGsAnWx0dvEVxbKtMWOQJPeXqm1lho9icsoRMYS
kalM6a6TOmvZ+lKVu0Xra0tcNeluUFgqFfqIQlekht1Q75eLjV5roL60drx3
cG1qaqq3Z26ge3O6f6SjciWeuPZ2MlZT5Ta4pawqhyHeUDFYExltqZ7pBKOv
HmmpGo3WDDSWj7RUzPU2DzWVDTeXwzIa8fbVFcfbqjrKQ9HSQFtZsLMq7BLx
LByGmc9wywU+jcip4NkUfGDSopULBRyX2x/tHu6JL8fi6yuXnp07/8OxtdsT
G4/W9qxawrFAzWjT4LnK2LIj0qN21lW0TJbWDhhtETxRcPYs4vA9JwHL08m5
qdl4qAnw583OpaOwAhxBisKLESgBlW2EZsEU2lhSJ8iswlpCE1sg9hid5Vpr
CU/u4CucYFUQq0AospF0KL8gIOkIIqQymPuPp9975PTZM2lpKZn5eRgKmUkm
s9E4Op7IA0PkSSySO0dY2DKPylJBF3tT8sT3JJH/vL+//eRPHLVdpX1zRV0z
1uq+sr4Vsbc+j+8kKwqwQhcQFR3alhojfGXi6i2WzEbgqXlqTxpWRJcHPGWD
aI7r4uO/Gtt+duLCi3NXX+HaKyX+WmmoVlPS2LdxI37uiUDDxIUn3y7rnD10
OI2tdkeaerlyM/gyhiSAvwCTpRMIbUK+3aQv1aoLxEK9gKtg06UM6LwUiYCp
FPMNUpGZRpbl5jEzsmkIDA98GUVX5FGk+VQZlXvnxMs7jfvgPXYsTUrkqkHG
cdCA2HoMU4OkatEsI0Xk4ajCQl2l3tMWrh4rb5jyF3XqrRVyTUis8EFhNDjK
lMYirtLPkPs4mrDYUilz1ckdtQpX4pwo6IBMqZ/Oc4C7CcUuqdiR+MX4ai6Z
E7R5lsam1iYmJns616b6B6IVM4kLxEaWhtuLLCo5GVXtMUPU7KspGWwsH2ur
jUdrYAZbq9qrQv2NxTM9dYNNxfFoGUys0jfYWDLWVtldHeqsDHRXF/bXl7hl
QqeEbxdzYBwyDjBpV/JsSoFKyDLrNVqtvqE51jUwTRcYwQTh99c4qqui062D
W9UdC7XdK82DW5UdC6Hq4ca+FdB5T2FTYWkrg606fTo7JQlx112Hj57MAIqg
b6ak41LSsPlINkTB9AxScgoB3JbGNZDZBr7KB89METsE+hBDbIednS22JU6Y
ATNiKNEk0Zl0fDqCnJZDOnYm596jqXloenI66u77znz/nuNHHziVl4OG0Jaa
knPyZHpGFg6deIOaJQSpEdvS8zhomsboqdW769T2qrb49odf7w+fuzF87sHN
x38ycv5RMHFf6wTTXNo0uTdx8dlQ01TTyDl3WV9xwziB58DzrOXRseLm4e+d
QtGVwbLYgqd6pHv+ofNPvbv2yJsDW09SDCXKcNReNziy98To3hPzD71YHJtv
Gb8we+lZqsqPE1gqY5McjYetcBxPx+NpCjJDLVN47fYqs7nMoC3hcUwivkEs
1Am5ai5TLuCopUKDkKujksQYJAfCCR4KNVUOqohmKAHIHKIoOZOekklPzaKl
IRg56EStPjjBA0tLHDQncgyAJY5hJPPtkMN1zoaCmrHY6F5RzShd6GGLPAZH
ldlZZXJUyrQByKUild8biZU0jYGPy+w1Uls1V1tEk3nJQjdN6hFoEroqVgaF
YgeZosCi2FRIFBgan8EvdAe6mprPLS1szI2O9TbPDrXvrUzuzAx7lCJqZlJz
oXe2q3mkqRLkcTJWN9XdMNvXHO+oaSn39DdGZrrrh5tLx9urJjqqu6qCAw3F
Iy1l/fVFvbWFsB5vLffIRT6lBETSKmRZRAyXgudS8q0KfsCqt2pVLBq9IFQ8
Pb8BZbahbay+bby9b6EpNlPeNFLbPt3av1LTPlvWNF7fOad1VILcQdnMQbHo
LGVKGjo5OQ/mNCwzsenZ+ORUVFoqOjeHhMgmpiYjETkU4BM8ncLWCdR+At9C
ENgNwQa5OYJlaO6cyZ94WxiCenou42wGISOXkpJFOHo6+9B3j2Tk4I8cSwUm
HziecuJ4clYmEplHysxM/MT0TBykBchmp1OxArnTGayvaooXVHZDsmLJPEML
lz79Zv/Zdz955hef3H7jt+ef+Vnn8lVrTX/l8EbX6sOhttm2mav9y7ekznqy
xCezVS9eeq6ye+nudJrcW98+fakgOj1z+cWrL32w8dibkb5Vf3Ta2zbpbh0f
2fth18ZDey+/F7/4ZM/yg0Prt2sG1rjmUqauwFHRaSpsZmt82SRpuLq3omHY
V9Di9Tc6HNVmY0QksAm4Oq3aode6xHwdmy7jsZRcpopCFFEpMrBviM0QWjLy
2RBlAcvEcUyiHIHiZeWx87ECIJzK0UEfz8FyiAxVImBAquQYSFwzXeiS6CIG
T6OtMOYt65eZykk8GwRdrbVcrPSDPYEa6Gxl9lAzZBvwaHMwCtlS42mwF3fY
S9ps4VazvyFxDp7UQ+OYqCwdG56WKORzVQyqAJmDRmTkUvHkkMczPdw3F+9Z
GR/YW53dXZp2KgS45BM9VSULvdHJ9vqpzvrZniYAcnGodby7Fpg8KERjbdXT
XXVwLzAJKAKQBzPUFBnvqLRLeC650CHlWYQsq5jpUQl8OqFbKwpZtUaFWMRi
SIWijvYeh7uwZ2B6ee3K2MxW9+BCVWN/uLwD2hgUwHQUB0WVSzR+Z6BWZy1O
yiAAFTgCF4mmHzuRAUzedzT18JGkM2eysjPQWemonLT8xNeBIcjAJ2CZuGyK
a8TxrCSJh6UppIudVIENx9TjmIk337LRvFPphKRsUnI24UwG9kwa6nuHT53N
QH333uP3HD17Kikb8uTxoynpqSgaTUTAc0+dQUDaFIhNOkuh3lais5dYvdVC
jQ9cGNS4Z2Lzr/v7f9rff/mDP1/50VsLDz4fiI5pIx3R+SuW6kF77ejmEz+v
jV8wlfaT5KHuuRve2tFD9+VSjZFQx1z84tOD5x4riM10LF0D9prndwcvPPrQ
m79ffeL1zWfemb/9k71XfjN740fnnnhr4twTpZ3zntohsbNaH27z1g0fy+UJ
TKXVnfOwCxdV9jl99eCGTKaRQVMLBQa1yqFS2vkcLZuhlAhNcoldwDXwuHou
z0CiKjLymGm5zDySBJiEZXIGJTObgUQL4C46S0tiKCBgZ+YzCDQZmiRBESUY
SiKuk1kWjtgv1pZonXU4rgVk0xJotAWb4E+dT5CyxQ5/cZvdXw9bAmVd3kiP
3tukdQPAHRx1QO2qcISboapTBZYcjBAHHVPhYQvMfJFZIjPj8WwclsrnSagU
Jh5LKHA7OxvrZ4b6LizOXV1fChlVpPSz/XXlAOR0rBHwm+9rmuyqnetvHOuq
bq3wjrfXLQ/FYDnT3TjT3dxTE4Y82VcHy3BvXcFAY9FoW6mRxzALWDYwbikP
RNKrFgb14kKzUkLD2pTCsMsmZjPNOhOPIxTw5QqF6fRZBJ0p1Rg8MCKFjUiX
IzCJIwUUttrurRid3o71TYtl1jMp+amZ2AORPPxA8t2HTyYnZeVkojLOZsKg
stEZZ7KxSDqBJEwcRyBKiEIHimc7kS9IQgoofCuRY8pACzORvCwUNwVBS84h
HzuLPJYEeycpNQd3KhXxvcPH7juRdOJselJSbk42MRdBTk1BJadi0FgOiKRQ
Yra6y1SGgNIQ8Je0uAsbSup7+Wp3cX3vb/72zftffPPcL3/3zC8/vvDM6x2L
e+2LV5umdwd2nnz3n/um6ngyzdw4calz6eHo9DWpv7V+/HLV6G7jzNWK+Gb9
9IXJq0+98vt/vP3F/s//sf/Lr/d/+Os/vvaXb8899/bv9/cffusPV1/57fUX
3zv/2M96l24Utk46qgf5zlqKLmKrHnnqzb9sPvxaXc9KSX0cDDQDwU5JJeXl
c1RKp1hkYtDlZJKIy1IrZXapyMqgK/PzmLDDonFCElPNvXOtWSqKfdc9qd/9
7+QzZ3EYrBCYxOAFeSh24kQRhgJDEh10yXy8CEWAwq5MYCnzGzz1aleVxlEp
NRYDYxi6GoDUWCISTZAv94ASeos77QXtosQRhBKDvzFc22cvrFfaiiBCQ4hC
ECTwKuSgeQgMPy2bBtUyLQuXmoHMRRLSMvMhxuPyURaVurW6an1m6ua5zWKH
mZqT2lVZDL1mvqd5c7xrdaR9uqducahlZqCxp65woqN+ebBrtBVEsnG2p6Wv
LnKn75SCWnbXBPvqQ8MtxWYR2yRk2SVcn1riV4tcMq5HwS0wSo18qlMtCpi1
OrFQymUTUBgCGs9h8SViJZcjweOZVCpfqbarNA46W44hcJAYNldsxJKFaqO/
o3cqWNxw7EzuPQ+knErJP34668TpDMh7GclZKSdTMk6m5iZnpxxLxiOp+XnU
xIl8HD2GZ0khqTJounDdKF9dkEuUp6MEp7NoZ7Kpqbn0U+m4o0nIe0+mp+US
sTT+4ePJP7j/5NEzacdOp4IwEvB8PI53+mx+VjZVrfF5/NV6UwHkSae/KhRp
idR2yQ1+SFz/dTjZVVT7xf7+J//af+vTv/3s0y+ff/+z53/z+SuffAMsTd94
2d40gdeVXnv1D7MP/rRj5ZHe9Sfa5h+KLj5sbRhrmL5UPb59680P/ri//+7X
377z5def7e9/tL//9hf//NFHf3nmvc+A0pd+96+XPvrne1/sP/76x0+99Vn7
7BWytohhro70n3v8F1+t3nqrIDqP5DoQVF0OTp6DEkCwtDrK5AoXeDSRJIFh
MlQctpZGUeIw0MHpaIwAlDBxapzMDv3lbC7t8MlcBkvP55r5XBOVpgJoD07s
AVQQ+czMPHpWHisHyQXg0xFcHEUnVIR4qkCoptcVaaPLnCy5S2IsBMtQWSMW
f8PA1MWByT2luRzPtDhC7a296/WdC95Ii1DrxrOVbLnd4Cm3+GtUpjBP5jS7
K+E3kajdYqWdQBMlZaJPJGczOeI8qK9YktdkW4iP3djeLrSaSBkp0ZIgMLnU
Hz0/078xHlsYbN6Y6Fwdiw40lcx2R1eHe0db6yc7mqY7E0xCAYcMCTrZUxu6
w2TYrRJbJVyXXFBoVAW1EqsQOjjFq+SFDDITn6FgkioCroDVjMnKzE5KJqKx
TAoLkYWEWqGQ633esFyuJ5O5bK4SxNPlKxVKjXlYNpBZVN6q1HtPpaAOffeB
e4+lnDqbdepk6qmjZ5JPJGedTs8+k5F1JjMvE338WEYWkikzF+XQNA/k8tTB
lj/8az9Q3g1Agneno3hHzqJPpOKOnM49nYH/wbGUMxloIkt86L+P3P3AqZMp
WUfPZKRl4E+eyoeKqtUFPN6qxCXe+oDLWwlVK1jcxBBoqVxIWTIURXDoriOl
9R2f7+//8ZsElu/88ctf/PXb977ef/pXf9l94d3o4g1H8+Tioz/rP/9DX/ui
t32uduJy1/qjo5de6Fi9+eg7nz7y1odv/fWfoIcf7//nk/1/f/yfb/6yv//B
v74BSn/7z/13Pt9/47N//+pv+2//8dtXfvPFE69/Wh8/56gdHdt9cfLqa5H+
8wUdK/7mOXf1aLhxIlTZX1zVW1bdK1a4E+dnsjUsrgGcms7QkAhSMlHGYmil
MpdC7ZPIXeDIR8+ggMY8slhlLpQrfXSqKjOdcuY0EnwhI4uYmoE/nYQ8m4JN
SsWlZFLA3I+dxh47hc/HKcTqkDlQZy1sIvBNGLYO1qWmMJAJdWD14lN1HTMA
pFBdqHfWmr2NAnkwj6RIRdKTckkZGBaBo2JILFShkcYzskRWSKqJo0IUGeSE
HAyTwBBnoSkZOVg+R4rPJ2hEqqmB0Uvrm26tBp1yurnYP9RUATq5NdG9Gm+b
H2jamupeHW3vayhaGereGh8Zb2ucaG8CLHtqiqGbg05CuwEg+xsKgEmfXuFS
S9wqkVcl9qmEHgUflgAntB6/RmrgMzxahceoxSOy008eJ+TlU/DkPAQKjcQB
mTy2qChcZjI6kUhifj7JYPLpzT651onEc89m4mCfMrmKWSLtoe/cm5Sam5SU
dd89R+/77/vQmcj7v3df2un0s6cyT5yCgkIDmyAIrQJL+c6jb/z53/v9Uxer
opMpSM7dp5BnELRD3z99MhN/+GTOf913+lQGisSRHvrv+44mZX7/gdPJWZjj
p/LOJOPgNVXrgnyRVW8KO9zlDJ4OReAx+VoaRwVMpiIIOJrwv+49pXOEvrxz
4uVvPv/6o6++/dXf/vPSb/78ow+/fOb9z2++8clTv/57dPmmrKi9cuzC9IOv
rDz21u23/7z3wruPv/P7N//8f3737f6n+/uf/uffn377zz/8+6u/7f/7j99+
/cHfv3j/iy8/+vo/H3+z/96X+2988vXLv/rrO5/95+m3/rT68Ktz1388cv65
lrlbrfO3q0d24zvPjW0/XdO9Ygwkct2JFPz3DqcdPo7IzGVyRTaR1EEgyfEE
CbQJgdAKPTcfzcvMoefhBFyJTW4I0sXmHCzv3iOZyWdxqHwuMp+VmU1CYdhY
Ihf8NBfJSM8ig71m53PSc1gZOVwm3+kKtZQ0DFrDDVSpVeUq9ZbHihoGW4fW
QpW9hdX9ele12VcPj6FwzPccQz5wCoehJM6KZ4g0AlXi6iEoTYnD5VgBlCyY
TCQnC83JQDJScklJObhkBD4NgcdhmJnJeblpyIqCshs7u6UeDyr5THt5eHGg
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
rJkTq1LHzcXzTG5fQ2why3TRiZlT4tKKwuLz4jMKU3MnJmaO0ZsjwPxDBGDy
1Qq1RaMPU6ntMmUwisQcVTS5Ayzl64/gBhs7e580tb3tGXjZ3g3iDMr5trPv
U9fAl54B8LfQoz/194NavurqBv180+uE5v680/mg2fm8y3njdddv/3745Z93
B8/fnb1yb1rxgpwZtRiOWqCxiLUhWLp4BIrmi2NB4vPG0v1wTOggPlimN47p
TWD5knjQZ1F0CZajp0ktMdlTU/KQucceaFHe+IrY5CKlIdJkSQoJS+MpArTm
cJ7CKDOalSYbiSWHg47GU9P5KiJL7Efm+BDoKAqLypPjmSIUmYuhibA0uTua
44MXgXvXOLI04TlRuSW502qTx8wOih6lCIzhKkPwDPngbCsdTxLAExq4Aj0S
usPSIfU7wrJNgQkqdahOHx4QFK3W2jg8NYujZLDkLI4aEg2LqSYRxUS8hEyR
EcgiGkvG4ijYbDGLwWXTGWwykUlAz59edHDL6lU188BVQr8+sG4pxJmKyfnL
5iIPBgUxrJ9XDOtb6yqWzZ5cN2tS7bTxNVML60unrK4oHRkdPiomAionKiwz
Arm3D1RauCU13JEZF5OTklSQOyorI1sqU/n4YqFHE6BZ++I9R/i5D/PD+NLo
VBGTISNTRWAqMHhgUgBuE4pAB+eDMDnEi6YMiidLgjHCoLLVh1Rh2RlT5uOF
6kOnfgFf19Hb2dEF9PW3trcBkz19vf0D3X3OrpbO1nfNrTcfv1yx8/CBX/8q
33CQqAn3FYXIQ0eyDLEzl27PnlyF4/pPK1s9bd6a8LjxNF6gD14CYdMdzfrG
lzLcjwK/GkPloQgsHJUPrZPBRi7NZPO0Xji6yRH17/M3nyBS9SA6+RzcY2cv
rACW4DDfdfR97Oz/0uVs6nYCluAlPg4MIGd/nM4nLd33Pnc/bHU+bHeeufP6
+tvuY38+mb1897h5yydVrcmZUh0SnyvRWXSBocitGPhKLIU3uCmEcJD6Edn/
t+CDQYHfIAsMFHFQ3MipybkzbXFjaEKzVBsl18fYo/MMwYkhEelyo10XHO5v
jwwKj0XTONBqoRcQmTI/Etcbz4CCowxDBTKZFK6MzJahiHAIcFEEEVdiNkfk
JI+flz9r2Zg5y8DEBkRlKYNiJFqbQG4OCU2WaSxsnh78tlBi5gkDWHwTKCSe
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
EyJyk6JGJcfmpiTkpqYUFYwdmzcuKjJRoTJz+Dq2wARmA6w4Q2kUGUKU5giN
JVYRGC3ShnIVFprQ5EeTMYT+Yo3VZI+HPwHaB3LjXE/0MAxJFxrL1AYzjfYZ
dWtfdCPzYD93975t/tzb39PW3vT582fn4O37mlq7Xn9u/tDeCUA29w08fP3x
ZVPHvcZPITGpOksMtGm+OsTNnQC/AjagVBeaNnqKPMT+DYk8BEdAM3jAP5hJ
0EY8UcBiqukMFaKWHDV0c2ASB0gwxS619MIyyhatvPPy4/te582X7y8/ennj
9cf/6lbj/6s7b5ovP3j1x/1XFx80/vbvyzO3nn577va6wz/PWro5d2p12rjS
pNyp/tYkClsNlgyiPWdwBilA6LKRgB9w6HrFxaRr/NzVwaF309hCD18MiQ0d
U+xBZHkzJNnTyg/+fmPuyt1pkyvSJ1eHpBRpHBlEUZAtcdyoCZWl5WslqjAC
XaUPipPrHNCgoYHy5AZgEhQSOrgnlgIF63SBUqazBtrTIhLG6s0JPjiB21d+
Xw3F+PohNzDHETg4IgsZ7qYLyUwpbBZo2XjAlSsjsSUEpgj8APxkeB1CDZAP
cjRYyCHAlek5Uh0D1IknozCEFLqASOUBloMJjuGDo/liyVgcydfbZ1Rm6rIF
8zcsrdhaV3ZwXe3O5WXra2YiV+gsLK2fP2ltTcmWOoRSaOubakrXV82AgpWC
zPj/amxGQkFmQkFGyuiMtISIsNzM7PEFExLjs1SaEK7YJJRZuDIzT2PmG4Il
/nZ5YIQ8IEoKUU4byldbQSuQGafKQInGbAiJgKM1PC6ttKJm3w8/Hv3tj7UH
vp+7cmPGjPnJU2Zdefn+aVvn8y9fXn5+3wP+0dnf1NLsmoDRjJzU62sacLYg
p7xbrz14/Kat5/H7lqzC4rDkHCxTCgU5whKTJdLZcHTFxDk1P1y8VLF6lcpm
cxs6HPYLnS0DILl8HY0qp1Jk5MGxDmASmg5kWxxbAl0JHDtfaTpz+dar9v4X
7X3n7z756/nbv169v/byHdTVF2+vPXsDdfXp62tPX9988fGPu8+ByT8fvf/t
31cnrt7fe+baqv2nS2rXJ+bNsCfkR6SMgRAnkCGXayFTvrly0Eno2gy+Erk0
Y1AP4UXX2BQA4Io5LqsJ+xFPYmJJDCJD4E1gDscxhabQwrKlC3cc2fvbrdHz
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
9qMSCBw0iubujkOTXGf3kOQLfRyhEU8HAl0FNEINnlJkQ+FIbBKRz+GpvdBs
nip4SsWKFftOLj98ds3xizvP/wtY1uw+tWjXqcKyNelFVTpHduGMJXDUo0lS
Y3BCaEyOMTiOyJQIFKbBCefI70JTuAQmMoqOzELHQdxg+9EkQq3V35EkN4WT
+WocQ4KhiTywTC8sA9r3UC8CiSHhywyQwjzRVLehvsPc0b5oCtQ3I/y+Gurt
5UsEFF2qSEBGU5H4A+suwYT0jYdMBDrJEoBUkqiu4VYahkIjsjkeGJQn2tMU
oFlTX7ulfuGBlXXryko31s7d1VC9ta5sXU3phoWzV1VOX105bedyJONsXjgT
lgdWVyc4DNFWfahZA+nGpJHpJCIVn6tks+xqZbLVCjoZhTyAKcEemmQwx2Mo
cjrPSGFrGUKD2hwZkzEus7AkMX+aI3lcWOokvX0kjuXPU9qt0enZYyZeuvX3
8/dvZleV500stERFpubnjp4yZc2uXZfu/Asonvvrxo+/nXNdktML7bunu7W9
rWfA+fJzCzKlttt59+2XC38/fN/lPPPnPyAFEn8rhJShGLKbh+9wPGkEkejm
4TFYfniBgm8IZimM1vgMqb8VtjyeLVcEhNEkxmF4jjtFYE7Mqd28b/fZi2u+
P3340s3jN+6d/efJz3ee/nrnGTB5/u6zX/5+ePbmXaif/v4X6vTf/5687aq7
p24/OXL57sELt/b9fn3VwVPFi1ZnFs/PmDQrY0JJXE4hHJgiRQDopJcX0ceL
gMHQvP3IXhiKN5YKKEJrAwJhCXoCPRFCLryLXIxM5oBC4gd1BovnUBgSNzdU
UERazdq91RsPbvjx4sbTV3ecu7Pk0C/A5KxV+9MmLShZuC0yc6pQG5k1epZY
ZWeLAizh6ViKhCczQoF7BKcKlgB6N6wjc5MofCpXxZOZFMYwdUCkVGfnygIZ
Ih2BIfXEMId6kXywTCJdjMKzh47AovEstd5iDAzjC7Vff+MzdDgKhBHYg2AO
TMK6C0LkHCIJSes4iOeDoDI4UhBJAoONDB/RuDQa0r5xZDqKSAYmcXSKHwEj
kQsq5pasW1J1YE39yrnTtywug94NMdx1shuYXF8zE5jcVT8fmITlwTULooKU
sVZ9UkTwyJTYotE5MydPKJ8xraZ05tyJ45fMnTV/0qSZEyfNmj5n5syq8VPK
rZE5yLCYLpwhCaAIdGxlkNwco3WkaR0Z+tBcWVDaqEkLZ9dsKl+6qbxu9d+P
n37p7mrp7elw9r1tbupCwnX/x47O5t7+B69egyTef/6yrbuvd3CC0AC829LS
MzhE+W/j+xvP3jz82Hrn9ec7b5pftjtjRk1A7s9GE6SMm5o1uSQwJllmdkjN
1uiR+eNmV6cWzuAZbFytBQiUBYQrzVEhsVlcdTCKKaMrAyNyCotrG1YdOrH/
/LVDF298e/nWsat3Tt18AFgCk7/88/Sn63ePX7714xWkjl+76apjg3X02u3j
1+7t/fmvnacv7Th1sWz1DnvmOK7RxtFZ0sdPTxg5zhqdKtcFUxjIcB8aTcXj
mSgMFQr5ElLt4LQESAq+GCpIItAIThuWRCoPFAaWgCt5EAy3Ybjk/Cmr9/24
dOcPW89cXXn0/Oafb9Z/+/uq7y7kzWswxBRkTlzQsOOUQBPBk1ltkTkStR1P
k0HeZAjUoHjIlTgs0eDpxcHYi2NC7wb8AEJLZEZIRDqQyZUEQEin8zVg+Id5
kd19KcAkjSVz9ya5uXm6exKUanNcQg6Q5uGNB5GEDw/ryHWpaAqsA6IuP+mC
838Gi6hsMksATMIKiCSdzgcs8SQ6CkfyxhEwdDKeSgyPdGSmxK1cWLl/zfL6
OdM3LZ4PIulicmXFNMRVLiuDjLN7eRkkblgeXlebERGYGh6UGB6cFGlLjYtI
j4/JiI3OjI7Kio6ACjMYrEb/YFOIwWDRBURwJUF0vr9cHwEG0j80FXKixp6s
D8syRuYGxoznG5IiMmcWV6w7+NOVN+1IePnY2f38/TvXTMj3rchT6b50dXb/
j3t0tnT2NLd3uR5UB/86Orr6Bnv3nVdv/rj78EVrz4NPbZcevrr/qeu7czch
57oNwyaOmf6kpf9F2wBUs9N5913r9edNv9x6sf7Q2W3fnxtburC4YkXS6Olx
oyaPmlI2srisau2OPWcu7vzpwuaTv+3/4+r3f93+7vKNo5dvHr96+9SNu2du
3Dt17c6xSze/O3/t6B//U99d/H915NL1HScvbP7hN6j1R87OX7E1sWCaf1Sa
f0SqJjhKpAmichXIYCMF2U1YLN0H0iaRDWTicAzkLAmeCfsUXofdCl8CnFDI
/gXZgRABAQf2L13sgaaBJ59aWb9q74lNJy6sP/EH5O7DV59Wbj9etfXY3NUH
Y0bPkZpTZy3aVrF8t8IU640TitQ2YIzO0/niWGJloDcW0WSwBMig6OBVOcjA
DpEL1jExqyinYEagLckHyx3qQRzhQ/X0obmu5vPDsRgsuVZvg4wGrgPIhOIK
lPAhgUnwk/CxYR35Q0hslzaCn4SWDXC6+jiOzITGTWRyyAwOhT54mRiZDe0b
Q6QO9/VDkUneGD9HmHV0btaKhVWbly1aWY5c+AA2EtINNO7l86cAk7tWVLqY
3Lp4FoTub9cvjA/RRJs1kUG6yGD/GJslNtQWZ7fGWcwJ1qC4kIBwf31GTExK
XFJQoD0wJNpgRu61hTxl0hQpD4gyhKVak0bbU4sC4wsTxlTE5VekjqtZuevn
c7cbWwZv89js0saWFiCwqaMD4bCrq72nv727r6WjG7korL2zp7e/pQWyjrOr
q2ewdze1Dd7B7HXnwN+NHx81df9+99X3F2/fetO+75drB3+7/rzT+dnpfNo6
8LoLuSj7eQfy5asO5+UHn09cfLDx0M9VDbvn129dvefE4s0HV+4/tvn4L+uP
nd17/uq3125tPv0rYPbthWtH/vjr2JW/f7xyG4D8/sJfUEfO/flfHT7/X13d
9/OVnacurjl0em795pRxJSpLLEViJPCUaCqfxJaADaMwhLDXkN2HJuNwNDpV
QCZy8FgGoAhkuviEdWQaNoGJKMzgLBooYJLGlQ7zIX3thS+aVbN4075FWw/v
P3drzQ/ntv96a/mRc5t+ul5/4JeS+t0ZU2qTCyuCYgrKlu2cXbuBLgr42pMK
0kdhIU+SxRA4yF1nQZDxyEwk8JagnCgylybSSY12TywHurw1PB1Plbr70nyw
bG8Uw8eP6YOmU5lSsdRfIjOJRDoOR0Ei8Xx8yEOG+UK0ARRhCYIJvdu1gpz0
GYw5/7lKxFKyBDgak8DiUDgQ0nkAJIGAzFWD4OOJwftRqG7DhlBZtLqlC5cv
XLC8smzDosody5Hxc1f0rpszcXXVDGjciFT+L5NHNixKcwQkhBiR68Jiw+ND
7Wlx0fEOS4ItJMkenBUdBlja/Q3RoeFRkfHxiSMdURlklgZ50p85VmOJlQVF
C4zhgbEFcaPnJY6pDkyYHJ41e83e336+8fLvVy3A1f23n1xPN3ZpIyDnqr5+
pP77NzDg7O9H5NKlkwjP3QPPmrv+fdd0/cWHi4/e/X6/8eLjD1cb2+587HvQ
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
+/qddwtbD3pGdwnUy+je+fxmckP/zMylO8iMv6cv/nr/9i1yO+jrm+8fP3z7
dEAjUt/2wa+/P3v/5tMPZGrY18/fvn348vPdt9d/P/7y+PXHhy/+3L3xz92n
Vy7/vbp9mzC2NrF1a+ve262/363cfbX859P1e8/O//0cGoSBhU3s8ExhE/5s
aV1qWX1ycW1GZVNpa3cVlliJ6avGD9T3UgBLUMuO4WkQzPZBaidlCrDspy71
TS11jS/gxubwk8u985uYicXmYWrz0GQdYTChsMLYzUdCXU/suJaWsY28kg5K
WI6DB3FGFjbklh10kjSDZmTkPsrEfdB9IUXTRhAr5DkOhyCcIyhOTsikwryC
4vSsvIAlHQOHkpGVb0zKmaLqChyxkUjBjU5D0u+mrrSPLDYPLTSSF9CkufQ6
Qkxhi2NYmk3QmfD0ysiMSvsT8Xr2/goGdhJqxoLyWvwSypwCsgiTPOICQnLi
4krCosgbN45yiDGg5IRVjDTsfMx8o45b+WjYBlj6xRw3cTFzC9EwcdK3dA0M
ixeTOk7PyIUM+GTmpaOjp6fnOHqU+/fDHNyC0nT07CCbhxg4eYVlodWkrVgo
Ia/OwMIvICKPrIXLJ8HCISQMvejBoh/IMoNiCigxuSMsPEzsvPAvZeHkZeLi
ZecX5BQQ5hFAptZCDGRn51dRVq8szO/DtjZVlNSVFHTUlJVlJpemJ7aV5eGr
C/GVeVCd1bkhvg7O1gZWBuoulsZR/n7Bbs4nXBwzzkSeDvdJiPYDJuNiAuLi
IoJDAwMCg4DJQcJgenxaQvTZ7Mzyuvq+sakLV+5+enuwABry3rdX++cfvNp+
8Ozikxf3Pn15gxz/+m7/y/sfnz/9+EIDEtFG2P7vELUPXz6/ePz80/O3++8h
Dn15fev+v1f+vLy8c33nxu7WTerMTt/oxsLFh1v33m/f/7R5/+PaX2/O33+7
/c/rg+c7F+cu/NkzudTcP1bXM1Ta1gN8lncQKjB9tV1kONLYN0JjEtDFjczi
R+fwQ9Se0VkCdbmXutw5tgghCDex0jWz0UyZrusfyWro8IpJkDM0Y5OQ4ZSS
ET+uxiciQxuNwHXw5Bp87Q96dihGFl7Yh6LdYabdP0EOMvExswqAdwOT7Gx8
B8XDwcknIi7HxS8CnRtKRtncNSAhv7KsY6Ac2w9i3jE40Tmy0DE009Q/he6b
qOyeKMWN1BDnkirxwallLhFpVr7RHqfSghJynUPiJTTMuCRVGPiQ54aismoS
chpCIgrcvJC4Rbn5pXiFlQRkNCQ1LNRsvAw9Thr7Rht5x+l7RILvq5h72PpG
OflFmtv7OHuGKCrrAY3MjDwsTLyMR7mg/viNDX5yenYUu7A0C5/4H/DP4RaR
UdGVU9EXkFRk45NAJmsIySmo6guLK9H9xiIioczAJsgjKA8OAseFpZSRhd24
UUyc/Awc3BwoZMTaYUbWQ4cZ+AUlZGWPQ5P5+29H406d6m5trirIq8zP7UBX
FaaeqcpOpWCbmguzsOV5PbVFhPoiCx1FH3uzg3XVbF2NjcPdXEKcHT2tjHWP
iXk5Gjlbadtbah9XkNLX03J39YiOjCvOKzI3stDWMHR1DjgVlXbmbFl0YlF8
Zg116+7azafzVx9Q1q9QNi6M71ymXry6cPXas29f3+9//7T/gzYaDXL3h2/f
3n3/9upgqOTH/f0X797du/PX7urWztzq3a3LN9e2/75w48r6BUrfaG/3SDNm
sHtoCb757KV/l268WL79GqRy86/XOw/frN95Onv5LnCYXdtW3NIFBAKHVbj+
SiyxpLW7gTAMQDYRR4FJkEdgsnNsHoSRxmTv5FL3xCI0opiRuY7RRczYUsPA
BJo4nFHT4hIWpWhoIaqqKaqsKnbsOCMb4kScPEK8KOS2GwMz12+HmX/9gwmy
9hEGdvgIxg3bo0yc9IwcoDx/HOU6woiwijyhY+eHBAQdJjc3NGZCPEISRzkE
nAPCQ+LPFTTisCOLVZ1k+DmbB+DCmazvG63tHi3DDeY0Ec9W4cCyE0sxfvH5
7pEZvrFZZu4RWlZeTifiDBz8JdVNmAWkGbhEOQWkBcWVRMQUkQUExJV4BGWZ
eaRYBOXEVE0N3ILdojL8kovM/M+o2QepWPoZOAdbeISbOPhBKyKrpKupawEC
Cz8wSD0npwgDAw8dHQOo3y8MkOHkwf0VtE1YUNI8Esd4xRSVtE2llPUOs/Af
YRXkEZYDDuFaoL17iF9EkVtIHhmGJIm8gYJLCOyAm5mbDzpMaCPZuPnpmdl5
+EXhkgQmWZjYTXW1G8oK6kry6otzm8vza/LScNWFRUmnSpIim/OSe6pziXWF
Xpb6p7yc/KxNTZTkg+0c/K0sQxzsvcwNrbUUo/ydPG31PeyATNPIsODs9KzS
grKsjGwHO0dLCzsrKydDY3tDU0cDc3c7r5Oh8Tk4ysLW7afL1++PrF8aXNud
vnRj+5/Hj79+ff//Ru0id3veffvxFonhP2kTcBCp/Ph1e/383Mj03b1rOzMr
u/NrJFx/XERCaUkjeXTlyr03lx58mL7wYOH6k5VbL5bvPF+/+xzUGOx74/a/
6O7BzOqWpKIasO+08gY41zR5BNeG0/0fkzSphMIMTXaPzHSPL3SOztFSedvg
bMMAtQI3EJlZpGPnwSurzCYC50KOV1yaQ0CUnUcQeYDLBzopjDw1Y+aCYmLl
ASz/oGcFFKHAmGAftoAlGBwUEwuK9oAbToeAgARKSJLu0BEIO9qmdrlVTdmV
zcUtPdjhBeCwgTjS2D/cQByrJYxU94wWY0ip1fio3Dqf0wXh52p84nIdg5I8
IlLtfGPVzd1VjZz07f2QCZuKOmwoaSQ1M/Nz80uCEbNxibLzSvCJHZfVNDNx
DfGITvNPLPSMz/U8XWjhF297Iikmu8YzIgVaykOMvFyCMkoaRmC4kLJ/+Z2Z
Nsub7hcGNpSk8DEtZrBsPillA2tNcxc1E3sBOU0BGTVbzzDJ4/r07KJ84krs
KJBoDVYeaZQY8kYeMVltpIvgl5RU1BSVO468m5VfkJGTh40PabC5+KG7FoRf
DjQ2Soqq1iZ6OSkxVbmpXY2V6IJzFecSutFFoS5mObGBDTmnuysze6szT7nb
nbAzt9dSdTPUS/QN8DY2jnRxiXF3VkKxB9gZ+dkZhnrZ2RrpKUqIu1g7rC+s
X796o76+Me50gourp5GxhZGpjZaeuYahlYmdR15V69TG5fO3Hl9++Oba0w+X
nry5/PT1w8/IK28+0OY4/EDq/XfaFMUfsIU8/uobsqzfyxdvH9599On5+wFM
D1RXS2cDuuPqlfv3H3/evv6kpX+WsnydsvHn8OatofXrlPWrwxtXRzeQERRl
7b3nKpsASCAzt64DPoJaVhw0k4Brw//GHCjYAYsHo8SPTCNAUqbBLtspM43E
yepOSgWmP/B0mrqpg6yGgaKWscxxLQFxWaRR50ZxcaPAfJlZOI8ysDIwsrGy
cXNy8f9xmPEIPTMcgS3sQ9EfZQFcmQ9SAyevOM//DrcAmDl4hQ4zc0P6PnXm
XHV7Ty22v6y9r4Ew3kyabCaNw4UHKl1Pmqjrp5Z1D5+t7QzPrnGOOOccnh5+
ttzSK1pA3sDRLy4urVxRx0ZAVlv8uAEteYGfgnuCuEGDx8YjzisiL6FsoGvr
5RWVFp1XE1vcfDIXHZZZF5hUeioTfa4K6x2ZZuzod4RTBLI2r5g8n5g8I7cw
3SEG+Ah6yCelpGpsp2vvrWXjoW3rrWLi6BIcf+J0hm9Umq61h4qho0doPDO/
nLlzoJKu7R8sQppGztLKhrIqxqp6toLSqvQcgiiJY5KK6nwiUsjDbpQwIxsX
GDfoJDQtEJqY2ASEhcT93B3zUqKKUmMxNfl1+SlpkchLxEpTT5UkR7QWJhFq
snqq0511VIJtzb2N9SMc7e1U1P1NzVL8Axw1VW1U5YPsTRz1j/vYGSdFhHo5
2KtIH0NX1NSj67Kzs9vb2ycmJubmFpaXV6dnFmbmV6hzK1OLm4PUZcrs5s6t
x/fe/Pjz+ecL/7z68+WHpz+QYRUvv/3PCuFQb3/s33n+5uD1hft/v3r94v3X
bz/3IWvvbVzoaevqx/VR+sdmp9eu33wEGYcyt0ec3uka3+qibvVMbx+MDtrp
X9wmLW5DxgFhzEG3g1kDhODaNO+Gg7ADcCLO2D/WSpoAIEEz4WM7eRw3PIUb
nmlHQJ2CQoM6tRAi04qcAk4Z2HgY2bhqG9kIiyvQM3OCQTMxc7CwckEBjVBA
Jhs7DxQQCAVAHj7CBEDCFiGWmeswA/dRVgFW7oPlJQ9uTiKPM/iEtYytjmkZ
pBVVF6A7GnpG6ruH0dCZkCZbKNTm4YmmoakGylQjZa6aOJHVTASc7EPOatkH
W/vE2njHSqqYK2jaOnicsveIkNOwkFY1Fj+mjcz2EpEHv2blEQWVg30hGRUQ
SQMHX5+Yc2dKm7Jb+nPaSGGZtdG5jUml7SHJRTa+UQ4BUSKKunSHmH9l5WMR
kOCSkP+VjZ9dXF7X3tM5JOZURnFiUT1UVi0uPLUooaAuOrO8uLmvAkOy9YuO
TCs5buzsEhjn6BejpGfnFpRg6xmhZ+VlZO0lp2bEcrCcppC0Iq+wJCMHHxM7
NygkbH8/ygq/BwERiGOi8BsTF+AuzU5sq87PPxtdnhlfkh5bkRHbWnauJvt0
W1k6Mqm2+pybkWaMt4uHsZ6ZkoKumKSTllZmeLiTlpqFknS0j0NCsLuvo2l0
kH+wl6cwJ39KfBK6qlJJUeHIb7/yc3Ppa2r6urtHhISeS0k/m5xe39A6ODIz
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
BJ7NyGzGV5PHG8YXW6ZWsYsXetev9S5dbh1baSDNni6q13c9cczI4URCZmZ1
GyS7Ktwgumu0tnscTZhuJC21DK03UVbryLPNIwutY0sto4vto0vYiVUAsmN0
CTO23DI019A3Wdc7ju4Zg6rBD1dgBys7R/NbCHaBsfr2Psb2vlyCMof+YOfi
EaeNDWZkRVZWR5YkEpTikFDklVUVU9ThEVdiF5JT1LHwP5WUkleTXlR/rrQx
u7wFnDG/BpeHxnsZankaaIfZWbnr6tgpqQabW8a7edgoyjuoK/pZ6AbYGJ7y
cgj3dPO1t5dBienIK9fl53c31k2NDVfUVFt5eCrb2Fqcikrp7Gra2kSvLzfv
bpD+ul67NJ5KaKqeJhSR23Iw6Mz6itCkuODY6OCIyO29Ky/ffKWtwfLi2/7d
1z8vP/qAMHnj+dzOP+Orfw4uXOoeX6vtGkZCTXNP2wCVNLcxvLwzsXphbHl3
cBZUboEGJBTsgBICfiCDUIAZEAjNJOwDjbCDQDi1QnN5+Di2fhGYbO8fbTm4
kd5AGEX3Dld0DmU3dUH8zGvBp9e2xOYVn8rMSy6pKG3raCAM1OCJ9T1DcFFU
YvpAsYua8LQtCDgEFrhkChqwZa0EdBe5iTCGGZyB49D65tZhS9p7ijHdgGLr
KLV1Yrqij1TdR0Ym3ZBnQCSBSTxpGds/ixucgV6isXcUMC5tHwAmsxoIKZVY
f+gkY3Mjc9B+8fmu4SkuYclGzkEugXG2DkGKSsb8ggp8wsfAE6FDk9E2sgsK
9zuTmlRTX00aa6Uutk6vYea38MuXulYuE9ev9i5frOgdjy1Ao44biKmbJhbW
FjR2Fjf1lrX3V3SQK7CU2q7JxoHF1sH15sEVNHGycXC6ZXiumTLbSkEGA0C1
DM22D83BT17fOwYxsxo/1EAYR3ePlLT15zQRQNsj0krs/SN1Ld0hdgmLK6mo
GSkp6UrJqEnIqEoc04Dcx8gvfhQlySWlLKqoiZJUgmgmo6Jn7ep/Nreyto1Q
2oAvru3Iq2rNqWjNqmg55Wkf7eN0Nsg3Lci/NSOjNDIqxtHeQUXRUlHa01Qn
1NU6PtTP18nOXFtXVerY6bCom1evNDTVG1ua/8LCIqShcbqqpnF+nnjjBu7S
Xsfe+aJxcskoMYvQEl2Z4Xw6gEmKQ9VUo2eot72rPasgJ6egcHiciu0kPnnx
+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
8GxJc2lrf0kLEeAEFIub+3Jq8WmlzVlVHVnlbWlFjaczy04m54Un5kSnFSVk
V0SfK0kqrI5ML7APOKlv66Fu6iAsr/krEx/dL8yHjnBz8EnzouTYOcW5eaX5
UHIs7KJH2UQZeCQ5RRSBSVYBOR5JFUN7n8izBSnFtfG55fB9TqUXBJvpBVsa
nHAw8XI0MjFUVlQSDvR3MjVUiz8ZkpmYEOTlbWFhpaCjK21sktXbc+Xn972X
r3sXl0ow7f4JMTrWJnS/0YlI8bZ3VI8M4VbnyKuThCli69IQfnuStDMxsD3e
9/Lm2s4EvijmRH5EYGFkRFVyatqpOE8nr9OJGYsXrj/8uv94f/+fTz/uv/v6
/uf+o9df7jxDnoNfewIO/mLnn+eb95+s//UvtJqzV+8hddBkzuzentr+k7p5
Y2Lz+tjGtZHNa6PrV4dXLw+t7EHDObi4Q17YBqiQmDM2D0D2TMx3jyOzHkAP
gcnmngFQSAASaCRSFwZmV8jza0OLmyMr28Mru0NL2wfLrO3S1g4CMkEzITqB
ZkKWBzenjQ2GsN9AGIYesq4H6SeLW7ryG7ClbT0Hw3THaNoI1MFHwA8cHD4C
kJiROdiH4/BnYNsCHeDoLH58Hj++2Da8gCZOleDH89qGAcvMRtKJ1Cr/M8We
sZkhqUVukUlCKrpCx7WggVS3cNC2cfGOSsqt66jtGYTv3De/BY0NefMSefMK
jUnS+Ws9K3vYuc3q/pmWsbXu+d3WsaXoolq/xMzE8obkqobYosrTJdXhGQXe
p886hcdb+kfaBcb4n86Ky61JKW09W4IUYJlS3BSbWRGXVRmZUhSTWhSbVhyZ
nBsSk+ofccYvPCHgZIKasQ20tdwSx+iYuOl+ZaQ7dFC/MHKhpP84yk3PxMfG
IcLIjOLiFBMSlOfkFmfkFGXhk0QGNYkr0VaxFlPWt/YMTS1pyKpqy6vH5Tbg
TpkZBBhphTiaRQa5ONobKCiKhEV4h4Z6ebs52FqYhgUFi0jKaNs7kC9c3P7x
dfrJvy2TkzE5uQ4B/lwi/Bx8LOYWWpjmkraaLEx1Rk99zlBr8XRX3VxvM6W5
YrStdnOkZ3UEgylNSvG1zw/x6UhPTfPxD3NwC/MLik5M6Z6YHt3d23364t/v
+8++IqPQ/3n85v6rT3eQ9xe/u/r41YV/nm39/WTtzsOVO/8s3LgPPr5048Hi
9ftLV+7PX7w3u4OQOXn+5tj5G+Ob1wHLkfVLlNULlOU94AroApYARSgCdRGq
kzIFiRtLGsEPjnUOT/SOTwOQ5P8BcgOAHF3fHVndQxRycQuwhBpY2PzPxIFG
ZGbuwX14KEj01fgB4BCqqLnzIN0Q63sp/xk07AB10FXSNBPJO/+vjZw8EEma
p1NxY3Od1BXsOHIXsbJ7AqSyEDOWhu6Lym/yPp3rEJbkHZdhHRgpZ2CpZuVo
4OTjF3s2JqskobAKQgqkJ+LCeSQAHjA5sHEZvBuMu2/9UufidsfMesPIYi1p
rm5orpI4mV6PT6puTUdjkiubInPLYworws7l05g09Q419Qx2Dk0IO1sCDh6e
UhJ1rjI+tzYipcgvOj0kPhNiS8DJREDxxMkzgWHx9m4ByprGPCKyRzkF6Y4w
0x1i+JWZk/baR2YuYXpW3t+OcPxxlIOOjuGX35h4eJApdUwMvEJCchx8kozc
YkxwRFAW4PydTfAwhyirkLyWlbtPZMrZ0qb0yrYER9twa1NvEx07A1U9DTkN
Tdm0tNjI6CBtLVUNDTVNfX3XoOALT59d/PIlb2w0o78vr71DWU+Pnp1F7piU
rCS/hb4itioDqJvpKh9rzafUZ8/jqy+O9e6N9G5Teq4tjFCJ9XV5cUnetiHG
Wkm2duGGZt4GpsGevpEJialVFUnomomrV5GXNH38/uPH/svnn15++vn40/e/
33659fL9lScvtx882bj3cO3Og+XbD4DM1VuPVpHZtY8Ay4ULf83s3KFug6H/
Obl9fXyLNvL8EnBFkzvy4kb/zErf1BIBWkFw29FpPAWceoowMdM3OT8wvUSa
Wx1cWKcsbQ0vn4e/MrZ+cXTtwsG6fzugtwML5yHFE2fWaLc9QRsPhhKNAnig
jRWYvoJG3LnKJijAEgSTNtWCpoRQgB8gB0DSsESG75Kp/7efpCWgJtihzGDG
Dm5KUxbRxJmKzskSzOi52t7Uqi67kCRDj3DHsDMWfqcAG9eI055RyWmVzdAh
QMG3hTayb36bsnmVvHYJjBsJOGsXCSt73Yvb2LmN9uk1zMxWDXmujDCZ0zGQ
1oDPbOnObu3Jaes+lVMWkVXidybdNTLB7WS8TUAExCjbgGj3k6l+sbmeJ9Oc
gs54nTzrGZHiEhjn7B9l6ezv5BXi6h1mbudx7LgOJ68oPSPX7/TsjBwoRi5+
Bk7UIQZWul/o6X45DHweZeE69DszB7cgsnYQpwAXhxD9EdZDdAyMjNxsvMgE
3iOsqIMVMsUOcwr+AkbPwM0upqRj4xkYnxGRWuBnqB3n4RjlZudspOFqoR8a
4HIu9bS4hICmnrqonGRCTuadd2/u/tgvGhzMJJN9C/KDkpItHB24eDitLQzN
dZUCHQxwxYnEyrP43FPjdenUhuxRdPYirnZ7qGuT3Lk0gGksTXG3OG4qjQo3
1g3T1UtxcHFU0dRTVjlx6qR3XLRrQszIxb3XoJAv3n5HlhNCnjy+299/+WP/
0efv995+vvHi7eV/X+49er56+5/Vuw/X7zxG6s/HK9f+Wbz499zevamdW5O7
t4DJifPXxjavAJbAFWAJQA4tI7CR5tZ6IZiMTgOT0DceADkLQA7OrR7I4/mx
td3xzQsAJPX81ald+D5XaN8HOgHi3GbP5ApNJAFIoBHEkGbTWTWttAIDhYO0
WT+NfSM0JgFI3BgyAQ30EN07XNtDgR2aNv5H4/+ge7B6DDCJn1zDTW60jSwD
lmW48eKOkfxWkpFnhLqdn8vJZJeTSSeS805mlpytbM5uwFXhh4BGwtz51pH5
pqEZwgI0k3tIQdZe3gUg8XObHTNrwGQFaaqSPNs8vlY1MJPT3n+uqetsLSar
pTssowR83DY40twv1D4o0iYgzMwr0Nr/pJl7mEtIEm21DT07P1uvk5auQUY2
HhYO3hr6lqKSyqwcAkcY2Onp2Y4eZYf6/SjrIXqWX/5gpPud4QgTBwsnMmWJ
7tej9IwcdL8cYWXlZWPjo6M7zMzEJSwk9euvDMjAez4xFh4xBg6hP5j5fmPm
PcyGOsIpwiokK61lYuTsa+Mb5m6i629jGub8//F1FmBtZV2/p0g8IcHdXQIE
IgSChODulCptoUKhtBRogRaKu7u7W6EChSp1d9epu9u0M73r5HR45/3u/S7P
/9mzEw4ZGn75r7X22eKx2MNpdbCPG9ssYW2kpaWxko5y2OqIp79+XPzwOm9o
ILaqen5ahnXo/NVJm4LmB5ua6POsjJ0s9ZIjgzpzN7SmRvVmRg9mxw7lbRgr
3ry3ueTUaOeZ8d4Dw60ZSZF6ijhnI3U/U8PV9o55EVHe5lYedg6Lli/3X7mi
dtfY2dfPXv76G1D8+QVZRfZDuD3gG+HBiw8/f7/z7hNgefnleyjDQWcevkG2
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
sbfjhvt6hni7RS0K8/fgu9gzF4f7Lg73sTLXceRZ2HHNdDRkedbmfp7O5sb6
Wzcn9ne1pW+OX70s3MpYx5lr5WHD8uKyAuyt1wT7QTq6Ntg3cUno2mDvxR72
811tQgQsP3u2o5WNk7VgUcji+Lik8xeuPHj8DFB88urVo2fPP335/P379//s
IP3r7xevXv7588fn79/ef/365tvX19+/P/r06drzl2fuPzp579GJ+8+AwHOP
P1x++gV0/iHilmcfvT354Pmpe89O339++Pq9XScvAJATR0+fuvvo9L3Hp+48
OH7z7rEbd07cunfq5h3on7j5ADla8cb9w9fuHrp8F7BEmYS6BjR29BI4ZP32
vWV9O4q7xktA7aMbc6oWxqYuiElZu7Voa1kL2CYEbvBJFEvgEMis6BoH24Rn
gEYoZ9CKBoROukC9EY3mSBo5dbgHovbkLOQGDTsONu4+Ai3E7rqRmTkmS1pH
a/sm4WH14BQyf2z7voZdh8Ek63cdb9t7rnnP6aapU60zp6vHD+V3T+R1jW9t
6Emu6dhc3ZZc0765qjmxvCGhrH5TZUtieUdq7UBiaWdcTmNCQWtiXkvMlqrV
m4oXrEoJXR7vExzp4BJgwXEwMLVQ19FXVBXuRk5TpJDkyWRZKkWRQlEAh8Rg
qMAh0AhMgk+CcFhJeEZUlITFy2JwMsCkOEYKmJTAywiZlKfKqKPbtSF7Wkqp
kKRVkW1XMVQsRQ5iN4ZIAyZFxHDzRDGSkjQNNXW6qbEN28pd4ODj7hQVFLTA
28PN0cbd3V5ZncbgGCVtjjYxUvZ2Yoe7Oy71cg5zsuPoa2jJ09I2bWiqLd8Y
E7l6WRjHzMCNx3a34wpYlramRp621iEChwhfz7hFoRsjwqPn+y7wtPNzsADX
XRO+YnHg8sqyxv2HTr389P3hm3fofizIIU3Q/Qth8evHDx8/vv/y7TOy5dpf
f3789unNpw9vvn559+ePZ1++3nj28sTt+0du3oPQDG62+8zNA1cfHb/76uyD
D2cfvEMq8fvPTt59fOLOo30Xb2w/cnr8yKnps5cvPn5+5dmry09enHvw+My9
B+cePDx398HJ2/dP3X544vbDYzceHrn24OCVuxDxIWpDMrnz1HXEJGfPdew5
Wj+2D0oJYBLiZlZtN9hjUNRGyL7WZ5YnFzWklbeCT+Y19BU0DaARHFTcOlzY
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
lmZ6LIahuYm2hoq0FBmLFxcRFxEhY7FKMnIaSiq9HT2vXrxGT2cCW0SP+/zz
x1/ffv719cfPzz9+fPj2BcqZF+/ePH7z8tHrFw9fv7r34tW1x8/O33pw4urt
E5dvApCTsyf6d81kllStWJ+UV1mfX9O0Oj41Kavg6Pkbn3/9evHz13Nkrdmn
p9//evTlT6Dxwcev0Lnz9uPpu39cffzixrPXe09fGNt/GNrDl66evnnnxLWb
kAwcvHxr9sajI7dfzFx9PH7m7uSlR027jo3MXt5S2sz3W2TnEWJgwbXme7Id
PUKWrvYMiwAsV8ZvW7h689rUoti08g1ZdQDDuqzajYWNcbm1cQW1CaVN8cUN
aTV9Oc2jxV27SvqmAKq2vWea95zM79lVOjRTMjhd2LMbvZmyuaxja2VPVuMw
Mohd2RWb3xBf0rqlbjC5um9b02j9jmOFPVMVw4dKB/YX9+0tG0S23IdOw86T
Rd3TyZX9ULMkFrXnNI7lNY8lF7dEpxZ5L1rr6LtQx9xOXttMh87Vt7AxsrKz
cfIxZiAHK6vrceTV6ESaJpGmLiWnRZFSExXmhEQogTEUcTE8FkPCofdl/mHy
N5AYaQAShFbWc0wKh32QTeRQJufhKIjwJBEcQRRLmGNSDAMiQzUENApFwROg
WhcBSUtRzYz0+cKo7cLjeAt43gIbHwHX25k79vyP0Ue3M8f6w1I2qluZ0jlm
WduSzbWVg/k2YY42kX6e810clvp7MXQ0oyOWdLc1p6VsCvLz1lRVUlWSNdDV
sKDre7nzF4T5Z6RtWh+7uq6qvLayIjMt/cD0/r2T+47MHv8l5PDT56/v3n/8
W5hMQgb58duPz3/+9enn3x/+/Pn846f7L17eevzk9tPnAOStJ68u3X104uKt
A6cu7D9+DoDsGd1V3tQRm5TqFbpgTfymhPSsFTEbJ2ePvf2GbMj29uevd8gx
9B/uvfkIuvPq/fNvf/3x/sut1+/R8H37zQcI05Mnz0ILtdKhy9cPXryx9+zV
PWevTV+4O3PpwY6zdwaPXAYNHLwwNnvBc8EqqoqBLp2tpmuqY2ypZcxw9g0L
XxFrwhH4Lli9PC595cbs+MzKNSnFUZsLIGImFNbHZJavzSpLLGlILm/NbBiC
YJrVMJpeP5zWMFw6tK9i9GBKw1BCVU9STV9682h+1+6c1onNFT1xOY0xWTVR
6eXLtxQt2VywclsFFMgrtpQv3Vwak9O0rWGsqGumtHc/qLh7f0bDjm31EyU9
+6oG9qdV9UYmFYZFpy6JywAa49JL47YWLone7L9oNd8rzIBhq6hpYsiwseK5
6JmyFdToZGltAlUDL6mOwSuRJNVkFHQASwAMWYKNDDDSJDBEZK9CPAWPowCT
KI0okCiTGIwUOuCDMimK+Y0luOU8HFUoigiWLIolApDzMHiQGJYAglcWlyCI
Q80OWIqSoXLH4XDzRERw4vM0VRQgLLs72LjbcV1smD5CIP2cuD4Czulfv/IP
TkZUFmh5OGpwLXgejgmJsVamulxjHStNZbqyrBaNYKqmaKyhtGJBSHdbU1bm
tpiY6KioFTm5GaNjg7OH9x04OL17cvzEycNj24eGhwebm5tzcvImxncP9I/2
9Q7/LXTIz1++oYc7fPj658t3H7/8jeyM+uHHr9dffjx88+HGo2cX7z+8dP/J
1YfPr957dvba/dmTl6cOndq199jgjunyuraErdlhSyIXRq4JWbScwxekZORB
Cf/9169Xn//88Nevd3/9uv/y/YM3nx5/+AblzLOvP68/fXXzOeSib689f33i
1r0DF6+evPPgwqNnR67fnb1869CV2/vO35xCpqxfnzh5ffjw5e6Z01D27r/4
oLp7nKysR5JVM2ZwpRXUcJD5SysZs2w9ghap6lvQOYLgiHVBS+MiN2RCEA+P
Tlm5KS8mvWRZQiYUuWvSCzfkVSYVNcfnNQKZ6LY/Bd27oDSOLWxMquqKKWiI
zqmNK2yCiB+ZWrJkY+7ShLxlm3KWJGaFrt0SvDZ1cXzOgg1ZC9fnRKWWr89u
3lI5kN+8q6z7QFnX/pSy4Zj0lg05rTm1g9k1PZvy6hbHbvUMWyXwj3ANjHCH
X2tztm/oMifPEJ7Ax9Cca2DG1jOyJNCUJaU0xfCKWIIy0IgnKUMGSKIiGyJJ
4GhYgjR6MxqABHjAJyF247FS/wWkhBQC5D9MAslgsMhI+D9YokwCkCiT8zD/
xSQCpARBTBwvJkYUR4TDYSXE54lIEjCmehrOtmwoQDx4bA8e09eR4+PI8eOz
fZ3YbTcuRjZUKLjaiyjQtHgsPSbd1ctZR1PJSFMpwJkXGzG/YEtCc0XRSG9r
R3PtyGDP+PjYzt279h88ML13z45dE2Pjw/2DPUMj/R1drSNjw7X1dc0tbT29
g719w3X1LUeOnnry4vWnb99//LNx9IsPnx+9evvm60/IKV99/ev+64/Xnry8
+ODZubuPT918cPLavRMXbh89fX3fobNjuw8OjEzVtw2kpOWFR6y2thM4uvk4
OLvTFJV7h8befv2Osv3116/nH39eufv00Zuvb7//evT+++MPf958/u7Oq4+3
X386dfvhnjOXIHU898ezk3ceHrhy8+ClO1CwH7h4d/LUjbGjl4dnL/TtO905
daymf7Jr1+FlcSkieCkFdX1NPSMpOUVkCzUpBbBKI0tbNQOGvKYpcniTWwiQ
4LMg2jl4BUTMgBVxLmHLHALD3RYs845Ys3hdWuiqZPDPLEgUyzu21fVltQzH
5tWuzakO35jptzLJNyrRe+l6x6BIx4AVHguirT1DOR5BBhxnZVNrXabA3NGf
4xru4L98cUxGVGJx/LbGnJrRirbptJLBVYmVKzYULY3Zui4lf2N6yaqNGeEr
4vwXrPQIWOLoHsSx82DxXLmOnmwbgZqWMUFSlkJTUFDRlaSpSeDkCSRlqpQ6
nqiAxcvhCPKISRKglJaEwA1M4gmSCDbieGT3QoRJKRyGhgorQcVgEAHAGLyU
OJYqKkGZJ5QoRhKpqeEZjKQoAiRZCCRBFJiUwIlL4P8jMRykB2KiOHFRCSJW
HCcmIkslgO+5CWn0sLECIH3tWD4OTD97JrSpw/1mi8PU3fgmvu4B0ZGxWxKb
Ops6u1pmdm+/cfHksQOT0zuGdk8M3L59cWbvztHxwf7hod7h4eHt4539vZ19
XQNjQ519Ha09rUPbh2cO7Wtqa69pbCmrrGvp7G1u64X23aevQOObj1+u3//j
2buP3yCO//Xr5uPnX379evLx+5VHUBo/PnP3yek7jw9fubPv9JWp/admDpze
MXm4d3BXQ0t/bmFV5OoNzh5+lhw7qqyiBcvayIwBcR9e88W7d+hp9bcevT50
6vK9Z+/ffPt199n7+68/P3jz5daL92fvPNp17Oz02cuXn74+fe/x9PkrR27c
nzx5debs7emztyeOXh7af7Zv+mT35DFk/8DdRzZklFq7+Eqp6KpoG0rgSapq
Glp6hqo6RiZMWzl1A1OWvayqARQOljx3OteN77OQ6eTHdg6wcQ+i2zrrWHJ1
2TZ6bDtzO3dFfSsDlhPbNcjCydclPDJyc9bypAzH4KVcn/l2fgvdF6wUBEUw
HLwNrPiQDzh4BLr6h/Nc/cysnVgOHjzXQGu+P8vej20fYO0YwvdYsigyNXFL
bczGspBFm31DY5dEJS5csc4vLBIske8W5OQRZMV10dKzUFQ10DGwkFPShmoa
OdVdThVPkkbO6KGqSmBlCHh5IllpnhhVRJSCIyDnp9BoylgsDYtFxoKoNDkM
lgRWiYTy/wYSZRLo/TeTIuLkOSx/CwGShDI5T/y/mBQTxyFMimPEoLARFaPg
xYhYEWUZEpuu72bHdOUyvGwsg5xsfHiWIF87K1DuyGBWX0/vscO7L5w9ee/m
xbs3+0cHm9vqq6tKe3pahoe7OzobWzvqOwfbmntbSuvLc8tKu4aHRnbs2DN7
YGzXePtA9+jO7VXNdek5GQWVJbXNzQ0dXU3t3Q3tva2dyN7ke/bPItN0f/w1
e+rM9fsPAcU/Xr47euHKjUcv3vz4tevwmaE9s+fvPj1z69Hs5bu7j5xt6xkH
Gls7R0oqmjckbnN2D9DSM1PTNtTUM1HW0NHSNwoMW4AeT//nr18Pnjx/9/XX
gaMXd+8/eefxuz9efL777MPTT39dvPfs6ee/dxw61bZ96ui1eyfvPDp87e7x
W3/sPHYBWcJz9OrYwQuDM6f795zsnTzeNn6gYWAqflsJ28lXWlVPXkNfVUtP
RUNbS1tXz8hYTVtfz9TSnG1PZzvom1vrmnJMmQ5Me09NYzaH72Xj7GvK5ZvZ
8q34zhb2DuY2cJmdiSUPEdNO25SlqEdXN7Ey5jrSeQKGoxvLyZPD92TZu1na
OlvZOIOnOTi5uXn6efsFu7j7sbmOpubWJnSuOcNeS8fSwTHQSRBibOJANxP4
+ET5+69msT2t2C4WHL6hmY2ylglFShWL7PeoIDwbFzkeF7yRIjxGCg3KwrJa
DkTEQ94oC8LhpFChFTckk6hwOOFMM2jFJYFGIl4GEksUS7iYSJRFbmdjqajm
UAQsJQhURDhJVOLCrd1BBKKkBIaAwUD+SMBK4ERF5mHEJShkPBTC8lSMgboc
00Sba64PTIa62IG8uZYebHNXlgmo69CBxsld3fumy7s7s6srCqrLt+VmllWX
5uZnFZbk1jRWtfW2VrVUbyvJyqjIrexorGhqLKyqzCwqbO7pbOxqLa2r7Ns+
NLhjNK+8qLyhurGrs7W3v7m7r76tp6a5u6qxvaSmfuboMQTLv/4+cenKrcdP
3/7595nrt49dvnns8u3bz98fv3Knb+e+mRMXwSRru4bTcsogWC9dsc7R2cfM
0hZQVFDVVlLXNWWw6JZsdR19e4ErFOw379//+B1JCYDJnpGpwYl9tx6+uff0
w52n7/949eX64zdHL91uHtyx5/iFq0/fgglPnb506NKt6TPX2rcfmDh8efrU
rbED53t3H+veebhxcE9xY5+spilVSUdJ2wgIhMCtrq1nbEI3t2JasCA3Y2ob
MfRMmeZsR6adK9PG1ZzjBC3DRoBQSmfS2bZ0DpfOseY48G3snMwtWLoGpvAi
Kpq6cmqaSjp6OnRzrsDFxtmV5+xmK3C1tRfAZfYOzo58Vzs7Bztbe2s2l2HO
NDU2NzE0NzdlWVnYmhiwWAwHBp2noWKsqmikr8UCKcrpkyVVaLIaCkp6SioG
copagCKUz8AJeiQK0PjfkheOgcsIS2lpBLN/mASHBEHsRiUhQYYCGYRAiKH9
VwQXAvz/ZhJDAiDF8XNAUkCo5UIrKoYVFRUXg6958J95ZBJBSV5KT0vRSFuR
Y6bnyDGzZxjZWRg6MYxsjbU9ORZe1ohnglsWtDTlNTVUdHdmVZWn5uXklBeX
11b3jQw8ePpw/9H93aO9nWO97dt7GwbbWyf6xg5P905sr21vK66taR3oaehu
za8qKW+qKq4rq25rqGypA2LLG5sqmlqqW9vr2nuaugeKa+sj1sZCe+zi5b3H
Tx88ff7S3T/2HDmRX9WwKn5zZUtXz/bdDV3D6QWVjp5BEB+p8sgpCci+hVQ5
oNHEgsnhOfL4LnZOrlx7J4G7F2C5a3of0Pjq/afbDx7fuP8iu7gOmLz/4tON
h6+v3n9x5d7zuy8/zZ6/kVZUPb7/+IGz1/afuTq098jO2dNDe48N7zk5uv9c
z8RsbdeOlsHp3p2HAMjl61I0jZlaxlZGllw608bY3MrMis205tIZlvC/tuTY
mliwzZk2XDtXnsDLmudmxnKw43ubsewAYFMmx8LaRtvEWN/c1Mnd1cGBD3Tp
6Rrp6RsbGtH1jekGpuYmFlbG5pbQmlmy4B/EYnK51sCik4Dv7GDL41gxTQwM
9TR1dTV09LX09LUM9DQNTPTMddUN1RV1VeS0FKQ0ZCgqIDkpDSpVBTkliixP
oSig54NDh0QCb5SfEzKp7B8Bh0QcjShsCVgqOrcHh5Wcs0fQnMshh/4AqxgK
CLlGOOMCLgB655ADodkjGq+FP0VGvzuHN1Jui+ElxPHgkDgMFo/DkEk4BXkp
qFP0tZUMtRTYdF0HNh2YdLA0drYytTPV41sYuTDpHkIsy1obSprrKtqbqtqa
6rvaWvq7wQBb+7rb+nvgYWVrY21Pe9fO0f6ZXe27Rqv7Omo725t6OwHI9qGe
pt721oGOlv72/Koi6Nd2NFW2NFQ2N1W3tlW1tFU2tVc1d7QPjWzMyAxdtiJ4
6TKf+Yvs3L2dfALCI1e7BYZSFdVEMESqvKoZy9bIgi2tpEVn8vSMLbT0jQFF
gMHdJyAwbOHi5SuXrYwOX7J8wdIVSyNXWds5Llu5Bo3dF2/emZg5EpectXP/
iXvPPx49f/Pw2eszR8+fvnp/dObI0phEcGDogAkP75kFdY5OD+4+1jsx29w/
Vd890dy/u7yxd8nqBENLni6drapnqmVopk+30jcxN2UwLTk2QCbb1t7W0dnR
xcvB2ROYtOI4Mlj2IBNza6CUybWzdRSwuDZqOlqaelr2jnb6ugZqKupKCspq
ahqaWjpqWtrK6hogqoyslJy8nLyikrKqurqmLviwnhHd0NTM2MRQVw+u01TR
0FLRUFdSU5RSlKbIaihqKkgryVEUFaRUFGlqspLKClRVNQUdJQVtWVl19Fg9
wA86gCVy5KikInIYrpBPCLXo7DIk7CJA0lAgESYxkuhdbOK/AvfcjFzk0Od/
zUaDPlyGBHR45n9lEoAk/3ZIFEih5olgMBIEEoEM9ihJIchIU1RUZLQ15FmW
RhamWmxzPWtzfUtDDbaRFo+uzzXU8uBYedlY+dhyvHisnomh9pHe2q7m+p7W
1oEuIK1zqL+lt2tLTmZ5Y0Pn6HDP+FjryGDLyGDnxFjv7h3N/b3NfXBZHxgj
2GNDT1P7cGdzfyuQCVi2DXb3TYz2bh9v6OouqqnLLClbnZRc0d5V3dmTUVaZ
WV6VuC170ao1C6NWBS+JWLluw5p18TEbEpdFrgFtTk6LXBWzJSM7YnX00lVr
1m5MXLZmbfiyFaviNiRuTY/blJJTUj4/YsXG1LSwpcvzy6sePH/18sO3wZ37
k3MqJg+fP3vzyfSxS8cu3dtz+Pz0kQvLYza7+C0cnzk+eejsxN4TdR0j7YO7
h3Ydqmsfzy1rX59cOH/Zep5LsI6JNVQu0iq6llyBlY2Tu19IyKLlfHdfOsva
wtrWzsllDkuwazOGtYExw5jOtLCyUQd8GeCltmCnTDZLz1hfXVNFW1dLVVlN
UV5FQU5ZXk5ZRlaRIoVMWCVSpbEkSRyZSqDQyBQpSYo0hSxFIdHIRKoUVRYk
S5WTkZKXl1KQpsrTSNJkgjSNKCslqSANvkeQpuCkKEQZSbw0QAX5nvCGoBJy
dp4Qxd/eSFECEcmKeKI8VDHo0A1UMUAjCUtBRcSQ8UJhMSTUDFF+IGSLSpBQ
Aa5Ao7gYEWUS9Unksv+FSeHdQ9I/NEoiEieB5olISIjhwCehsCHixBRkKQCk
nrYS28qYQddlMQx5LLoNw9iJw/Cyt/awYfnz7X0dbLx4XHdbVmNfS+dEX+tQ
R8/EQPd4PzA5NrVrdHJn18hwQ1dnbXsH0FXZ2lpYW1vd2TU8NdW/YwxiNNDb
OdJT391Y3V5b01HXv3OwbbCzvquprrMZvtUxNNjS19/U09fSP9izY3dOdd3m
vMKM8qrc6rrsypqskrItufl1bZ37Zo929g7UNzQVFJbGxsZlZWTn5Rduzcpa
smplZGzMxi2pK2IQJlevj9+QnBqTsGlbflF0fCLAmZKZ4+obkJKR1z2ys2Vw
x5b86vru7UIPnAUm9x67NLbnaGpOhYNHyLI1SZu3lYxNHpmYPl7TNBCTkMET
BGkbcSmyukRpDbI0cvaWMcPW3S/c2sHNmMG1snEEIC25DlBuK2roqekZQsDV
NzED69bQNdTRp6NMmpqz4RsQhU1MzfQM9JlsK2sblraeOoVKVFBQkpdTQe4g
U2UJZCk8RYoiLU9TVJEgU0E4Mg3Zil9ShkyRRpa04ChUSXkQhSyLTuEGkQiy
FBKSByKTxKjKiHFJUOECMklGTJQABgg2+G8zhA7YI3D4P4QVFjUkDJWMoYAA
SBABqEMljNFotEUzSVTIM0CX0CfR8I2mnf9/Jv+xR0lxcQrKJJBPAP8UlZgn
IkLAimqpyzHMdZiW+jyuhTXL1JFn5SZAbnD7ONsFuDp529tyDPUsdbXMNNVM
1VVaRzv6p4dbRtq7dvS3j3SDYQ7s3N6zfbhzaLCuraO6ua2tb3B45+TIrqnu
ofHm7t7Movz1yQll9VWQavZPDAztGm4fbBuZHG7pa61oqiysLi6uKS+rr6ts
aoSL+8Z39O6aWrctOzY9q7ChdUthSWxqWnpBUWFlTV1zW3l1XfzGxNTU1KqK
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
An083QV2vq6CYD+PEB/PEH/PBYF+gT5uLnY2Antrga21nbWlrZUFl2nmwGEK
eGxb6FhbgqwZJgxTQ8CSaW4CQpkEk0SB1NJUh1ZbU0uOJitJoODFCUAjwAmh
HBEE3980koFDRMLbKMKxaBqqOSzREPzPvT8hnzhpdKwbGTAk/p7MMzfoPcck
muz9ezAcvQwdq/nNpDB7/OcTAR0CBjgE4bAYDE4CQxCO59DQuUBYrPR/MYmh
gQjilDnhJCjI54gog6xDRP5dBApVUkVFyUBf29hA29RIm0k3YBjrWhrp2liY
AZlUHEZZXk5aiipJIdGoFFkZKfBJcFRDXS30jWUz6PCpz61qKKxHHK+mq7uh
r7++FzDrrupsK2qsi89Iy6+thefLW9uAvcr2LqC3ZaCvfydyK6eqra21f7Cx
p6++oze3oqa4pjGtoCQlK39j2rZNEGxbmiqbm9YmJiRn5WzNLYpPTge7S8sp
yiuvSc3Mj01KXZeYuj45LWlrVmJaVlRMvG/YIjffYM+AsMURq9ZExy1eHOUk
cAdnW7ggYlXk2sULI5YtjVwSvjgsMDTA29/f0zfQ2zfUxz/UPzAgwM/FzRnk
4+ft7e1pb8+zteU6OzuxWVaQ9fHteK5OfA8XZ8gDXfiOzg68UD8PH1f7IE+X
BUFe8/08w/zdw/29Ar0Efq58L2eeJ5/n4WTj5WTnKbB1d7Bx4bHYdH1bSxM7
toWNFZ1jYcw2NwKTRJm0MDUyNdSD9xOw1NHWhFZfT0dZUYkmScVjCcJbGHgM
8scmApNIGStk458Rld/36dA/PSocTgYV1MvC+9QywpvU0v++Tz3HJBrB59j+
PYooQf49DI6hwJMok0hf4p8SG6mOf5/sTCBK4kiIsEQKlkgSJhLCXwwjDZLA
oiOcv8fekVcQFj74fwY5CcJ0gkiCZIMKr4AnkJCBLXlZbS1VIyMthpkBw0yP
bW5gaaJjaaRta0kHMmUgY5STBiYBSGjlpanwEJg00tM2N9a3MIGL9axM9dOL
K3Mq60sa26s6ugE8wLJlaLh9dGxgcqq0uQXql5quXvgWROf8mqbiuqayhnqo
rPMqyus62hu7e7JLy0tqm5p7BiHOApYldQ2F1TUp2VmbMrZllhTklZfllVX2
j+3q6h9N3pablJqRU1y5LadozfqkdRuTAcvElG2b03NSt+UmbskES4xLSIla
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
Q8/W9t7TJ2uffvLF+urG6pMVrRoB5xefy4yq+56HdVOL3vjki41PPl//5LO1
Tz5fNZOyF3VyNYXQZXI564HMlWc72POn29o67pIsveirm09h7/ma5jjsPOXN
rG2ub2xvrG+vriGNm7u7uwf8I3k5PT7zHOFwI8GzeMQrnzEVzKciJCbpWNhK
RNnPp0MaRiKSeG2sWkyWrXjFSpFywu3qky+215/7Tg68x/uxoDd8dujZ3yKG
rOaTJEGSS2bj9VyUDOUP/vjf/Pe/+DOQ+53/9p//i1/823/35//rH/zLP/v9
P/rTf/Yv/uS3/8nv/87v/eFv/e7vXX/z0x//9j/++T/63fOLWaGY5R0eHOzt
7e5vbe0c7B37feGEuGNUIZHP50EL7ZOwKhKoFKxCNlPK57pNZ9Bpl618JhFn
m4qh6lkrk84mE2w5mI7HOG6TMjerzVaNrWNXms1yv1Mf9RuX573LWfdi2rmY
tq7gEEmcde7OO7hpaMRen7ff3htMvh47yqTaXa+GweSH2qhAusLo0njekqmd
+G5x3NVss5gESwwgceLdWhGPw8mUKCiXKufTJON8qmI2bqWjsNqxyx27ynEk
lNhD6pk6HBmJhoOhM7Tm5cHWi82dF5sbK89XnjzFSGafyOTB1dU1vKcswvz1
c1lyR9aaeLL1ydebn3wlZcxFo849kwqhWyBa1k+tWwqcX71wFVXM1HAknFjf
fLYmWD5ZkSWDSJ6BcH9//3Cfy7t/fHTg83qCAV/I5yF9S0akXGOKtGEILKbD
UrONBK1ErJJN4TXsUhYIQbGQFa9dKSRqpVRlMf5VzsQja0+/2n2xijyCZTRw
BpPew52inK7EgslcFPs//u7/+cu//t//+m//z7/41d/88S/+7S///X/867/5
v3/5v/zq9/+7P/kvfvf3e6ObamuUyJY2D45fHnl2Dw6DQSEtFgryVtE69C0T
z+KCw77I8aHneO/Ic3Lq95yRe/IpqsU8KQBvppRLd516q14pkKgmY2wj/jOO
p6IhjJ9WC7lGuTDsOOejHokzbnrcc2bD9nzSlpWEJ+2bi8HteRcOr2ety5E9
61XH7dKoVXx93n0z72HsqOG4SVXQQ9y0eOqB/aq/sBtB0b7oN9TIX9TIhmad
qpqZaCyGQmKjeh4b1nKDahYyEUysVU6TjwPngslMrHQfW4pDz8TK6RgXiH0t
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
       "], {{0, 225}, {220, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Automatic,
     ImageSizeRaw->{220, 225},
     PlotRange->{{0, 220}, {0, 225}}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"sizeOfInputLayer", ",", " ", "sizeOfInputLayer"}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.724368628040785*^9, 3.7243686436415854`*^9}, 
   3.7243691076264596`*^9, {3.7244272314269524`*^9, 3.724427240044337*^9}, 
   3.7244348963961625`*^9, {3.724438392439558*^9, 3.7244384508788424`*^9}, {
   3.7244389427444625`*^9, 
   3.7244389653647227`*^9}},ExpressionUUID->"cfc29b19-1f93-4717-9664-\
5b4735667d8a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJwtlQlUVOcVgFNFQAk7KjsDCgPMvr3Z35t585aZN/swMwzrsIggIIZNRDZB
GJF9QFlm2BUFFKniQhRTaxMbzzEmTdJm4zQmbWxy0pOm1aZNThP6TPvOff+5
/zv3fnc5/39fYtERy8FtL730Uq0/uVgKG5Q1NYWNGSHkxlZVe6i0quSApqqu
pLSkRlS0nfxI+f/7Qs8i0Fy9OlurzlSjDg1mUSmsqOpQbqaAC4IynVAMZR0o
W5wavnVu7PLE6QvDp25f8Mz0tbx6Yezq9OBUT9v6xVnP6Y55t+v6/OhoV9NU
38lVb/9Qa+1QW910b7On61iODs8zvOBnETi5knwbpirPcwi4EATiJD+zsPzi
pJvkX5sZWh7t2VianOlrvX1xnNz+zJ+Z6D6xMNJ98/zYmZPHpvtPrkz0nOk4
OtBa6+lu/B8/30jk6NRk8lkkH1U6cLQiP0fEgxSgGhBB9uKKcxNDN+dGrk71
Lwy7SP7Eqcb1C2Nrs+7p3vab5z2TPW0z/R1rsyNn2humepsvjXe7W+oHmuq8
3U0eV1O2FnOatLl64n/8DEyVrcYrC/IkfIVCrhGJIXtJxXnPCMknHecHTm4s
ej2uBjL56yS/7+TV+UlPb8dMv+va9Fl3S8PU6ZYVT99IW727pW6yu3msqyFX
jzvNBFlCFoHl6DU2HCEDVRXkSwQKqRQDhEqd3ekZ7Fqfd1/xnF4Ycd29PD/Z
1742d3Z9YWy+v31tdnisq3Fm0HV12j3UUj3V27Q62TfaeWz05NG5oWZv19Fs
LeI04k6j1qFGyS5ZkRf9f8WZL+TJhWKYI4JAlWa4q2VpYnhuYqKq9rizuK6o
srOmY7K+ZbCjo3dtZXl2qHd+2LUy2TPQctjb27Qy0e/uaHC31azODS65Owus
+oJMS7HdVmS1F9ky8yymAntG3cESuVhlMObkHay3Og/XnzibU9XtKD8NGcoB
0CpWZcqwPIWuBDYfNuY3FJQ0tdVUr3oHhttemeo7vjY1OHyi3t1ceXN5Yuzk
sZLc/ExrltGcZTOZnVajjUDtGqQgv7Cte2Ro4ZrWXKQlLPbiNsx2SGut0Noq
5JoCnkzHk+h4oJEnNwhkBqaQYHBxHNG3H2ucOTtwwXNmoPPkUGfT5fmxyb5O
iMkocZa4xldFCq1EIMpwFOcdajzeN++ZvVJWUaPUZDhK64Sgg0oTUhkyAM1h
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
    "], {{0, 32}, {32, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{32, 32},
  PlotRange->{{0, 32}, {0, 32}}]], "Output",
 CellChangeTimes->{3.724368644754591*^9, 3.724369109978718*^9, 
  3.724423573606459*^9, 3.72442796869783*^9, 3.7244342922006073`*^9, 
  3.724438925565341*^9, 3.724452642922675*^9, 
  3.7244556623819246`*^9},ExpressionUUID->"91dc1012-1d75-4f95-a45f-\
ebd905d19216"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7244235604901466`*^9, 
  3.7244235604956617`*^9}},ExpressionUUID->"f42432c3-02eb-4c07-bf89-\
8e1622a1f80f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"imgEdge", " ", "=", 
   RowBox[{"edgeTrained", "[", 
    RowBox[{
     RowBox[{"EdgeDetect", "[", "picToUse", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<TopProbabilities\>\"", ",", " ", "3"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7243679098024473`*^9, 3.7243679637443943`*^9}, {
  3.7243685290344057`*^9, 3.7243685353922186`*^9}, {3.7243686583243155`*^9, 
  3.7243686622084556`*^9}, {3.7243687265656424`*^9, 
  3.724368727156214*^9}},ExpressionUUID->"de1ecf5c-5ede-439f-9b9a-\
91ace87c23ae"],

Cell[BoxData[
 RowBox[{"$Failed", "[", 
  RowBox[{
   RowBox[{"EdgeDetect", "[", "picToUse", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"TopProbabilities\"\>", ",", "3"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.7244235702999215`*^9, 3.7244235791961527`*^9}, 
   3.724427968739942*^9, 3.724434292242719*^9, 3.724452642934707*^9, 
   3.724455662389942*^9},ExpressionUUID->"c2c1768b-8cd4-447c-931c-\
2f06949d9d13"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"imgGray", "=", 
  RowBox[{"grayTrained", "[", 
   RowBox[{
    RowBox[{"ColorConvert", "[", 
     RowBox[{"picToUse", ",", "\"\<Grayscale\>\""}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<TopProbabilities\>\"", ",", " ", "3"}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.72436457352328*^9, 3.724364574650283*^9}, {
   3.724367971886248*^9, 3.72436797492203*^9}, {3.724368449433387*^9, 
   3.7243684715387206`*^9}, {3.724368541925522*^9, 3.72436854498753*^9}, {
   3.724368666543011*^9, 3.724368669120867*^9}, 
   3.724368730211306*^9},ExpressionUUID->"45207288-84f6-403e-8b34-\
1ad53d3c3e42"],

Cell[BoxData[
 RowBox[{"$Failed", "[", 
  RowBox[{
   RowBox[{"ColorConvert", "[", 
    RowBox[{"picToUse", ",", "\<\"Grayscale\"\>"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"TopProbabilities\"\>", ",", "3"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.7244279687840595`*^9, 3.724434292383093*^9, 
  3.724452642944734*^9, 
  3.724455662393957*^9},ExpressionUUID->"0937e232-6da5-44a9-91f1-\
048904d20da0"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7244235388579655`*^9, 
  3.724423538862979*^9}},ExpressionUUID->"6765ca3d-a459-406c-8ba3-\
9b036d8ca855"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\"\<truck\>\"", "\[Rule]", "0.8865994215011597`"}], ",", 
    RowBox[{"\"\<automobile\>\"", "\[Rule]", "0.3850700259208679`"}], ",", 
    RowBox[{"\"\<ship\>\"", "\[Rule]", "0.4022323191165924`"}], ",", 
    RowBox[{"\"\<cat\>\"", "\[Rule]", "0.697405606508255`"}], ",", 
    RowBox[{"\"\<dog\>\"", "\[Rule]", "0.13494020700454712`"}]}], 
   "\[RightAssociation]"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Takes", " ", "an", " ", "image", " ", "and", " ", "runs", " ", "multiple",
     " ", 
    RowBox[{"CNN", "'"}], "s", " ", "on", " ", "it", " ", "then", " ", "gets",
     " ", "the", " ", "total", " ", "probabilities", " ", "by", " ", 
    "combining", " ", "the", " ", "probabilities", " ", "in", " ", "each"}], 
   " ", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.7243695577454653`*^9, 3.724369568205371*^9}, {
  3.7244271171855354`*^9, 3.7244271350139203`*^9}, {3.7244335106425204`*^9, 
  3.7244335279945145`*^9}},ExpressionUUID->"cd599eed-bfa6-4b36-97e6-\
d5bd96140f13"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"truck\"\>", "\[Rule]", "0.8865994215011597`"}], ",", 
   RowBox[{"\<\"automobile\"\>", "\[Rule]", "0.3850700259208679`"}], ",", 
   RowBox[{"\<\"ship\"\>", "\[Rule]", "0.4022323191165924`"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "0.697405606508255`"}], ",", 
   RowBox[{"\<\"dog\"\>", "\[Rule]", "0.13494020700454712`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7244526429577684`*^9, 
  3.7244556624019785`*^9},ExpressionUUID->"7176c336-526e-40bb-b6b6-\
21c4187708ec"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.72443547701184*^9, 
  3.7244354770153484`*^9}},ExpressionUUID->"d768379c-79f8-445c-a794-\
df754e8b6ffb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numOfProbablities", " ", "=", " ", "4"}]], "Input",
 CellChangeTimes->{{3.7244370361376476`*^9, 3.7244370495411167`*^9}, {
  3.7244371278060923`*^9, 3.724437128855544*^9}, {3.724437200573618*^9, 
  3.7244372014218273`*^9}, {3.7244372798062086`*^9, 3.724437281373046*^9}, {
  3.7244373962300444`*^9, 3.72443739708545*^9}, {3.724437454526518*^9, 
  3.724437459414399*^9}, {3.724437513702875*^9, 3.724437514454223*^9}, {
  3.7244375695819917`*^9, 3.724437570973217*^9}, {3.724437630686007*^9, 
  3.7244376316778173`*^9}, {3.72443768505504*^9, 3.7244376859355893`*^9}, {
  3.7244377393185563`*^9, 
  3.7244377404062667`*^9}},ExpressionUUID->"7c26d81f-fedd-47e5-9ce1-\
0297342b8e05"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.72445264296579*^9, 
  3.724455662409998*^9},ExpressionUUID->"d8126f88-cef0-4499-9540-\
5679f3b38bd2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{"4", "\[IndentingNewLine]", 
 RowBox[{"0.6672", "+", "0.7215", "+", "0.3024", "+", 
  "0.3349"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nWeightFunction", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{"Total", "[", 
   RowBox[{"x", " ", "*", " ", "0.67"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.7244404361604652`*^9, 3.7244404434689093`*^9}, {
  3.7244406306638937`*^9, 
  3.7244406739948406`*^9}},ExpressionUUID->"d666387b-c029-44dd-9b7a-\
e07414b1791b"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.7244407471804233`*^9, 3.7244408238865633`*^9, 
  3.7244556624150095`*^9},ExpressionUUID->"a40ec9a1-321d-4b71-b94b-\
20d17618afaa"],

Cell[BoxData["2.026`"], "Output",
 CellChangeTimes->{3.7244407471804233`*^9, 3.7244408238865633`*^9, 
  3.7244556624150095`*^9},ExpressionUUID->"dd0e0ce9-b1ba-4837-a881-\
305a69159ec3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"gWeightFunction", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{"Total", "[", 
   RowBox[{"x", " ", "*", " ", "0.72"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eWeightFunction", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{"Total", "[", 
   RowBox[{"x", " ", "*", " ", "0.30"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mWeightFunction", "[", "x_", "]"}], " ", ":=", " ", 
   RowBox[{"Total", "[", 
    RowBox[{"x", " ", "*", " ", "0.34"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Merge", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "2"}], ",", " ", 
     RowBox[{"b", "\[Rule]", "3"}]}], "}"}], ",", "f"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7244404361604652`*^9, 3.7244404918837147`*^9}, {
  3.7244406428894186`*^9, 3.724440643759733*^9}, {3.724440678868929*^9, 
  3.724440698754593*^9}},ExpressionUUID->"1c7a27fc-f6c1-4b78-800a-\
f1b85a4004e6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", 
    RowBox[{"f", "[", 
     RowBox[{"{", "2", "}"}], "]"}]}], ",", 
   RowBox[{"b", "\[Rule]", 
    RowBox[{"f", "[", 
     RowBox[{"{", "3", "}"}], "]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7244407413739753`*^9, 3.7244408215272875`*^9, 
  3.7244556624209995`*^9},ExpressionUUID->"6ea0ffd4-7b1f-405e-ba6d-\
f43147104afd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "The", " ", "accuracy", " ", "of", " ", "each", " ", "multiplied", " ", 
     "by", " ", "its", " ", "probability", " ", "array", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"combineNets", "[", "imgToTest_", "]"}]}], " ", ":=", " ", 
    RowBox[{"Merge", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Merge", "[", 
         RowBox[{
          RowBox[{"grayTrained", "[", 
           RowBox[{
            RowBox[{"ColorConvert", "[", 
             RowBox[{
              RowBox[{"ImageResize", "[", 
               RowBox[{"imgToTest", ",", 
                RowBox[{"{", 
                 RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], 
                 "}"}]}], "]"}], ",", "\"\<Grayscale\>\""}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{
             "\"\<TopProbabilities\>\"", ",", " ", "numOfProbablities"}], 
             "}"}]}], "]"}], ",", "gWeightFunction"}], "]"}], ",", 
        "\[IndentingNewLine]", "\t  ", 
        RowBox[{"Merge", "[", 
         RowBox[{
          RowBox[{"edgeTrained", "[", 
           RowBox[{
            RowBox[{"EdgeDetect", "[", 
             RowBox[{"ImageResize", "[", 
              RowBox[{"imgToTest", ",", " ", 
               RowBox[{"{", 
                RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], 
                "}"}]}], "]"}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<TopProbabilities\>\"", ",", "numOfProbablities"}], 
             "}"}]}], "]"}], ",", "eWeightFunction"}], "]"}], ",", 
        "\[IndentingNewLine]", "\t  ", 
        RowBox[{"Merge", "[", 
         RowBox[{
          RowBox[{"maxTrained", "[", 
           RowBox[{
            RowBox[{"MaxDetect", "[", 
             RowBox[{"ImageResize", "[", 
              RowBox[{"imgToTest", ",", " ", 
               RowBox[{"{", 
                RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], 
                "}"}]}], "]"}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<TopProbabilities\>\"", ",", "numOfProbablities"}], 
             "}"}]}], "]"}], ",", "mWeightFunction"}], "]"}], ",", 
        "\[IndentingNewLine]", "\t  ", 
        RowBox[{"Merge", "[", 
         RowBox[{
          RowBox[{"normalTrained", "[", 
           RowBox[{
            RowBox[{"ImageResize", "[", 
             RowBox[{"imgToTest", ",", " ", 
              RowBox[{"{", 
               RowBox[{"sizeOfInputLayer", ",", " ", "sizeOfInputLayer"}], 
               "}"}]}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{
             "\"\<TopProbabilities\>\"", ",", " ", "numOfProbablities"}], 
             "}"}]}], "]"}], ",", " ", "nWeightFunction"}], "]"}]}], "}"}], 
      ",", "\[IndentingNewLine]", " ", "Total"}], "]"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "total", " ", "of", " ", "all", " ", "their", " ", "different",
     " ", "probabilities", " ", "added", " ", "together"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"combineNets", "[", "imgToTest_", "]"}], " ", ":=", " ", 
    RowBox[{"Merge", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"grayTrained", "[", 
         RowBox[{
          RowBox[{"ColorConvert", "[", 
           RowBox[{
            RowBox[{"ImageResize", "[", 
             RowBox[{"imgToTest", ",", 
              RowBox[{"{", 
               RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], "}"}]}],
              "]"}], ",", "\"\<Grayscale\>\""}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<TopProbabilities\>\"", ",", " ", "numOfProbablities"}], 
           "}"}]}], "]"}], ",", "\[IndentingNewLine]", "\t  ", 
        RowBox[{"edgeTrained", "[", 
         RowBox[{
          RowBox[{"EdgeDetect", "[", 
           RowBox[{"ImageResize", "[", 
            RowBox[{"imgToTest", ",", " ", 
             RowBox[{"{", 
              RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], "}"}]}], 
            "]"}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<TopProbabilities\>\"", ",", "numOfProbablities"}], 
           "}"}]}], "]"}], ",", "\[IndentingNewLine]", "\t  ", 
        RowBox[{"maxTrained", "[", 
         RowBox[{
          RowBox[{"MaxDetect", "[", 
           RowBox[{"ImageResize", "[", 
            RowBox[{"imgToTest", ",", " ", 
             RowBox[{"{", 
              RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], "}"}]}], 
            "]"}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<TopProbabilities\>\"", ",", "numOfProbablities"}], 
           "}"}]}], "]"}], ",", "\[IndentingNewLine]", "\t  ", 
        RowBox[{"normalTrained", "[", 
         RowBox[{
          RowBox[{"ImageResize", "[", 
           RowBox[{"imgToTest", ",", " ", 
            RowBox[{"{", 
             RowBox[{"sizeOfInputLayer", ",", " ", "sizeOfInputLayer"}], 
             "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<TopProbabilities\>\"", ",", " ", "numOfProbablities"}], 
           "}"}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", " ", 
      "Total"}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Get", " ", "the", " ", "maximum", " ", "probability", " ", "set", 
      "\[IndentingNewLine]", 
      RowBox[{"combineNets", "[", "imgToTest_", "]"}]}], " ", ":=", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"MaximalBy", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MaximalBy", "[", 
           RowBox[{
            RowBox[{"grayTrained", "[", 
             RowBox[{
              RowBox[{"ColorConvert", "[", 
               RowBox[{
                RowBox[{"ImageResize", "[", 
                 RowBox[{"imgToTest", ",", 
                  RowBox[{"{", 
                   RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], 
                   "}"}]}], "]"}], ",", "\"\<Grayscale\>\""}], "]"}], ",", 
              " ", 
              RowBox[{"{", 
               RowBox[{
               "\"\<TopProbabilities\>\"", ",", " ", "numOfProbablities"}], 
               "}"}]}], "]"}], ",", "Last"}], "]"}], ",", 
          "\[IndentingNewLine]", "\t  ", 
          RowBox[{"MaximalBy", "[", 
           RowBox[{
            RowBox[{"edgeTrained", "[", 
             RowBox[{
              RowBox[{"EdgeDetect", "[", 
               RowBox[{"ImageResize", "[", 
                RowBox[{"imgToTest", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], 
                  "}"}]}], "]"}], "]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<TopProbabilities\>\"", ",", "numOfProbablities"}],
                "}"}]}], "]"}], ",", "Last"}], "]"}], ",", 
          "\[IndentingNewLine]", "\t  ", 
          RowBox[{"MaximalBy", "[", 
           RowBox[{
            RowBox[{"maxTrained", "[", 
             RowBox[{
              RowBox[{"MaxDetect", "[", 
               RowBox[{"ImageResize", "[", 
                RowBox[{"imgToTest", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], 
                  "}"}]}], "]"}], "]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<TopProbabilities\>\"", ",", "numOfProbablities"}],
                "}"}]}], "]"}], ",", "Last"}], "]"}], ",", 
          "\[IndentingNewLine]", "\t  ", 
          RowBox[{"MaximalBy", "[", 
           RowBox[{
            RowBox[{"normalTrained", "[", 
             RowBox[{
              RowBox[{"ImageResize", "[", 
               RowBox[{"imgToTest", ",", " ", 
                RowBox[{"{", 
                 RowBox[{"sizeOfInputLayer", ",", " ", "sizeOfInputLayer"}], 
                 "}"}]}], "]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{
               "\"\<TopProbabilities\>\"", ",", " ", "numOfProbablities"}], 
               "}"}]}], "]"}], ",", " ", "Last"}], "]"}]}], "}"}], "]"}], ",",
        " ", "Last"}], "]"}]}], "\[IndentingNewLine]", "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.7243694429931707`*^9, 3.724369457857588*^9}, {
   3.724369505302844*^9, 3.7243695484897857`*^9}, {3.724369583699401*^9, 
   3.724369661578576*^9}, {3.724369693269821*^9, 3.7243697075869284`*^9}, {
   3.724369877923798*^9, 3.7243699321647987`*^9}, 3.724369974748923*^9, {
   3.724426986698591*^9, 3.724426994082656*^9}, {3.7244270971916723`*^9, 
   3.72442711274249*^9}, {3.724427243107411*^9, 3.7244272770710077`*^9}, {
   3.724433470642563*^9, 3.7244335034583054`*^9}, {3.724436639317664*^9, 
   3.7244366481056376`*^9}, {3.7244368037424154`*^9, 3.724436821526457*^9}, {
   3.7244369622978077`*^9, 3.7244369696619267`*^9}, {3.724437054398969*^9, 
   3.724437063446969*^9}, {3.7244393926484237`*^9, 3.7244394134267416`*^9}, {
   3.7244394851404915`*^9, 3.7244394910226293`*^9}, 3.724439689844629*^9, {
   3.7244397237608604`*^9, 3.724439753212222*^9}, {3.7244399551831694`*^9, 
   3.724439960840213*^9}, {3.7244407103694906`*^9, 3.7244407852918854`*^9}, {
   3.724440834315336*^9, 3.7244409139873085`*^9}, {3.7244411792739224`*^9, 
   3.724441316225636*^9}, {3.7244413486779733`*^9, 3.724441353781583*^9}, {
   3.724441709972912*^9, 3.7244417982527494`*^9}, {3.7244419457554197`*^9, 
   3.724441953348392*^9}, {3.724442411893383*^9, 3.724442507538453*^9}, {
   3.724442537995437*^9, 3.7244425836068134`*^9}, {3.724452481274302*^9, 
   3.724452526938244*^9}, {3.725359158638171*^9, 
   3.7253591629826527`*^9}},ExpressionUUID->"85dcc5cf-46b0-46d0-92ca-\
fc3995119c13"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.725359177574417*^9, 
  3.725359177579935*^9}},ExpressionUUID->"82baee11-1fb7-4bc7-bca5-\
6a00e6fcd53e"],

Cell[BoxData[
 RowBox[{"combineNets", "[", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJwtlQlUVOcVgFNFQAk7KjsDCgPMvr3Z35t585aZN/swMwzrsIggIIZNRDZB
GJF9QFlm2BUFFKniQhRTaxMbzzEmTdJm4zQmbWxy0pOm1aZNThP6TPvOff+5
/zv3fnc5/39fYtERy8FtL730Uq0/uVgKG5Q1NYWNGSHkxlZVe6i0quSApqqu
pLSkRlS0nfxI+f/7Qs8i0Fy9OlurzlSjDg1mUSmsqOpQbqaAC4IynVAMZR0o
W5wavnVu7PLE6QvDp25f8Mz0tbx6Yezq9OBUT9v6xVnP6Y55t+v6/OhoV9NU
38lVb/9Qa+1QW910b7On61iODs8zvOBnETi5knwbpirPcwi4EATiJD+zsPzi
pJvkX5sZWh7t2VianOlrvX1xnNz+zJ+Z6D6xMNJ98/zYmZPHpvtPrkz0nOk4
OtBa6+lu/B8/30jk6NRk8lkkH1U6cLQiP0fEgxSgGhBB9uKKcxNDN+dGrk71
Lwy7SP7Eqcb1C2Nrs+7p3vab5z2TPW0z/R1rsyNn2humepsvjXe7W+oHmuq8
3U0eV1O2FnOatLl64n/8DEyVrcYrC/IkfIVCrhGJIXtJxXnPCMknHecHTm4s
ej2uBjL56yS/7+TV+UlPb8dMv+va9Fl3S8PU6ZYVT99IW727pW6yu3msqyFX
jzvNBFlCFoHl6DU2HCEDVRXkSwQKqRQDhEqd3ekZ7Fqfd1/xnF4Ycd29PD/Z
1742d3Z9YWy+v31tdnisq3Fm0HV12j3UUj3V27Q62TfaeWz05NG5oWZv19Fs
LeI04k6j1qFGyS5ZkRf9f8WZL+TJhWKYI4JAlWa4q2VpYnhuYqKq9rizuK6o
srOmY7K+ZbCjo3dtZXl2qHd+2LUy2TPQctjb27Qy0e/uaHC31azODS65Owus
+oJMS7HdVmS1F9ky8yymAntG3cESuVhlMObkHay3Og/XnzibU9XtKD8NGcoB
0CpWZcqwPIWuBDYfNuY3FJQ0tdVUr3oHhttemeo7vjY1OHyi3t1ceXN5Yuzk
sZLc/ExrltGcZTOZnVajjUDtGqQgv7Cte2Ro4ZrWXKQlLPbiNsx2SGut0Noq
5JoCnkzHk+h4oJEnNwhkBqaQYHBxHNG3H2ucOTtwwXNmoPPkUGfT5fmxyb5O
iMkocZa4xldFCq1EIMpwFOcdajzeN++ZvVJWUaPUZDhK64Sgg0oTUhkyAM1h
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
     "], {{0, 32}, {32, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{32, 32},
   PlotRange->{{0, 32}, {0, 32}}], "]"}]], "Input",
 CellChangeTimes->{{3.7243696703980265`*^9, 
  3.724369681813354*^9}},ExpressionUUID->"e498edd3-a482-4edd-9d82-\
860ab80a6e08"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Gets", " ", "the", " ", "testData"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"sampleOfImages", " ", "=", " ", 
     RowBox[{"RandomSample", "[", 
      RowBox[{"testData", ",", "100"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"sampleOfImages", ",", " ", "10"}], "]"}]}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7243701656280575`*^9, 3.724370179873211*^9}, {
   3.724372648200339*^9, 3.724372654697857*^9}, 3.724372804170866*^9, 
   3.7244226086176076`*^9, {3.72442573580224*^9, 3.724425738068818*^9}, {
   3.7244258312605762`*^9, 3.7244258326034765`*^9}, {3.7244259558977184`*^9, 
   3.724425990003174*^9}, {3.7244262561824036`*^9, 3.72442625717093*^9}, {
   3.7244263156098433`*^9, 3.724426316778451*^9}, 3.7244269061960263`*^9, {
   3.724427056818844*^9, 3.7244270662459073`*^9}, 3.7244273017084703`*^9, {
   3.724427422977047*^9, 3.7244274311532345`*^9}, 3.724428070962313*^9, {
   3.724435145748037*^9, 3.724435156163747*^9}, {3.724436601712469*^9, 
   3.7244366018788185`*^9}, {3.7244366334236307`*^9, 3.724436633607158*^9}, 
   3.7244367134773006`*^9, {3.724437138574602*^9, 
   3.7244371418626347`*^9}},ExpressionUUID->"808dbfb1-cd1f-4200-b0d8-\
3905479b408e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Loops", " ", "through", " ", "the", " ", "list", " ", "of", " ", 
    "pictures", " ", "and", " ", "gets", " ", "the", " ", "probability", " ", 
    "assoc"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"cNEquals", " ", "=", " ", 
     RowBox[{"combineNets", "/@", 
      RowBox[{"Keys", "[", "sampleOfImages", "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"cNEquals", ",", " ", "3"}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.7243697292825937`*^9, 3.724369754225724*^9}, {
   3.7243697937738943`*^9, 3.724369873912097*^9}, {3.7243699419367833`*^9, 
   3.7243699490415545`*^9}, {3.7243699940512886`*^9, 3.724370151906572*^9}, {
   3.724370199691903*^9, 3.724370221920166*^9}, {3.72437025269805*^9, 
   3.724370380178327*^9}, {3.7243704226593294`*^9, 3.7243704324664154`*^9}, {
   3.724370483064942*^9, 3.7243706695052567`*^9}, {3.7243707146105137`*^9, 
   3.724370765953161*^9}, {3.724370818729081*^9, 3.7243708886001835`*^9}, {
   3.724370929025725*^9, 3.7243710268290167`*^9}, {3.7243710697364635`*^9, 
   3.724371073562121*^9}, {3.724371153937397*^9, 3.72437117636905*^9}, {
   3.724371219372449*^9, 3.7243712284655976`*^9}, {3.724371627080286*^9, 
   3.724371646809065*^9}, {3.7243717756994224`*^9, 3.724371777201417*^9}, {
   3.7243724950203247`*^9, 3.7243725087845297`*^9}, {3.724372551945318*^9, 
   3.7243726203050117`*^9}, {3.724372745570758*^9, 3.7243727888902264`*^9}, {
   3.724423018625564*^9, 3.724423102968972*^9}, {3.724425827686497*^9, 
   3.7244258522894173`*^9}, 3.724426667682476*^9, {3.7244268750102487`*^9, 
   3.72442688273065*^9}, {3.7244269411696978`*^9, 3.7244269763461647`*^9}, {
   3.7244270290901775`*^9, 
   3.724427031234892*^9}},ExpressionUUID->"2ea59226-cc16-42cc-b249-\
b66b295a7083"],

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{
   RowBox[{"Keys", "[", 
    RowBox[{"Merge", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"$Failed", "[", 
         RowBox[{
          RowBox[{"ColorConvert", "[", 
           RowBox[{
            RowBox[{"ImageResize", "[", 
             RowBox[{"sampleOfImages", ",", 
              RowBox[{"{", 
               RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], "}"}]}],
              "]"}], ",", "\<\"Grayscale\"\>"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"TopProbabilities\"\>", ",", "numOfProbablities"}], 
           "}"}]}], "]"}], ",", 
        RowBox[{"$Failed", "[", 
         RowBox[{
          RowBox[{"EdgeDetect", "[", 
           RowBox[{"ImageResize", "[", 
            RowBox[{"sampleOfImages", ",", 
             RowBox[{"{", 
              RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], "}"}]}], 
            "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"TopProbabilities\"\>", ",", "numOfProbablities"}], 
           "}"}]}], "]"}], ",", 
        RowBox[{"$Failed", "[", 
         RowBox[{
          RowBox[{"MaxDetect", "[", 
           RowBox[{"ImageResize", "[", 
            RowBox[{"sampleOfImages", ",", 
             RowBox[{"{", 
              RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], "}"}]}], 
            "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"TopProbabilities\"\>", ",", "numOfProbablities"}], 
           "}"}]}], "]"}], ",", 
        RowBox[{"$Failed", "[", 
         RowBox[{
          RowBox[{"ImageResize", "[", 
           RowBox[{"sampleOfImages", ",", 
            RowBox[{"{", 
             RowBox[{"sizeOfInputLayer", ",", "sizeOfInputLayer"}], "}"}]}], 
           "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"TopProbabilities\"\>", ",", "numOfProbablities"}], 
           "}"}]}], "]"}]}], "}"}], ",", "Total"}], "]"}], "]"}], ",", "3"}], 
  "]"}]], "Output",
 CellChangeTimes->{{3.724426902391658*^9, 3.7244269300950856`*^9}, 
   3.7244270258638124`*^9, 3.7244284490031013`*^9, 3.72443439949656*^9, {
   3.724436599466584*^9, 3.7244366088252773`*^9}, {3.7244367201846457`*^9, 
   3.7244367468601136`*^9}, 3.7244368710017204`*^9, 3.724437002296276*^9, 
   3.7244370980588307`*^9, 3.724437167930729*^9, 3.7244372344988003`*^9, 
   3.7244373119728355`*^9, 3.724437379989847*^9, 3.7244374298006907`*^9, 
   3.7244374904414806`*^9, 3.7244375444115*^9, 3.7244376104126854`*^9, 
   3.724437662504933*^9, 3.7244377167628336`*^9, 3.724439454248305*^9, 
   3.724439512176944*^9, 3.7244395918387113`*^9, 3.724439759193124*^9, 
   3.724440960768609*^9, 3.7244414310781326`*^9, 3.724441876194483*^9, 
   3.7244419913359385`*^9, 3.7244420412597523`*^9, 3.7244426223371787`*^9, 
   3.7244526431041584`*^9, 
   3.7244556625102687`*^9},ExpressionUUID->"fc4d124f-5d20-487a-98e1-\
35401b09c0da"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "Sorts", " ", "the", " ", "ouput", " ", "list", " ", "and", " ", "gets", 
   " ", "the", " ", "tag", " ", "of", " ", "what", " ", "the", " ", "top", 
   " ", "probability", " ", "is"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7244266715945215`*^9, 3.7244267368294935`*^9}, {
  3.724426981058632*^9, 
  3.724426981411413*^9}},ExpressionUUID->"1a12c5ab-1683-46ff-8e8b-\
8ba374599b94"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sortOutputAssoc", " ", "=", " ", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", "x", "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"Part", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"x", ",", " ", "Greater"}], "]"}], ",", " ", 
         RowBox[{"{", "1", "}"}]}], "]"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Gets", " ", "all", " ", "the", " ", "top", " ", "propabilites", " ", 
    "key", " ", "tags"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"topChoice", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Keys", "[", 
     RowBox[{"sortOutputAssoc", "/@", "cNEquals"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7243725385306463`*^9, 3.7243725385587177`*^9}, {
   3.7244231220599527`*^9, 3.72442312902932*^9}, {3.7244231602675734`*^9, 
   3.7244231819387875`*^9}, {3.72442322934688*^9, 3.7244232347308493`*^9}, {
   3.724423269122877*^9, 3.7244233400939426`*^9}, {3.724423418788533*^9, 
   3.724423450090667*^9}, {3.7244234875982456`*^9, 3.724423488846167*^9}, {
   3.7244235916512113`*^9, 3.724423694563017*^9}, {3.724423967906586*^9, 
   3.724424146974521*^9}, {3.724424184068136*^9, 3.724424207236874*^9}, 
   3.724425755193942*^9, 3.72442666600533*^9, {3.724426739355167*^9, 
   3.7244268424052143`*^9}},ExpressionUUID->"b4179922-6f51-4432-8192-\
31a497bc1ddb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Used", " ", "to", " ", "output", " ", "a", " ", "1", " ", "if", " ", 
    "two", " ", "values", " ", "are", " ", "equal"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"checkIfOutputEqual", "[", 
     RowBox[{"{", 
      RowBox[{"x_", ",", " ", "y_"}], "}"}], "]"}], " ", ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"x", " ", "\[Equal]", " ", "y"}], ",", "1", ",", " ", "0"}], 
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Makes", " ", "a", " ", "list", " ", "of", " ", "a", " ", "list", " ", 
     "of", " ", "what", " ", "it", " ", "is", " ", "compared", " ", "to", " ",
      "what", " ", "the", " ", "NN", " ", "thinks", " ", "it", " ", "is"}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"compareOutputs", " ", "=", 
     RowBox[{"Thread", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Values", "[", "sampleOfImages", "]"}], ",", "topChoice"}], 
       "}"}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.724423708948288*^9, 3.7244238214349623`*^9}, 
   3.724423927251091*^9, {3.7244248630935955`*^9, 3.7244249192976184`*^9}, {
   3.7244249959638624`*^9, 3.7244250276111794`*^9}, {3.724425321538583*^9, 
   3.7244254829004517`*^9}, {3.7244255129546146`*^9, 
   3.7244255979872923`*^9}, {3.7244256488315096`*^9, 3.7244256738200274`*^9}, 
   3.724425785901621*^9, {3.724426534185915*^9, 3.724426535617047*^9}, {
   3.724426589666129*^9, 
   3.724426659948735*^9}},ExpressionUUID->"37853532-c0aa-44ea-97ab-\
6435ca47b1a9"],

Cell[BoxData[
 TemplateBox[{
  "Values","invrl",
   "\"The argument \\!\\(\\*RowBox[{\\\"sampleOfImages\\\"}]\\) is not a \
valid Association or a list of rules.\"",2,85,29,27680990397988416295,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.724452643185403*^9, 
  3.724455662572429*^9},ExpressionUUID->"29fba838-8b59-4fbb-bae1-\
f7c2a9c05cca"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Sums", " ", "the", " ", "total", " ", "amount", " ", "of", " ", 
    RowBox[{"1", "'"}], "s", " ", "corresponding", " ", "to", " ", "what", 
    " ", "the", " ", "CNN", " ", "thought", " ", "it", " ", "was", " ", 
    "compared", " ", "to", " ", "what", " ", "it", " ", "actually", " ", 
    "is"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Total", "[", 
   RowBox[{"checkIfOutputEqual", "/@", "compareOutputs"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7244254780395947`*^9, 3.724425496410865*^9}, {
  3.7244255861552515`*^9, 3.7244256041150613`*^9}, {3.7244256622335663`*^9, 
  3.724425680892071*^9}, {3.724425711315097*^9, 3.7244257134651165`*^9}, {
  3.724426537169614*^9, 
  3.724426586412635*^9}},ExpressionUUID->"874182cb-31e7-411a-8849-\
1aafad65ab8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Each", " ", "individual", " ", "CNN", " ", "accuracy"}], ",", 
    " ", 
    RowBox[{"N", ":", " ", "0.6672"}], ",", " ", 
    RowBox[{"G", ":", "0.7215"}], ",", " ", 
    RowBox[{"E", ":", "0.3024"}], ",", " ", 
    RowBox[{"M", ":", "0.3349"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"EXPERIMENT", ":", " ", 
    RowBox[{
    "What", " ", "if", " ", "you", " ", "weigh", " ", "the", " ", "outputs", 
     " ", "of", " ", "each", " ", "individual", " ", "CNN", " ", "with", " ", 
     "its", " ", "accuracy"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"With", " ", "N"}], ",", "G", ",", "E", ",", 
    RowBox[{"M", " ", "it", " ", "is", " ", "70", "%", " ", "accurate"}]}], 
   " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"EXPERIMENT", ":", " ", 
    RowBox[{
    "Take", " ", "the", " ", "Max", " ", "of", " ", "the", " ", "outputs", 
     " ", "of", " ", "each", " ", "individual", " ", "CNN"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"With", " ", "N"}], ",", "G", ",", "E", ",", 
    RowBox[{"M", " ", "it", " ", "is", " ", "66", "%", " ", "accurate"}]}], 
   " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"EXPERIMENT", ":", " ", 
    RowBox[{
    "Get", " ", "the", " ", "Max", " ", "of", " ", "three", " ", "of", " ", 
     "the", " ", "outputs", " ", "of", " ", "each", " ", "individual", " ", 
     "CNN", " ", "with", " ", "then", " ", "Total", " ", "them"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"With", " ", "N"}], ",", "G", ",", "E", ",", 
    RowBox[{"M", " ", "it", " ", "is", " ", "68", "%", " ", "accurate"}]}], 
   " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"EXPERIMENT", ":", " ", 
    RowBox[{
    "Get", " ", "the", " ", "Max", " ", "out", " ", "of", " ", "the", " ", 
     "4", " ", "Maxes", " ", "of", " ", "the", " ", "outputs", " ", "of", " ",
      "each", " ", "individual", " ", "CNN", " ", "with", " ", "then", " ", 
     "Total", " ", "them"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"With", " ", "N"}], ",", "G", ",", "E", ",", 
    RowBox[{"M", " ", "it", " ", "is", " ", "65", "%", " ", "accurate"}]}], 
   " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"EXPERIMENT", ":", " ", 
    RowBox[{
    "What", " ", "difference", " ", "does", " ", "the", " ", "top", " ", 
     "probablities", " ", "make"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->CompressedData["
1:eJwdxU8oQ3EAB/DHYXPhMnbYdrBSS8pFxEFrkjRFsSS10ZrDDmM3F9Palh4n
JcXaOFj+hdFmytKjN82a/VGyaYySg6csizVZ5n1/h08fuX5qcKKSoigpD/do
zEyUeVdpliNh7L3pFF/zC6RlCb56pj34buxvCwdUjgO82O4O4irujcUFqymE
132tCTyjWEjikebNNC5Z9fe4TeR6xKYXUR7v+rkidvV2/eDaNbqMv7d3yNqS
URjjT3vM5KXkZQ1Wu3Pk4YKuDhv6WXJJuCfDDS1+svNUeYa5VSeDv2aNafx0
0ZfB1NFQHgeqowWclM/9YrbJUBHnX6EiAkxLimRutFuGj4OHcmwXx6ZxjXre
grWvARv+NH7YceiB9eHx7C0563GeYKWMZnD9xqQiwV/M7TficCqlwwPejAGf
dwhtWGmJO/A/my4Kng==
  "],ExpressionUUID->"26262c86-a893-4f01-8157-3334b3c37b1a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Top", "  ", "1", " ", "probabilities", " ", "Totaled"}], " ", 
    "=", " ", 
    RowBox[{"66", "%"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Top", "  ", "2", " ", "probabilities", " ", "Totaled"}], " ", 
    "=", " ", 
    RowBox[{"72", "%"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Top", "  ", "3", " ", "probabilities", " ", "Totaled"}], " ", 
    "=", " ", 
    RowBox[{"71", "%"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Top", "  ", "4", " ", "probabilities", " ", "Totaled"}], " ", 
    "=", " ", 
    RowBox[{"71", "%"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Top", "  ", "5", " ", "probabilities", " ", "Totaled"}], " ", 
    "=", " ", 
    RowBox[{"71", "%"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Top", "  ", "6", " ", "probabilities", " ", "Totaled"}], " ", 
    "=", " ", 
    RowBox[{"71", "%"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Top", "  ", "7", " ", "probabilities", " ", "Totaled"}], " ", 
    "=", " ", 
    RowBox[{"71", "%"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Top", "  ", "8", " ", "probabilities", " ", "Totaled"}], " ", 
    "=", " ", 
    RowBox[{"71", "%"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Top", "  ", "9", " ", "probabilities", " ", "Totaled"}], " ", 
    "=", " ", 
    RowBox[{"71", "%"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Top", " ", "10", " ", "probabilities", " ", "Totaled"}], " ", 
    "=", " ", 
    RowBox[{"71", "%"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"EXPERIMENT", ":", " ", 
    RowBox[{
    "What", " ", "is", " ", "the", " ", "accuracy", " ", "of", " ", "the", 
     " ", "different", " ", "combinations", " ", "of", " ", "Neural", " ", 
     "Networks"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "With", " ", "just", " ", "the", " ", "G", " ", "Neural", " ", "Network", 
    " ", "it", " ", "has", " ", "a", " ", "Max", " ", 
    RowBox[{"of", " ", "~", "64"}], "%", " ", "accuracy"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"When", " ", "the", " ", "G"}], ",", " ", 
    RowBox[{"and", " ", "N"}], ",", " ", 
    RowBox[{
    "Neural", " ", "Networks", " ", "are", " ", "combined", " ", "they", " ", 
     "have", " ", "a", " ", "Max", " ", 
     RowBox[{"of", " ", "~", "72"}], "%", " ", "accuracy"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"When", " ", "the", " ", "G"}], ",", " ", "N", ",", " ", 
    RowBox[{"and", " ", "E"}], ",", " ", 
    RowBox[{
    "Neural", " ", "Networks", " ", "are", " ", "combined", " ", "they", " ", 
     "have", " ", "a", " ", "Max", " ", 
     RowBox[{"of", " ", "~", "72"}], "%", " ", "accuracy"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"When", " ", "the", " ", "G"}], ",", " ", "N", ",", " ", "E", ",",
     " ", 
    RowBox[{
    "and", " ", "M", " ", "Neural", " ", "Networks", " ", "are", " ", 
     "combined", " ", "they", " ", "have", " ", "a", " ", "Max", " ", 
     RowBox[{"of", " ", "~", "69"}], "%", " ", "accuracy"}]}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7RZSsP/0/teOIVNPHgfR6y/aip0B0mzS/6VA9IkH
HUtA9LX4f8tB9DbHlnUgeoLF3N0gmuPVy8Mg+ltD7hEQPX+z6XkQXaPedQFE
R+gtuwGi/zQk3QTRZsJz7oLo3MfCn0D0qi2vfoDoOR5OP0G0yLyO/yD664qV
YDr2Tyb7WSB9Y0kBmJ584SgfiPaa+x5Mh32LEwXRKX6HwfQf9jUyIFrFeAuY
nrXLfi+IfjVz1n4Q/aUu8waIvn/Q+zaIZtgY/AlEb+M9/Q1EX1Bs+w2iD2un
MJ4D0jMYTrKB6A6pH2D6VZSLDIjeunuDIohuFjtbDqL5vDprQbTUpAXbQLSf
SsB2EA0As8zWew==
  "],ExpressionUUID->"968f5dc4-dae6-4ed1-9afd-7b1b64743ee5"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"67.22", "%", " ", "Accuracy", " ", "on", " ", "the", " ", "10"}], 
   ",", 
   RowBox[{
    RowBox[{
    "000", " ", "images", " ", "in", " ", "testData", " ", "when", " ", 
     "using", " ", "the", " ", "CNN", " ", "from", " ", "the", " ", "CIFAR"}],
     "-", 
    RowBox[{"10", " ", "Example"}]}], ",", " ", 
   RowBox[{
   "normal", " ", "by", " ", "itself", " ", "only", " ", "gets", " ", "a", 
    " ", "70.12", "%", " ", "using", " ", "the", " ", "GPU", " ", 
    "Accelerated", " ", "CNN"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.7244261003995833`*^9, 3.7244261045148125`*^9}, {
  3.724426506195958*^9, 3.7244265307106504`*^9}, {3.7244324129449396`*^9, 
  3.72443248910504*^9}},ExpressionUUID->"4298fa2a-c20e-4753-994c-\
94f59fb4877a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{"Total", "[", 
   RowBox[{"x", " ", "*", " ", "2"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Merge", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}]}], ",", " ", 
     RowBox[{"b", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", 
        RowBox[{"-", "1"}]}], "}"}]}]}], "}"}], ",", "Max"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7244390661558933`*^9, 3.724439080761155*^9}, {
   3.724439625155538*^9, 3.724439636948922*^9}, 3.724439981375846*^9, {
   3.724440053178789*^9, 3.724440079082141*^9}, {3.724440114283784*^9, 
   3.7244401739407034`*^9}, {3.72444021956378*^9, 3.724440258674614*^9}, {
   3.724440347384618*^9, 3.724440355306304*^9}, {3.7244403888525686`*^9, 
   3.7244404198721304`*^9}, {3.7244411091065855`*^9, 
   3.724441154001687*^9}},ExpressionUUID->"92597027-35cc-4904-a65f-\
8c03b79c5da4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "4"}], ",", 
   RowBox[{"b", "\[Rule]", "3"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7244411552219343`*^9, 3.7244526432345285`*^9, 
  3.724455662607525*^9},ExpressionUUID->"2dfc59ab-2022-4aaa-a260-\
1b61ec458154"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MaximalBy", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "2"}], ",", 
     RowBox[{"b", "\[Rule]", "3"}]}], "}"}], ",", " ", "Last"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7244401910411916`*^9, 3.7244402053399315`*^9}, {
  3.7244414422228165`*^9, 3.7244414816425953`*^9}, {3.724441570154679*^9, 
  3.724441590580019*^9}, {3.7244416705079603`*^9, 
  3.724441685670263*^9}},ExpressionUUID->"36ef4dfe-5c4a-4f4b-b8ac-\
df2c2bab4f1a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", "\[Rule]", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.724440206238288*^9, {3.724441461067852*^9, 3.7244414828528357`*^9}, 
   3.724441592395873*^9, {3.72444167475478*^9, 3.724441687420888*^9}, 
   3.7244556626215324`*^9},ExpressionUUID->"87e0a806-450b-4cbc-a4db-\
71daf3361377"]
}, Open  ]]
},
WindowSize->{1845, 965},
WindowMargins->{{-8, Automatic}, {Automatic, 0}},
Magnification->1.5,
FrontEndVersion->"11.2 for Microsoft Windows (64-bit) (September 10, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 1298, 30, 184, "Input",ExpressionUUID->"faed1ba6-4bb0-4f0b-a673-49484b8d58da",
 InitializationCell->True],
Cell[1881, 54, 226, 4, 49, "Output",ExpressionUUID->"42f6fe98-66ac-4aac-8032-c69d0f3b73ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2144, 63, 1770, 37, 155, "Input",ExpressionUUID->"ead654b0-7c20-4bf1-9c10-c1dde242ea3d",
 InitializationCell->True],
Cell[3917, 102, 6982, 159, 76, "Output",ExpressionUUID->"ea3b02a4-08b7-42f2-a857-091ca6fc9469"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10936, 266, 1293, 31, 155, "Input",ExpressionUUID->"906b8018-cdc6-4286-80de-c58ff72c8512",
 InitializationCell->True],
Cell[12232, 299, 6000, 141, 76, "Output",ExpressionUUID->"ae31620b-641d-49c6-a1be-604bcc47c7ae"]
}, Open  ]],
Cell[18247, 443, 154, 3, 43, "Input",ExpressionUUID->"902d64a7-e8de-4b3c-856a-76507fd94765"],
Cell[18404, 448, 265, 6, 43, "Input",ExpressionUUID->"baa5e611-911e-44fa-8ae0-9e59cb2746e9"],
Cell[CellGroupData[{
Cell[18694, 458, 257, 6, 43, "Input",ExpressionUUID->"896f095b-ef26-4758-b1a2-391f29446aab"],
Cell[18954, 466, 389, 8, 49, "Output",ExpressionUUID->"e200fca1-7bca-4cd7-af39-f4651af87d86"]
}, Open  ]],
Cell[19358, 477, 205, 4, 43, "Input",ExpressionUUID->"45eae473-8ec7-42b4-b919-e02a1ef629d8"],
Cell[CellGroupData[{
Cell[19588, 485, 1066, 27, 218, "Input",ExpressionUUID->"e6faa67a-6ad1-40cc-af18-5efcde58dc53"],
Cell[20657, 514, 15187, 315, 227, "Output",ExpressionUUID->"5eb91b97-2716-4dfc-969f-7210fb37fef0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35881, 834, 1949, 40, 218, "Input",ExpressionUUID->"723801a8-a0d2-4269-aa05-2488d89765ea"],
Cell[37833, 876, 41377, 851, 377, "Output",ExpressionUUID->"af7a607a-8afc-4c47-99eb-6586104d318f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79247, 1732, 1678, 37, 189, "Input",ExpressionUUID->"7a6cb5c6-0f66-4add-9204-2e4f15caa4ff"],
Cell[80928, 1771, 41625, 853, 377, "Output",ExpressionUUID->"63624b61-7eb4-4688-98ed-755d682e3e93"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122590, 2629, 1862, 40, 160, "Input",ExpressionUUID->"6f1c823b-7933-42af-97c9-7fe4df62d853"],
Cell[124455, 2671, 41429, 851, 377, "Output",ExpressionUUID->"69b2d6de-2a79-4f8a-a0c8-b9536049ce2c"]
}, Open  ]],
Cell[165899, 3525, 41460, 851, 371, "Input",ExpressionUUID->"1880cf91-7cfc-45ee-b4e5-bc49fe8803c3"],
Cell[CellGroupData[{
Cell[207384, 4380, 1281, 31, 160, "Input",ExpressionUUID->"88f78a2b-cdc2-490f-a5dd-cb0a1eab0bcd"],
Cell[208668, 4413, 41421, 850, 377, "Output",ExpressionUUID->"74ba43e0-3f66-4d7b-8253-24d0c0b1ffe9"]
}, Open  ]],
Cell[250104, 5266, 382, 8, 43, "Input",ExpressionUUID->"f7484fb8-7f81-42a5-bcb9-688c92aac922"],
Cell[CellGroupData[{
Cell[250511, 5278, 544, 10, 43, "Input",ExpressionUUID->"1dec003c-6c70-4d8f-b029-7512941bedf4"],
Cell[251058, 5290, 40751, 836, 353, "Output",ExpressionUUID->"d1cce0db-6b12-419c-800f-a30cd2e45f76"]
}, Open  ]],
Cell[291824, 6129, 807, 15, 73, "Input",ExpressionUUID->"45d4292b-1942-4f3d-b0e2-76abd0634cce"],
Cell[CellGroupData[{
Cell[292656, 6148, 154, 3, 43, "Input",ExpressionUUID->"261250a3-ed4c-4cb5-b0c2-4b709ff30725"],
Cell[292813, 6153, 40559, 832, 353, "Output",ExpressionUUID->"ac3d4681-3983-4548-bd17-358f7cd8cd2e"]
}, Open  ]],
Cell[333387, 6988, 310, 6, 73, "Input",ExpressionUUID->"43425328-81b3-4341-950a-ff26414da6ba"],
Cell[CellGroupData[{
Cell[333722, 6998, 724, 18, 102, "Input",ExpressionUUID->"e641201d-496d-45ce-bb28-b1654501e8b1"],
Cell[334449, 7018, 437, 9, 35, "Message",ExpressionUUID->"8962e388-342e-4ad0-bdfd-f6d0dc5f7ac1"],
Cell[334889, 7029, 434, 8, 35, "Message",ExpressionUUID->"7c21ff9e-8086-4dcf-842d-6984a4afa984"]
}, Open  ]],
Cell[335338, 7040, 251, 5, 43, "Input",ExpressionUUID->"a48a8d8c-f4f6-4e72-a691-5973f7dd16b5"],
Cell[335592, 7047, 249, 5, 43, "Input",ExpressionUUID->"1f0f6b29-d7bd-4338-afdf-baec2ae71587"],
Cell[335844, 7054, 198, 3, 73, "Input",ExpressionUUID->"bde87536-0822-4826-a0d9-e28b6220bfcb"],
Cell[336045, 7059, 156, 3, 43, "Input",ExpressionUUID->"05274db0-405d-42ef-b570-c8cba872df04"],
Cell[CellGroupData[{
Cell[336226, 7066, 102362, 1686, 125, "Input",ExpressionUUID->"3578e120-bcb1-403d-9bf3-c35c01295620"],
Cell[438591, 8754, 5326, 92, 301, "Output",ExpressionUUID->"f1be2f4e-cceb-43d6-94c9-449942e622cb"]
}, Open  ]],
Cell[443932, 8849, 255, 4, 43, "Input",ExpressionUUID->"69da2340-2caf-4343-a514-b446729526ef"],
Cell[444190, 8855, 156, 3, 43, "Input",ExpressionUUID->"885e373c-381a-40a1-9ff0-98cc4143a561"],
Cell[444349, 8860, 380, 6, 43, "Input",ExpressionUUID->"1896fdac-dd65-4187-bc35-8755bad5df23"],
Cell[CellGroupData[{
Cell[444754, 8870, 316, 6, 43, "Input",ExpressionUUID->"b257e50d-d1a8-491a-bf10-54a141dd9642"],
Cell[445073, 8878, 13831, 311, 136, "Output",ExpressionUUID->"9fb4a3f2-ba83-4822-9220-f109da2bb90a"]
}, Open  ]],
Cell[458919, 9192, 231, 4, 43, "Input",ExpressionUUID->"cea46611-bfbe-449c-8af9-5b19547bef0a"],
Cell[459153, 9198, 229, 4, 43, "Input",ExpressionUUID->"1ca9ce7c-eecf-47f1-95aa-4b18d1888508"],
Cell[CellGroupData[{
Cell[459407, 9206, 868, 16, 73, "Input",ExpressionUUID->"b1935dca-f025-407d-84ce-d205535d9371"],
Cell[460278, 9224, 40558, 832, 353, "Output",ExpressionUUID->"875a616e-d358-4b61-9032-9f1fc5712234"]
}, Open  ]],
Cell[500851, 10059, 431, 7, 43, "Input",ExpressionUUID->"4bc52522-4ffa-4843-8e4e-e5eacafd6623"],
Cell[CellGroupData[{
Cell[501307, 10070, 502, 10, 73, "Input",ExpressionUUID->"1af8bf08-069d-4cd3-a03c-c0cff9189f47"],
Cell[501812, 10082, 7734, 157, 102, "Output",ExpressionUUID->"11447bd9-a79e-43a5-8849-2d1d8d643342"]
}, Open  ]],
Cell[CellGroupData[{
Cell[509583, 10244, 351, 8, 102, "Input",ExpressionUUID->"7a3d0d06-7919-48ac-9e93-ce0abd3ebf24"],
Cell[509937, 10254, 280, 5, 49, "Output",ExpressionUUID->"d9ffdc68-c314-42b8-8983-a8e7aee1a38d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[510254, 10264, 750, 15, 73, "Input",ExpressionUUID->"55164b96-25cc-48ba-9fe4-01fe6f6b8b40"],
Cell[511007, 10281, 40468, 831, 353, "Output",ExpressionUUID->"2730e219-00e0-42ee-a978-901c66d76025"]
}, Open  ]],
Cell[551490, 11115, 571, 11, 73, "Input",ExpressionUUID->"dbdf9446-50b0-457c-a28e-1e1519940ecf"],
Cell[CellGroupData[{
Cell[552086, 11130, 150246, 2470, 106, "Input",ExpressionUUID->"cfc29b19-1f93-4717-9664-5b4735667d8a"],
Cell[702335, 13602, 4684, 81, 74, "Output",ExpressionUUID->"91dc1012-1d75-4f95-a45f-ebd905d19216"]
}, Open  ]],
Cell[707034, 13686, 156, 3, 43, "Input",ExpressionUUID->"f42432c3-02eb-4c07-bf89-8e1622a1f80f"],
Cell[CellGroupData[{
Cell[707215, 13693, 580, 13, 73, "Input",ExpressionUUID->"de1ecf5c-5ede-439f-9b9a-91ace87c23ae"],
Cell[707798, 13708, 424, 9, 49, "Output",ExpressionUUID->"c2c1768b-8cd4-447c-931c-2f06949d9d13"]
}, Open  ]],
Cell[CellGroupData[{
Cell[708259, 13722, 639, 14, 43, "Input",ExpressionUUID->"45207288-84f6-403e-8b34-1ad53d3c3e42"],
Cell[708901, 13738, 417, 10, 49, "Output",ExpressionUUID->"0937e232-6da5-44a9-91f1-048904d20da0"]
}, Open  ]],
Cell[709333, 13751, 154, 3, 43, "Input",ExpressionUUID->"6765ca3d-a459-406c-8ba3-9b036d8ca855"],
Cell[CellGroupData[{
Cell[709512, 13758, 1119, 22, 102, "Input",ExpressionUUID->"cd599eed-bfa6-4b36-97e6-d5bd96140f13"],
Cell[710634, 13782, 569, 11, 49, "Output",ExpressionUUID->"7176c336-526e-40bb-b6b6-21c4187708ec"]
}, Open  ]],
Cell[711218, 13796, 153, 3, 43, "Input",ExpressionUUID->"d768379c-79f8-445c-a794-df754e8b6ffb"],
Cell[CellGroupData[{
Cell[711396, 13803, 702, 11, 43, "Input",ExpressionUUID->"7c26d81f-fedd-47e5-9ce1-0297342b8e05"],
Cell[712101, 13816, 151, 3, 49, "Output",ExpressionUUID->"d8126f88-cef0-4499-9540-5679f3b38bd2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[712289, 13824, 478, 10, 102, "Input",ExpressionUUID->"d666387b-c029-44dd-9b7a-e07414b1791b"],
Cell[712770, 13836, 180, 3, 49, "Output",ExpressionUUID->"a40ec9a1-321d-4b71-b94b-20d17618afaa"],
Cell[712953, 13841, 185, 3, 49, "Output",ExpressionUUID->"dd0e0ce9-b1ba-4837-a881-305a69159ec3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[713175, 13849, 989, 24, 160, "Input",ExpressionUUID->"1c7a27fc-f6c1-4b78-800a-f1b85a4004e6"],
Cell[714167, 13875, 432, 11, 49, "Output",ExpressionUUID->"6ea0ffd4-7b1f-405e-ba6d-f43147104afd"]
}, Open  ]],
Cell[714614, 13889, 9774, 222, 856, "Input",ExpressionUUID->"85dcc5cf-46b0-46d0-92ca-fc3995119c13"],
Cell[724391, 14113, 152, 3, 43, InheritFromParent,ExpressionUUID->"82baee11-1fb7-4bc7-bca5-6a00e6fcd53e"],
Cell[724546, 14118, 4592, 80, 70, "Input",ExpressionUUID->"e498edd3-a482-4edd-9d82-860ab80a6e08"],
Cell[729141, 14200, 1323, 25, 102, "Input",ExpressionUUID->"808dbfb1-cd1f-4200-b0d8-3905479b408e"],
Cell[CellGroupData[{
Cell[730489, 14229, 1883, 34, 131, "Input",ExpressionUUID->"2ea59226-cc16-42cc-b249-b66b295a7083"],
Cell[732375, 14265, 2921, 66, 166, "Output",ExpressionUUID->"fc4d124f-5d20-487a-98e1-35401b09c0da"]
}, Open  ]],
Cell[735311, 14334, 435, 9, 43, "Input",ExpressionUUID->"1a12c5ab-1683-46ff-8e8b-8ba374599b94"],
Cell[735749, 14345, 1464, 33, 102, "Input",ExpressionUUID->"b4179922-6f51-4432-8192-31a497bc1ddb"],
Cell[CellGroupData[{
Cell[737238, 14382, 1631, 37, 160, "Input",ExpressionUUID->"37853532-c0aa-44ea-97ab-6435ca47b1a9"],
Cell[738872, 14421, 368, 8, 35, "Message",ExpressionUUID->"29fba838-8b59-4fbb-bae1-f7c2a9c05cca"]
}, Open  ]],
Cell[739255, 14432, 826, 15, 73, "Input",ExpressionUUID->"874182cb-31e7-411a-8849-1aafad65ab8e"],
Cell[740084, 14449, 3337, 71, 479, "Input",ExpressionUUID->"26262c86-a893-4f01-8157-3334b3c37b1a"],
Cell[743424, 14522, 4186, 102, 595, "Input",ExpressionUUID->"968f5dc4-dae6-4ed1-9afd-7b1b64743ee5"],
Cell[747613, 14626, 806, 18, 73, "Input",ExpressionUUID->"4298fa2a-c20e-4753-994c-94f59fb4877a"],
Cell[CellGroupData[{
Cell[748444, 14648, 993, 23, 73, "Input",ExpressionUUID->"92597027-35cc-4904-a65f-8c03b79c5da4"],
Cell[749440, 14673, 318, 7, 49, "Output",ExpressionUUID->"2dfc59ab-2022-4aaa-a260-1b61ec458154"]
}, Open  ]],
Cell[CellGroupData[{
Cell[749795, 14685, 489, 12, 43, "Input",ExpressionUUID->"36ef4dfe-5c4a-4f4b-b8ac-df2c2bab4f1a"],
Cell[750287, 14699, 328, 7, 49, "Output",ExpressionUUID->"87e0a806-450b-4cbc-a4db-71daf3361377"]
}, Open  ]]
}
]
*)

